/*
CityPay Payment API

 Welcome to the CityPay API, a robust HTTP API payment solution designed for seamless server-to-server  transactional processing. Our API facilitates a wide array of payment operations, catering to diverse business needs.  Whether you're integrating Internet payments, handling Mail Order/Telephone Order (MOTO) transactions, managing  Subscriptions with Recurring and Continuous Authority payments, or navigating the complexities of 3-D Secure  authentication, our API is equipped to support your requirements. Additionally, we offer functionalities for  Authorisation, Refunding, Pre-Authorisation, Cancellation/Voids, and Completion processing, alongside the capability  for tokenised payments.  ## Compliance and Security Overview <aside class=\"notice\">   Ensuring the security of payment transactions and compliance with industry standards is paramount. Our API is    designed with stringent security measures and compliance protocols to safeguard sensitive information and meet    the rigorous requirements of Visa, MasterCard, and the PCI Security Standards Council. </aside>  ### Key Compliance and Security Measures  * **TLS Encryption**: All data transmissions must utilise TLS version 1.2 or higher, employing [strong cryptography](#enabled-tls-ciphers). Our infrastructure strictly enforces this requirement to maintain the integrity and confidentiality of data in transit. We conduct regular scans and assessments of our TLS endpoints to identify and mitigate vulnerabilities. * **Data Storage Prohibitions**: Storing sensitive cardholder data (CHD), such as the card security code (CSC) or primary account number (PAN), is strictly prohibited. Our API is designed to minimize your exposure to sensitive data, thereby reducing your compliance burden. * **Data Masking**: For consumer protection and compliance, full card numbers must not be displayed on receipts or any customer-facing materials. Our API automatically masks PANs, displaying only the last four digits to facilitate safe receipt generation. * **Network Scans**: If your application is web-based, regular scans of your hosting environment are mandatory to identify and rectify potential vulnerabilities. This proactive measure is crucial for maintaining a secure and compliant online presence. * **PCI Compliance**: Adherence to PCI DSS standards is not optional; it's a requirement for operating securely and legally in the payments ecosystem. For detailed information on compliance requirements and resources, please visit the PCI Security Standards Council website [https://www.pcisecuritystandards.org/](https://www.pcisecuritystandards.org/). * **Request Validation**: Our API includes mechanisms to verify the legitimacy of each request, ensuring it pertains to a valid account and originates from a trusted source. We leverage remote IP address verification alongside sophisticated application firewall technologies to thwart a wide array of common security threats.  ## Getting Started Before integrating with the CityPay API, ensure your application and development practices align with the outlined compliance and security measures. This preparatory step is crucial for a smooth integration process and the long-term success of your payment processing operations.  For further details on API endpoints, request/response formats, and code examples, proceed to the subsequent sections of our documentation. Our aim is to provide you with all the necessary tools and information to integrate our payment processing capabilities seamlessly into your application.  Thank you for choosing CityPay API. We look forward to supporting your payment processing needs with our secure, compliant, and versatile API solution.

API version: 6.6.40
Contact: support@citypay.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citypay

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the AirlineSegment type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AirlineSegment{}

// AirlineSegment struct for AirlineSegment
type AirlineSegment struct {
	// A standard airline routing code (airport code or location identifier) applicable to the arrival portion of this segment.
	ArrivalLocationCode string `json:"arrival_location_code"`
	// This field contains the two character airline designator code (air carrier code or airline code) that corresponds to the airline carrier applicable for up to four flight segments of this trip itinerary.
	CarrierCode string `json:"carrier_code"`
	// This field contains a code that corresponds to the fare class (A, B, C, D, Premium, Discounted, etc.) within the overall class of service (e.g., First Class, Business, Economy) applicable to this travel segment, as specified in the IATA Standard Code allocation table.
	ClassServiceCode string `json:"class_service_code"`
	// The Departure Date for the travel segment in ISO Date Format (yyyy-MM-dd).
	DepartureDate string `json:"departure_date"`
	// A standard airline routing code (airport code or location identifier) applicable to the departure portion of this segment.
	DepartureLocationCode *string `json:"departure_location_code,omitempty"`
	// This field contains the carrier-assigned Flight Number for this travel segment.
	FlightNumber string `json:"flight_number"`
	// This field contains the total Fare for this travel segment.
	SegmentFare *int32 `json:"segment_fare,omitempty"`
	// O = Stopover allowed, X = Stopover not allowed.
	StopOverIndicator *string `json:"stop_over_indicator,omitempty"`
}

type _AirlineSegment AirlineSegment

// NewAirlineSegment instantiates a new AirlineSegment object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAirlineSegment(arrivalLocationCode string, carrierCode string, classServiceCode string, departureDate string, flightNumber string) *AirlineSegment {
	this := AirlineSegment{}
	this.ArrivalLocationCode = arrivalLocationCode
	this.CarrierCode = carrierCode
	this.ClassServiceCode = classServiceCode
	this.DepartureDate = departureDate
	this.FlightNumber = flightNumber
	return &this
}

// NewAirlineSegmentWithDefaults instantiates a new AirlineSegment object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAirlineSegmentWithDefaults() *AirlineSegment {
	this := AirlineSegment{}
	return &this
}

// GetArrivalLocationCode returns the ArrivalLocationCode field value
func (o *AirlineSegment) GetArrivalLocationCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ArrivalLocationCode
}

// GetArrivalLocationCodeOk returns a tuple with the ArrivalLocationCode field value
// and a boolean to check if the value has been set.
func (o *AirlineSegment) GetArrivalLocationCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ArrivalLocationCode, true
}

// SetArrivalLocationCode sets field value
func (o *AirlineSegment) SetArrivalLocationCode(v string) {
	o.ArrivalLocationCode = v
}

// GetCarrierCode returns the CarrierCode field value
func (o *AirlineSegment) GetCarrierCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CarrierCode
}

// GetCarrierCodeOk returns a tuple with the CarrierCode field value
// and a boolean to check if the value has been set.
func (o *AirlineSegment) GetCarrierCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CarrierCode, true
}

// SetCarrierCode sets field value
func (o *AirlineSegment) SetCarrierCode(v string) {
	o.CarrierCode = v
}

// GetClassServiceCode returns the ClassServiceCode field value
func (o *AirlineSegment) GetClassServiceCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClassServiceCode
}

// GetClassServiceCodeOk returns a tuple with the ClassServiceCode field value
// and a boolean to check if the value has been set.
func (o *AirlineSegment) GetClassServiceCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClassServiceCode, true
}

// SetClassServiceCode sets field value
func (o *AirlineSegment) SetClassServiceCode(v string) {
	o.ClassServiceCode = v
}

// GetDepartureDate returns the DepartureDate field value
func (o *AirlineSegment) GetDepartureDate() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DepartureDate
}

// GetDepartureDateOk returns a tuple with the DepartureDate field value
// and a boolean to check if the value has been set.
func (o *AirlineSegment) GetDepartureDateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DepartureDate, true
}

// SetDepartureDate sets field value
func (o *AirlineSegment) SetDepartureDate(v string) {
	o.DepartureDate = v
}

// GetDepartureLocationCode returns the DepartureLocationCode field value if set, zero value otherwise.
func (o *AirlineSegment) GetDepartureLocationCode() string {
	if o == nil || IsNil(o.DepartureLocationCode) {
		var ret string
		return ret
	}
	return *o.DepartureLocationCode
}

// GetDepartureLocationCodeOk returns a tuple with the DepartureLocationCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AirlineSegment) GetDepartureLocationCodeOk() (*string, bool) {
	if o == nil || IsNil(o.DepartureLocationCode) {
		return nil, false
	}
	return o.DepartureLocationCode, true
}

// HasDepartureLocationCode returns a boolean if a field has been set.
func (o *AirlineSegment) HasDepartureLocationCode() bool {
	if o != nil && !IsNil(o.DepartureLocationCode) {
		return true
	}

	return false
}

// SetDepartureLocationCode gets a reference to the given string and assigns it to the DepartureLocationCode field.
func (o *AirlineSegment) SetDepartureLocationCode(v string) {
	o.DepartureLocationCode = &v
}

// GetFlightNumber returns the FlightNumber field value
func (o *AirlineSegment) GetFlightNumber() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FlightNumber
}

// GetFlightNumberOk returns a tuple with the FlightNumber field value
// and a boolean to check if the value has been set.
func (o *AirlineSegment) GetFlightNumberOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FlightNumber, true
}

// SetFlightNumber sets field value
func (o *AirlineSegment) SetFlightNumber(v string) {
	o.FlightNumber = v
}

// GetSegmentFare returns the SegmentFare field value if set, zero value otherwise.
func (o *AirlineSegment) GetSegmentFare() int32 {
	if o == nil || IsNil(o.SegmentFare) {
		var ret int32
		return ret
	}
	return *o.SegmentFare
}

// GetSegmentFareOk returns a tuple with the SegmentFare field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AirlineSegment) GetSegmentFareOk() (*int32, bool) {
	if o == nil || IsNil(o.SegmentFare) {
		return nil, false
	}
	return o.SegmentFare, true
}

// HasSegmentFare returns a boolean if a field has been set.
func (o *AirlineSegment) HasSegmentFare() bool {
	if o != nil && !IsNil(o.SegmentFare) {
		return true
	}

	return false
}

// SetSegmentFare gets a reference to the given int32 and assigns it to the SegmentFare field.
func (o *AirlineSegment) SetSegmentFare(v int32) {
	o.SegmentFare = &v
}

// GetStopOverIndicator returns the StopOverIndicator field value if set, zero value otherwise.
func (o *AirlineSegment) GetStopOverIndicator() string {
	if o == nil || IsNil(o.StopOverIndicator) {
		var ret string
		return ret
	}
	return *o.StopOverIndicator
}

// GetStopOverIndicatorOk returns a tuple with the StopOverIndicator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AirlineSegment) GetStopOverIndicatorOk() (*string, bool) {
	if o == nil || IsNil(o.StopOverIndicator) {
		return nil, false
	}
	return o.StopOverIndicator, true
}

// HasStopOverIndicator returns a boolean if a field has been set.
func (o *AirlineSegment) HasStopOverIndicator() bool {
	if o != nil && !IsNil(o.StopOverIndicator) {
		return true
	}

	return false
}

// SetStopOverIndicator gets a reference to the given string and assigns it to the StopOverIndicator field.
func (o *AirlineSegment) SetStopOverIndicator(v string) {
	o.StopOverIndicator = &v
}

func (o AirlineSegment) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AirlineSegment) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["arrival_location_code"] = o.ArrivalLocationCode
	toSerialize["carrier_code"] = o.CarrierCode
	toSerialize["class_service_code"] = o.ClassServiceCode
	toSerialize["departure_date"] = o.DepartureDate
	if !IsNil(o.DepartureLocationCode) {
		toSerialize["departure_location_code"] = o.DepartureLocationCode
	}
	toSerialize["flight_number"] = o.FlightNumber
	if !IsNil(o.SegmentFare) {
		toSerialize["segment_fare"] = o.SegmentFare
	}
	if !IsNil(o.StopOverIndicator) {
		toSerialize["stop_over_indicator"] = o.StopOverIndicator
	}
	return toSerialize, nil
}

func (o *AirlineSegment) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"arrival_location_code",
		"carrier_code",
		"class_service_code",
		"departure_date",
		"flight_number",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAirlineSegment := _AirlineSegment{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAirlineSegment)

	if err != nil {
		return err
	}

	*o = AirlineSegment(varAirlineSegment)

	return err
}

type NullableAirlineSegment struct {
	value *AirlineSegment
	isSet bool
}

func (v NullableAirlineSegment) Get() *AirlineSegment {
	return v.value
}

func (v *NullableAirlineSegment) Set(val *AirlineSegment) {
	v.value = val
	v.isSet = true
}

func (v NullableAirlineSegment) IsSet() bool {
	return v.isSet
}

func (v *NullableAirlineSegment) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAirlineSegment(val *AirlineSegment) *NullableAirlineSegment {
	return &NullableAirlineSegment{value: val, isSet: true}
}

func (v NullableAirlineSegment) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAirlineSegment) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
