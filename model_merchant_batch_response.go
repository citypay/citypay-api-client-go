/*
CityPay Payment API

 Welcome to the CityPay API, a robust HTTP API payment solution designed for seamless server-to-server  transactional processing. Our API facilitates a wide array of payment operations, catering to diverse business needs.  Whether you're integrating Internet payments, handling Mail Order/Telephone Order (MOTO) transactions, managing  Subscriptions with Recurring and Continuous Authority payments, or navigating the complexities of 3-D Secure  authentication, our API is equipped to support your requirements. Additionally, we offer functionalities for  Authorisation, Refunding, Pre-Authorisation, Cancellation/Voids, and Completion processing, alongside the capability  for tokenised payments.  ## Compliance and Security Overview <aside class=\"notice\">   Ensuring the security of payment transactions and compliance with industry standards is paramount. Our API is    designed with stringent security measures and compliance protocols to safeguard sensitive information and meet    the rigorous requirements of Visa, MasterCard, and the PCI Security Standards Council. </aside>  ### Key Compliance and Security Measures  * **TLS Encryption**: All data transmissions must utilise TLS version 1.2 or higher, employing [strong cryptography](#enabled-tls-ciphers). Our infrastructure strictly enforces this requirement to maintain the integrity and confidentiality of data in transit. We conduct regular scans and assessments of our TLS endpoints to identify and mitigate vulnerabilities. * **Data Storage Prohibitions**: Storing sensitive cardholder data (CHD), such as the card security code (CSC) or primary account number (PAN), is strictly prohibited. Our API is designed to minimize your exposure to sensitive data, thereby reducing your compliance burden. * **Data Masking**: For consumer protection and compliance, full card numbers must not be displayed on receipts or any customer-facing materials. Our API automatically masks PANs, displaying only the last four digits to facilitate safe receipt generation. * **Network Scans**: If your application is web-based, regular scans of your hosting environment are mandatory to identify and rectify potential vulnerabilities. This proactive measure is crucial for maintaining a secure and compliant online presence. * **PCI Compliance**: Adherence to PCI DSS standards is not optional; it's a requirement for operating securely and legally in the payments ecosystem. For detailed information on compliance requirements and resources, please visit the PCI Security Standards Council website [https://www.pcisecuritystandards.org/](https://www.pcisecuritystandards.org/). * **Request Validation**: Our API includes mechanisms to verify the legitimacy of each request, ensuring it pertains to a valid account and originates from a trusted source. We leverage remote IP address verification alongside sophisticated application firewall technologies to thwart a wide array of common security threats.  ## Getting Started Before integrating with the CityPay API, ensure your application and development practices align with the outlined compliance and security measures. This preparatory step is crucial for a smooth integration process and the long-term success of your payment processing operations.  For further details on API endpoints, request/response formats, and code examples, proceed to the subsequent sections of our documentation. Our aim is to provide you with all the necessary tools and information to integrate our payment processing capabilities seamlessly into your application.  Thank you for choosing CityPay API. We look forward to supporting your payment processing needs with our secure, compliant, and versatile API solution.

API version: 6.6.40
Contact: support@citypay.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citypay

import (
	"encoding/json"
	"time"
)

// checks if the MerchantBatchResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MerchantBatchResponse{}

// MerchantBatchResponse struct for MerchantBatchResponse
type MerchantBatchResponse struct {
	// The date and time when the batch was closed. This is represented in ISO 8601 format (e.g., YYYY-MM-DDTHH:MM:SSZ) and indicates when the batch processing was completed.
	BatchClosed *time.Time `json:"batch_closed,omitempty"`
	// The incremental identifier of the batch. This number is used to track and reference the batch in subsequent operations or inquiries.
	BatchNo *string `json:"batch_no,omitempty"`
	// A descriptive string detailing the current status of the batch. This status provides a human-readable explanation of the batch's processing state.
	BatchStatus *string `json:"batch_status,omitempty"`
	// A batch status code that represents the processing state of the batch. Batches will be one of  - 'O' defining the batch is open for settlement and not yet settled  - 'X' defines that the batch is external to our systems and managed elsewhere  - 'C' defines that the batch is cancelled and not settled  - 'S' defines that the batch has been settled and remitted.
	BatchStatusCode *string `json:"batch_status_code,omitempty"`
	// The currency of the batch.
	Currency *string `json:"currency,omitempty"`
	// The Merchant ID (MID) associated with the batch. This identifier specifies which merchant account the batch was processed for, linking transactions to the merchant.
	Merchantid *int32              `json:"merchantid,omitempty"`
	NetSummary *NetSummaryResponse `json:"net_summary,omitempty"`
}

// NewMerchantBatchResponse instantiates a new MerchantBatchResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMerchantBatchResponse() *MerchantBatchResponse {
	this := MerchantBatchResponse{}
	return &this
}

// NewMerchantBatchResponseWithDefaults instantiates a new MerchantBatchResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMerchantBatchResponseWithDefaults() *MerchantBatchResponse {
	this := MerchantBatchResponse{}
	return &this
}

// GetBatchClosed returns the BatchClosed field value if set, zero value otherwise.
func (o *MerchantBatchResponse) GetBatchClosed() time.Time {
	if o == nil || IsNil(o.BatchClosed) {
		var ret time.Time
		return ret
	}
	return *o.BatchClosed
}

// GetBatchClosedOk returns a tuple with the BatchClosed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MerchantBatchResponse) GetBatchClosedOk() (*time.Time, bool) {
	if o == nil || IsNil(o.BatchClosed) {
		return nil, false
	}
	return o.BatchClosed, true
}

// HasBatchClosed returns a boolean if a field has been set.
func (o *MerchantBatchResponse) HasBatchClosed() bool {
	if o != nil && !IsNil(o.BatchClosed) {
		return true
	}

	return false
}

// SetBatchClosed gets a reference to the given time.Time and assigns it to the BatchClosed field.
func (o *MerchantBatchResponse) SetBatchClosed(v time.Time) {
	o.BatchClosed = &v
}

// GetBatchNo returns the BatchNo field value if set, zero value otherwise.
func (o *MerchantBatchResponse) GetBatchNo() string {
	if o == nil || IsNil(o.BatchNo) {
		var ret string
		return ret
	}
	return *o.BatchNo
}

// GetBatchNoOk returns a tuple with the BatchNo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MerchantBatchResponse) GetBatchNoOk() (*string, bool) {
	if o == nil || IsNil(o.BatchNo) {
		return nil, false
	}
	return o.BatchNo, true
}

// HasBatchNo returns a boolean if a field has been set.
func (o *MerchantBatchResponse) HasBatchNo() bool {
	if o != nil && !IsNil(o.BatchNo) {
		return true
	}

	return false
}

// SetBatchNo gets a reference to the given string and assigns it to the BatchNo field.
func (o *MerchantBatchResponse) SetBatchNo(v string) {
	o.BatchNo = &v
}

// GetBatchStatus returns the BatchStatus field value if set, zero value otherwise.
func (o *MerchantBatchResponse) GetBatchStatus() string {
	if o == nil || IsNil(o.BatchStatus) {
		var ret string
		return ret
	}
	return *o.BatchStatus
}

// GetBatchStatusOk returns a tuple with the BatchStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MerchantBatchResponse) GetBatchStatusOk() (*string, bool) {
	if o == nil || IsNil(o.BatchStatus) {
		return nil, false
	}
	return o.BatchStatus, true
}

// HasBatchStatus returns a boolean if a field has been set.
func (o *MerchantBatchResponse) HasBatchStatus() bool {
	if o != nil && !IsNil(o.BatchStatus) {
		return true
	}

	return false
}

// SetBatchStatus gets a reference to the given string and assigns it to the BatchStatus field.
func (o *MerchantBatchResponse) SetBatchStatus(v string) {
	o.BatchStatus = &v
}

// GetBatchStatusCode returns the BatchStatusCode field value if set, zero value otherwise.
func (o *MerchantBatchResponse) GetBatchStatusCode() string {
	if o == nil || IsNil(o.BatchStatusCode) {
		var ret string
		return ret
	}
	return *o.BatchStatusCode
}

// GetBatchStatusCodeOk returns a tuple with the BatchStatusCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MerchantBatchResponse) GetBatchStatusCodeOk() (*string, bool) {
	if o == nil || IsNil(o.BatchStatusCode) {
		return nil, false
	}
	return o.BatchStatusCode, true
}

// HasBatchStatusCode returns a boolean if a field has been set.
func (o *MerchantBatchResponse) HasBatchStatusCode() bool {
	if o != nil && !IsNil(o.BatchStatusCode) {
		return true
	}

	return false
}

// SetBatchStatusCode gets a reference to the given string and assigns it to the BatchStatusCode field.
func (o *MerchantBatchResponse) SetBatchStatusCode(v string) {
	o.BatchStatusCode = &v
}

// GetCurrency returns the Currency field value if set, zero value otherwise.
func (o *MerchantBatchResponse) GetCurrency() string {
	if o == nil || IsNil(o.Currency) {
		var ret string
		return ret
	}
	return *o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MerchantBatchResponse) GetCurrencyOk() (*string, bool) {
	if o == nil || IsNil(o.Currency) {
		return nil, false
	}
	return o.Currency, true
}

// HasCurrency returns a boolean if a field has been set.
func (o *MerchantBatchResponse) HasCurrency() bool {
	if o != nil && !IsNil(o.Currency) {
		return true
	}

	return false
}

// SetCurrency gets a reference to the given string and assigns it to the Currency field.
func (o *MerchantBatchResponse) SetCurrency(v string) {
	o.Currency = &v
}

// GetMerchantid returns the Merchantid field value if set, zero value otherwise.
func (o *MerchantBatchResponse) GetMerchantid() int32 {
	if o == nil || IsNil(o.Merchantid) {
		var ret int32
		return ret
	}
	return *o.Merchantid
}

// GetMerchantidOk returns a tuple with the Merchantid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MerchantBatchResponse) GetMerchantidOk() (*int32, bool) {
	if o == nil || IsNil(o.Merchantid) {
		return nil, false
	}
	return o.Merchantid, true
}

// HasMerchantid returns a boolean if a field has been set.
func (o *MerchantBatchResponse) HasMerchantid() bool {
	if o != nil && !IsNil(o.Merchantid) {
		return true
	}

	return false
}

// SetMerchantid gets a reference to the given int32 and assigns it to the Merchantid field.
func (o *MerchantBatchResponse) SetMerchantid(v int32) {
	o.Merchantid = &v
}

// GetNetSummary returns the NetSummary field value if set, zero value otherwise.
func (o *MerchantBatchResponse) GetNetSummary() NetSummaryResponse {
	if o == nil || IsNil(o.NetSummary) {
		var ret NetSummaryResponse
		return ret
	}
	return *o.NetSummary
}

// GetNetSummaryOk returns a tuple with the NetSummary field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MerchantBatchResponse) GetNetSummaryOk() (*NetSummaryResponse, bool) {
	if o == nil || IsNil(o.NetSummary) {
		return nil, false
	}
	return o.NetSummary, true
}

// HasNetSummary returns a boolean if a field has been set.
func (o *MerchantBatchResponse) HasNetSummary() bool {
	if o != nil && !IsNil(o.NetSummary) {
		return true
	}

	return false
}

// SetNetSummary gets a reference to the given NetSummaryResponse and assigns it to the NetSummary field.
func (o *MerchantBatchResponse) SetNetSummary(v NetSummaryResponse) {
	o.NetSummary = &v
}

func (o MerchantBatchResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MerchantBatchResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BatchClosed) {
		toSerialize["batch_closed"] = o.BatchClosed
	}
	if !IsNil(o.BatchNo) {
		toSerialize["batch_no"] = o.BatchNo
	}
	if !IsNil(o.BatchStatus) {
		toSerialize["batch_status"] = o.BatchStatus
	}
	if !IsNil(o.BatchStatusCode) {
		toSerialize["batch_status_code"] = o.BatchStatusCode
	}
	if !IsNil(o.Currency) {
		toSerialize["currency"] = o.Currency
	}
	if !IsNil(o.Merchantid) {
		toSerialize["merchantid"] = o.Merchantid
	}
	if !IsNil(o.NetSummary) {
		toSerialize["net_summary"] = o.NetSummary
	}
	return toSerialize, nil
}

type NullableMerchantBatchResponse struct {
	value *MerchantBatchResponse
	isSet bool
}

func (v NullableMerchantBatchResponse) Get() *MerchantBatchResponse {
	return v.value
}

func (v *NullableMerchantBatchResponse) Set(val *MerchantBatchResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableMerchantBatchResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableMerchantBatchResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMerchantBatchResponse(val *MerchantBatchResponse) *NullableMerchantBatchResponse {
	return &NullableMerchantBatchResponse{value: val, isSet: true}
}

func (v NullableMerchantBatchResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMerchantBatchResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
