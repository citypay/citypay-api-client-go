/*
CityPay Payment API

 Welcome to the CityPay API, a robust HTTP API payment solution designed for seamless server-to-server  transactional processing. Our API facilitates a wide array of payment operations, catering to diverse business needs.  Whether you're integrating Internet payments, handling Mail Order/Telephone Order (MOTO) transactions, managing  Subscriptions with Recurring and Continuous Authority payments, or navigating the complexities of 3-D Secure  authentication, our API is equipped to support your requirements. Additionally, we offer functionalities for  Authorisation, Refunding, Pre-Authorisation, Cancellation/Voids, and Completion processing, alongside the capability  for tokenised payments.  ## Compliance and Security Overview <aside class=\"notice\">   Ensuring the security of payment transactions and compliance with industry standards is paramount. Our API is    designed with stringent security measures and compliance protocols to safeguard sensitive information and meet    the rigorous requirements of Visa, MasterCard, and the PCI Security Standards Council. </aside>  ### Key Compliance and Security Measures  * **TLS Encryption**: All data transmissions must utilise TLS version 1.2 or higher, employing [strong cryptography](#enabled-tls-ciphers). Our infrastructure strictly enforces this requirement to maintain the integrity and confidentiality of data in transit. We conduct regular scans and assessments of our TLS endpoints to identify and mitigate vulnerabilities. * **Data Storage Prohibitions**: Storing sensitive cardholder data (CHD), such as the card security code (CSC) or primary account number (PAN), is strictly prohibited. Our API is designed to minimize your exposure to sensitive data, thereby reducing your compliance burden. * **Data Masking**: For consumer protection and compliance, full card numbers must not be displayed on receipts or any customer-facing materials. Our API automatically masks PANs, displaying only the last four digits to facilitate safe receipt generation. * **Network Scans**: If your application is web-based, regular scans of your hosting environment are mandatory to identify and rectify potential vulnerabilities. This proactive measure is crucial for maintaining a secure and compliant online presence. * **PCI Compliance**: Adherence to PCI DSS standards is not optional; it's a requirement for operating securely and legally in the payments ecosystem. For detailed information on compliance requirements and resources, please visit the PCI Security Standards Council website [https://www.pcisecuritystandards.org/](https://www.pcisecuritystandards.org/). * **Request Validation**: Our API includes mechanisms to verify the legitimacy of each request, ensuring it pertains to a valid account and originates from a trusted source. We leverage remote IP address verification alongside sophisticated application firewall technologies to thwart a wide array of common security threats.  ## Getting Started Before integrating with the CityPay API, ensure your application and development practices align with the outlined compliance and security measures. This preparatory step is crucial for a smooth integration process and the long-term success of your payment processing operations.  For further details on API endpoints, request/response formats, and code examples, proceed to the subsequent sections of our documentation. Our aim is to provide you with all the necessary tools and information to integrate our payment processing capabilities seamlessly into your application.  Thank you for choosing CityPay API. We look forward to supporting your payment processing needs with our secure, compliant, and versatile API solution.

API version: 6.6.40
Contact: support@citypay.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citypay

import (
	"encoding/json"
	"time"
)

// checks if the PaylinkTokenStatus type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PaylinkTokenStatus{}

// PaylinkTokenStatus struct for PaylinkTokenStatus
type PaylinkTokenStatus struct {
	// the amount that has been paid against the session.
	AmountPaid *int32 `json:"amount_paid,omitempty"`
	// an authorisation code if the transaction was processed and isPaid is true.
	AuthCode *string `json:"auth_code,omitempty"`
	// a description of the card that was used for payment if paid.
	Card *string `json:"card,omitempty"`
	// the date and time that the session was created.
	Created *time.Time `json:"created,omitempty"`
	// the date and time of the current status.
	Datetime *time.Time `json:"datetime,omitempty"`
	// the merchant identifier, to help identifying the token.
	Identifier *string `json:"identifier,omitempty"`
	// true if an attachment exists.
	IsAttachment *bool `json:"is_attachment,omitempty"`
	// true if the session was cancelled either by the user or by a system request.
	IsCancelled *bool `json:"is_cancelled,omitempty"`
	// true if the token has been closed.
	IsClosed *bool `json:"is_closed,omitempty"`
	// true if a customer receipt has been sent.
	IsCustomerReceiptEmailSent *bool `json:"is_customer_receipt_email_sent,omitempty"`
	// true if an email was sent.
	IsEmailSent *bool `json:"is_email_sent,omitempty"`
	// true if the session has expired.
	IsExpired *bool `json:"is_expired,omitempty"`
	// true if the form was ever displayed to the addressee.
	IsFormViewed *bool `json:"is_form_viewed,omitempty"`
	// true if a merchant notification receipt was sent.
	IsMerchantNotificationEmailSent *bool `json:"is_merchant_notification_email_sent,omitempty"`
	// true if the session is still open for payment or false if it has been closed.
	IsOpenForPayment *bool `json:"is_open_for_payment,omitempty"`
	// whether the session has been paid and therefore can be considered as complete.
	IsPaid *bool `json:"is_paid,omitempty"`
	// true if payment has been attempted.
	IsPaymentAttempted *bool `json:"is_payment_attempted,omitempty"`
	// true if a post back was executed successfully.
	IsPostbackOk *bool `json:"is_postback_ok,omitempty"`
	// true if the request has been challenged using 3-D Secure.
	IsRequestChallenged *bool `json:"is_request_challenged,omitempty"`
	// true if an SMS was sent.
	IsSmsSent *bool `json:"is_sms_sent,omitempty"`
	// whether the token generation was successfully validated.
	IsValidated *bool `json:"is_validated,omitempty"`
	// the date and time that the session last had an event actioned against it.
	LastEventDateTime *time.Time `json:"last_event_date_time,omitempty"`
	// the result of the last payment if one exists.
	LastPaymentResult *string `json:"last_payment_result,omitempty"`
	// identifies the merchant account.
	Mid *int32 `json:"mid,omitempty"`
	// the number of attempts made to pay.
	PaymentAttemptsCount *int32              `json:"payment_attempts_count,omitempty"`
	StateHistory         []PaylinkStateEvent `json:"state_history,omitempty"`
	// the token value which uniquely identifies the session.
	Token *string `json:"token,omitempty"`
	// a transaction number if the transacstion was processed and isPaid is true.
	TransNo *int32 `json:"trans_no,omitempty"`
}

// NewPaylinkTokenStatus instantiates a new PaylinkTokenStatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPaylinkTokenStatus() *PaylinkTokenStatus {
	this := PaylinkTokenStatus{}
	return &this
}

// NewPaylinkTokenStatusWithDefaults instantiates a new PaylinkTokenStatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPaylinkTokenStatusWithDefaults() *PaylinkTokenStatus {
	this := PaylinkTokenStatus{}
	return &this
}

// GetAmountPaid returns the AmountPaid field value if set, zero value otherwise.
func (o *PaylinkTokenStatus) GetAmountPaid() int32 {
	if o == nil || IsNil(o.AmountPaid) {
		var ret int32
		return ret
	}
	return *o.AmountPaid
}

// GetAmountPaidOk returns a tuple with the AmountPaid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaylinkTokenStatus) GetAmountPaidOk() (*int32, bool) {
	if o == nil || IsNil(o.AmountPaid) {
		return nil, false
	}
	return o.AmountPaid, true
}

// HasAmountPaid returns a boolean if a field has been set.
func (o *PaylinkTokenStatus) HasAmountPaid() bool {
	if o != nil && !IsNil(o.AmountPaid) {
		return true
	}

	return false
}

// SetAmountPaid gets a reference to the given int32 and assigns it to the AmountPaid field.
func (o *PaylinkTokenStatus) SetAmountPaid(v int32) {
	o.AmountPaid = &v
}

// GetAuthCode returns the AuthCode field value if set, zero value otherwise.
func (o *PaylinkTokenStatus) GetAuthCode() string {
	if o == nil || IsNil(o.AuthCode) {
		var ret string
		return ret
	}
	return *o.AuthCode
}

// GetAuthCodeOk returns a tuple with the AuthCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaylinkTokenStatus) GetAuthCodeOk() (*string, bool) {
	if o == nil || IsNil(o.AuthCode) {
		return nil, false
	}
	return o.AuthCode, true
}

// HasAuthCode returns a boolean if a field has been set.
func (o *PaylinkTokenStatus) HasAuthCode() bool {
	if o != nil && !IsNil(o.AuthCode) {
		return true
	}

	return false
}

// SetAuthCode gets a reference to the given string and assigns it to the AuthCode field.
func (o *PaylinkTokenStatus) SetAuthCode(v string) {
	o.AuthCode = &v
}

// GetCard returns the Card field value if set, zero value otherwise.
func (o *PaylinkTokenStatus) GetCard() string {
	if o == nil || IsNil(o.Card) {
		var ret string
		return ret
	}
	return *o.Card
}

// GetCardOk returns a tuple with the Card field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaylinkTokenStatus) GetCardOk() (*string, bool) {
	if o == nil || IsNil(o.Card) {
		return nil, false
	}
	return o.Card, true
}

// HasCard returns a boolean if a field has been set.
func (o *PaylinkTokenStatus) HasCard() bool {
	if o != nil && !IsNil(o.Card) {
		return true
	}

	return false
}

// SetCard gets a reference to the given string and assigns it to the Card field.
func (o *PaylinkTokenStatus) SetCard(v string) {
	o.Card = &v
}

// GetCreated returns the Created field value if set, zero value otherwise.
func (o *PaylinkTokenStatus) GetCreated() time.Time {
	if o == nil || IsNil(o.Created) {
		var ret time.Time
		return ret
	}
	return *o.Created
}

// GetCreatedOk returns a tuple with the Created field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaylinkTokenStatus) GetCreatedOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Created) {
		return nil, false
	}
	return o.Created, true
}

// HasCreated returns a boolean if a field has been set.
func (o *PaylinkTokenStatus) HasCreated() bool {
	if o != nil && !IsNil(o.Created) {
		return true
	}

	return false
}

// SetCreated gets a reference to the given time.Time and assigns it to the Created field.
func (o *PaylinkTokenStatus) SetCreated(v time.Time) {
	o.Created = &v
}

// GetDatetime returns the Datetime field value if set, zero value otherwise.
func (o *PaylinkTokenStatus) GetDatetime() time.Time {
	if o == nil || IsNil(o.Datetime) {
		var ret time.Time
		return ret
	}
	return *o.Datetime
}

// GetDatetimeOk returns a tuple with the Datetime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaylinkTokenStatus) GetDatetimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Datetime) {
		return nil, false
	}
	return o.Datetime, true
}

// HasDatetime returns a boolean if a field has been set.
func (o *PaylinkTokenStatus) HasDatetime() bool {
	if o != nil && !IsNil(o.Datetime) {
		return true
	}

	return false
}

// SetDatetime gets a reference to the given time.Time and assigns it to the Datetime field.
func (o *PaylinkTokenStatus) SetDatetime(v time.Time) {
	o.Datetime = &v
}

// GetIdentifier returns the Identifier field value if set, zero value otherwise.
func (o *PaylinkTokenStatus) GetIdentifier() string {
	if o == nil || IsNil(o.Identifier) {
		var ret string
		return ret
	}
	return *o.Identifier
}

// GetIdentifierOk returns a tuple with the Identifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaylinkTokenStatus) GetIdentifierOk() (*string, bool) {
	if o == nil || IsNil(o.Identifier) {
		return nil, false
	}
	return o.Identifier, true
}

// HasIdentifier returns a boolean if a field has been set.
func (o *PaylinkTokenStatus) HasIdentifier() bool {
	if o != nil && !IsNil(o.Identifier) {
		return true
	}

	return false
}

// SetIdentifier gets a reference to the given string and assigns it to the Identifier field.
func (o *PaylinkTokenStatus) SetIdentifier(v string) {
	o.Identifier = &v
}

// GetIsAttachment returns the IsAttachment field value if set, zero value otherwise.
func (o *PaylinkTokenStatus) GetIsAttachment() bool {
	if o == nil || IsNil(o.IsAttachment) {
		var ret bool
		return ret
	}
	return *o.IsAttachment
}

// GetIsAttachmentOk returns a tuple with the IsAttachment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaylinkTokenStatus) GetIsAttachmentOk() (*bool, bool) {
	if o == nil || IsNil(o.IsAttachment) {
		return nil, false
	}
	return o.IsAttachment, true
}

// HasIsAttachment returns a boolean if a field has been set.
func (o *PaylinkTokenStatus) HasIsAttachment() bool {
	if o != nil && !IsNil(o.IsAttachment) {
		return true
	}

	return false
}

// SetIsAttachment gets a reference to the given bool and assigns it to the IsAttachment field.
func (o *PaylinkTokenStatus) SetIsAttachment(v bool) {
	o.IsAttachment = &v
}

// GetIsCancelled returns the IsCancelled field value if set, zero value otherwise.
func (o *PaylinkTokenStatus) GetIsCancelled() bool {
	if o == nil || IsNil(o.IsCancelled) {
		var ret bool
		return ret
	}
	return *o.IsCancelled
}

// GetIsCancelledOk returns a tuple with the IsCancelled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaylinkTokenStatus) GetIsCancelledOk() (*bool, bool) {
	if o == nil || IsNil(o.IsCancelled) {
		return nil, false
	}
	return o.IsCancelled, true
}

// HasIsCancelled returns a boolean if a field has been set.
func (o *PaylinkTokenStatus) HasIsCancelled() bool {
	if o != nil && !IsNil(o.IsCancelled) {
		return true
	}

	return false
}

// SetIsCancelled gets a reference to the given bool and assigns it to the IsCancelled field.
func (o *PaylinkTokenStatus) SetIsCancelled(v bool) {
	o.IsCancelled = &v
}

// GetIsClosed returns the IsClosed field value if set, zero value otherwise.
func (o *PaylinkTokenStatus) GetIsClosed() bool {
	if o == nil || IsNil(o.IsClosed) {
		var ret bool
		return ret
	}
	return *o.IsClosed
}

// GetIsClosedOk returns a tuple with the IsClosed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaylinkTokenStatus) GetIsClosedOk() (*bool, bool) {
	if o == nil || IsNil(o.IsClosed) {
		return nil, false
	}
	return o.IsClosed, true
}

// HasIsClosed returns a boolean if a field has been set.
func (o *PaylinkTokenStatus) HasIsClosed() bool {
	if o != nil && !IsNil(o.IsClosed) {
		return true
	}

	return false
}

// SetIsClosed gets a reference to the given bool and assigns it to the IsClosed field.
func (o *PaylinkTokenStatus) SetIsClosed(v bool) {
	o.IsClosed = &v
}

// GetIsCustomerReceiptEmailSent returns the IsCustomerReceiptEmailSent field value if set, zero value otherwise.
func (o *PaylinkTokenStatus) GetIsCustomerReceiptEmailSent() bool {
	if o == nil || IsNil(o.IsCustomerReceiptEmailSent) {
		var ret bool
		return ret
	}
	return *o.IsCustomerReceiptEmailSent
}

// GetIsCustomerReceiptEmailSentOk returns a tuple with the IsCustomerReceiptEmailSent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaylinkTokenStatus) GetIsCustomerReceiptEmailSentOk() (*bool, bool) {
	if o == nil || IsNil(o.IsCustomerReceiptEmailSent) {
		return nil, false
	}
	return o.IsCustomerReceiptEmailSent, true
}

// HasIsCustomerReceiptEmailSent returns a boolean if a field has been set.
func (o *PaylinkTokenStatus) HasIsCustomerReceiptEmailSent() bool {
	if o != nil && !IsNil(o.IsCustomerReceiptEmailSent) {
		return true
	}

	return false
}

// SetIsCustomerReceiptEmailSent gets a reference to the given bool and assigns it to the IsCustomerReceiptEmailSent field.
func (o *PaylinkTokenStatus) SetIsCustomerReceiptEmailSent(v bool) {
	o.IsCustomerReceiptEmailSent = &v
}

// GetIsEmailSent returns the IsEmailSent field value if set, zero value otherwise.
func (o *PaylinkTokenStatus) GetIsEmailSent() bool {
	if o == nil || IsNil(o.IsEmailSent) {
		var ret bool
		return ret
	}
	return *o.IsEmailSent
}

// GetIsEmailSentOk returns a tuple with the IsEmailSent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaylinkTokenStatus) GetIsEmailSentOk() (*bool, bool) {
	if o == nil || IsNil(o.IsEmailSent) {
		return nil, false
	}
	return o.IsEmailSent, true
}

// HasIsEmailSent returns a boolean if a field has been set.
func (o *PaylinkTokenStatus) HasIsEmailSent() bool {
	if o != nil && !IsNil(o.IsEmailSent) {
		return true
	}

	return false
}

// SetIsEmailSent gets a reference to the given bool and assigns it to the IsEmailSent field.
func (o *PaylinkTokenStatus) SetIsEmailSent(v bool) {
	o.IsEmailSent = &v
}

// GetIsExpired returns the IsExpired field value if set, zero value otherwise.
func (o *PaylinkTokenStatus) GetIsExpired() bool {
	if o == nil || IsNil(o.IsExpired) {
		var ret bool
		return ret
	}
	return *o.IsExpired
}

// GetIsExpiredOk returns a tuple with the IsExpired field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaylinkTokenStatus) GetIsExpiredOk() (*bool, bool) {
	if o == nil || IsNil(o.IsExpired) {
		return nil, false
	}
	return o.IsExpired, true
}

// HasIsExpired returns a boolean if a field has been set.
func (o *PaylinkTokenStatus) HasIsExpired() bool {
	if o != nil && !IsNil(o.IsExpired) {
		return true
	}

	return false
}

// SetIsExpired gets a reference to the given bool and assigns it to the IsExpired field.
func (o *PaylinkTokenStatus) SetIsExpired(v bool) {
	o.IsExpired = &v
}

// GetIsFormViewed returns the IsFormViewed field value if set, zero value otherwise.
func (o *PaylinkTokenStatus) GetIsFormViewed() bool {
	if o == nil || IsNil(o.IsFormViewed) {
		var ret bool
		return ret
	}
	return *o.IsFormViewed
}

// GetIsFormViewedOk returns a tuple with the IsFormViewed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaylinkTokenStatus) GetIsFormViewedOk() (*bool, bool) {
	if o == nil || IsNil(o.IsFormViewed) {
		return nil, false
	}
	return o.IsFormViewed, true
}

// HasIsFormViewed returns a boolean if a field has been set.
func (o *PaylinkTokenStatus) HasIsFormViewed() bool {
	if o != nil && !IsNil(o.IsFormViewed) {
		return true
	}

	return false
}

// SetIsFormViewed gets a reference to the given bool and assigns it to the IsFormViewed field.
func (o *PaylinkTokenStatus) SetIsFormViewed(v bool) {
	o.IsFormViewed = &v
}

// GetIsMerchantNotificationEmailSent returns the IsMerchantNotificationEmailSent field value if set, zero value otherwise.
func (o *PaylinkTokenStatus) GetIsMerchantNotificationEmailSent() bool {
	if o == nil || IsNil(o.IsMerchantNotificationEmailSent) {
		var ret bool
		return ret
	}
	return *o.IsMerchantNotificationEmailSent
}

// GetIsMerchantNotificationEmailSentOk returns a tuple with the IsMerchantNotificationEmailSent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaylinkTokenStatus) GetIsMerchantNotificationEmailSentOk() (*bool, bool) {
	if o == nil || IsNil(o.IsMerchantNotificationEmailSent) {
		return nil, false
	}
	return o.IsMerchantNotificationEmailSent, true
}

// HasIsMerchantNotificationEmailSent returns a boolean if a field has been set.
func (o *PaylinkTokenStatus) HasIsMerchantNotificationEmailSent() bool {
	if o != nil && !IsNil(o.IsMerchantNotificationEmailSent) {
		return true
	}

	return false
}

// SetIsMerchantNotificationEmailSent gets a reference to the given bool and assigns it to the IsMerchantNotificationEmailSent field.
func (o *PaylinkTokenStatus) SetIsMerchantNotificationEmailSent(v bool) {
	o.IsMerchantNotificationEmailSent = &v
}

// GetIsOpenForPayment returns the IsOpenForPayment field value if set, zero value otherwise.
func (o *PaylinkTokenStatus) GetIsOpenForPayment() bool {
	if o == nil || IsNil(o.IsOpenForPayment) {
		var ret bool
		return ret
	}
	return *o.IsOpenForPayment
}

// GetIsOpenForPaymentOk returns a tuple with the IsOpenForPayment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaylinkTokenStatus) GetIsOpenForPaymentOk() (*bool, bool) {
	if o == nil || IsNil(o.IsOpenForPayment) {
		return nil, false
	}
	return o.IsOpenForPayment, true
}

// HasIsOpenForPayment returns a boolean if a field has been set.
func (o *PaylinkTokenStatus) HasIsOpenForPayment() bool {
	if o != nil && !IsNil(o.IsOpenForPayment) {
		return true
	}

	return false
}

// SetIsOpenForPayment gets a reference to the given bool and assigns it to the IsOpenForPayment field.
func (o *PaylinkTokenStatus) SetIsOpenForPayment(v bool) {
	o.IsOpenForPayment = &v
}

// GetIsPaid returns the IsPaid field value if set, zero value otherwise.
func (o *PaylinkTokenStatus) GetIsPaid() bool {
	if o == nil || IsNil(o.IsPaid) {
		var ret bool
		return ret
	}
	return *o.IsPaid
}

// GetIsPaidOk returns a tuple with the IsPaid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaylinkTokenStatus) GetIsPaidOk() (*bool, bool) {
	if o == nil || IsNil(o.IsPaid) {
		return nil, false
	}
	return o.IsPaid, true
}

// HasIsPaid returns a boolean if a field has been set.
func (o *PaylinkTokenStatus) HasIsPaid() bool {
	if o != nil && !IsNil(o.IsPaid) {
		return true
	}

	return false
}

// SetIsPaid gets a reference to the given bool and assigns it to the IsPaid field.
func (o *PaylinkTokenStatus) SetIsPaid(v bool) {
	o.IsPaid = &v
}

// GetIsPaymentAttempted returns the IsPaymentAttempted field value if set, zero value otherwise.
func (o *PaylinkTokenStatus) GetIsPaymentAttempted() bool {
	if o == nil || IsNil(o.IsPaymentAttempted) {
		var ret bool
		return ret
	}
	return *o.IsPaymentAttempted
}

// GetIsPaymentAttemptedOk returns a tuple with the IsPaymentAttempted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaylinkTokenStatus) GetIsPaymentAttemptedOk() (*bool, bool) {
	if o == nil || IsNil(o.IsPaymentAttempted) {
		return nil, false
	}
	return o.IsPaymentAttempted, true
}

// HasIsPaymentAttempted returns a boolean if a field has been set.
func (o *PaylinkTokenStatus) HasIsPaymentAttempted() bool {
	if o != nil && !IsNil(o.IsPaymentAttempted) {
		return true
	}

	return false
}

// SetIsPaymentAttempted gets a reference to the given bool and assigns it to the IsPaymentAttempted field.
func (o *PaylinkTokenStatus) SetIsPaymentAttempted(v bool) {
	o.IsPaymentAttempted = &v
}

// GetIsPostbackOk returns the IsPostbackOk field value if set, zero value otherwise.
func (o *PaylinkTokenStatus) GetIsPostbackOk() bool {
	if o == nil || IsNil(o.IsPostbackOk) {
		var ret bool
		return ret
	}
	return *o.IsPostbackOk
}

// GetIsPostbackOkOk returns a tuple with the IsPostbackOk field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaylinkTokenStatus) GetIsPostbackOkOk() (*bool, bool) {
	if o == nil || IsNil(o.IsPostbackOk) {
		return nil, false
	}
	return o.IsPostbackOk, true
}

// HasIsPostbackOk returns a boolean if a field has been set.
func (o *PaylinkTokenStatus) HasIsPostbackOk() bool {
	if o != nil && !IsNil(o.IsPostbackOk) {
		return true
	}

	return false
}

// SetIsPostbackOk gets a reference to the given bool and assigns it to the IsPostbackOk field.
func (o *PaylinkTokenStatus) SetIsPostbackOk(v bool) {
	o.IsPostbackOk = &v
}

// GetIsRequestChallenged returns the IsRequestChallenged field value if set, zero value otherwise.
func (o *PaylinkTokenStatus) GetIsRequestChallenged() bool {
	if o == nil || IsNil(o.IsRequestChallenged) {
		var ret bool
		return ret
	}
	return *o.IsRequestChallenged
}

// GetIsRequestChallengedOk returns a tuple with the IsRequestChallenged field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaylinkTokenStatus) GetIsRequestChallengedOk() (*bool, bool) {
	if o == nil || IsNil(o.IsRequestChallenged) {
		return nil, false
	}
	return o.IsRequestChallenged, true
}

// HasIsRequestChallenged returns a boolean if a field has been set.
func (o *PaylinkTokenStatus) HasIsRequestChallenged() bool {
	if o != nil && !IsNil(o.IsRequestChallenged) {
		return true
	}

	return false
}

// SetIsRequestChallenged gets a reference to the given bool and assigns it to the IsRequestChallenged field.
func (o *PaylinkTokenStatus) SetIsRequestChallenged(v bool) {
	o.IsRequestChallenged = &v
}

// GetIsSmsSent returns the IsSmsSent field value if set, zero value otherwise.
func (o *PaylinkTokenStatus) GetIsSmsSent() bool {
	if o == nil || IsNil(o.IsSmsSent) {
		var ret bool
		return ret
	}
	return *o.IsSmsSent
}

// GetIsSmsSentOk returns a tuple with the IsSmsSent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaylinkTokenStatus) GetIsSmsSentOk() (*bool, bool) {
	if o == nil || IsNil(o.IsSmsSent) {
		return nil, false
	}
	return o.IsSmsSent, true
}

// HasIsSmsSent returns a boolean if a field has been set.
func (o *PaylinkTokenStatus) HasIsSmsSent() bool {
	if o != nil && !IsNil(o.IsSmsSent) {
		return true
	}

	return false
}

// SetIsSmsSent gets a reference to the given bool and assigns it to the IsSmsSent field.
func (o *PaylinkTokenStatus) SetIsSmsSent(v bool) {
	o.IsSmsSent = &v
}

// GetIsValidated returns the IsValidated field value if set, zero value otherwise.
func (o *PaylinkTokenStatus) GetIsValidated() bool {
	if o == nil || IsNil(o.IsValidated) {
		var ret bool
		return ret
	}
	return *o.IsValidated
}

// GetIsValidatedOk returns a tuple with the IsValidated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaylinkTokenStatus) GetIsValidatedOk() (*bool, bool) {
	if o == nil || IsNil(o.IsValidated) {
		return nil, false
	}
	return o.IsValidated, true
}

// HasIsValidated returns a boolean if a field has been set.
func (o *PaylinkTokenStatus) HasIsValidated() bool {
	if o != nil && !IsNil(o.IsValidated) {
		return true
	}

	return false
}

// SetIsValidated gets a reference to the given bool and assigns it to the IsValidated field.
func (o *PaylinkTokenStatus) SetIsValidated(v bool) {
	o.IsValidated = &v
}

// GetLastEventDateTime returns the LastEventDateTime field value if set, zero value otherwise.
func (o *PaylinkTokenStatus) GetLastEventDateTime() time.Time {
	if o == nil || IsNil(o.LastEventDateTime) {
		var ret time.Time
		return ret
	}
	return *o.LastEventDateTime
}

// GetLastEventDateTimeOk returns a tuple with the LastEventDateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaylinkTokenStatus) GetLastEventDateTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.LastEventDateTime) {
		return nil, false
	}
	return o.LastEventDateTime, true
}

// HasLastEventDateTime returns a boolean if a field has been set.
func (o *PaylinkTokenStatus) HasLastEventDateTime() bool {
	if o != nil && !IsNil(o.LastEventDateTime) {
		return true
	}

	return false
}

// SetLastEventDateTime gets a reference to the given time.Time and assigns it to the LastEventDateTime field.
func (o *PaylinkTokenStatus) SetLastEventDateTime(v time.Time) {
	o.LastEventDateTime = &v
}

// GetLastPaymentResult returns the LastPaymentResult field value if set, zero value otherwise.
func (o *PaylinkTokenStatus) GetLastPaymentResult() string {
	if o == nil || IsNil(o.LastPaymentResult) {
		var ret string
		return ret
	}
	return *o.LastPaymentResult
}

// GetLastPaymentResultOk returns a tuple with the LastPaymentResult field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaylinkTokenStatus) GetLastPaymentResultOk() (*string, bool) {
	if o == nil || IsNil(o.LastPaymentResult) {
		return nil, false
	}
	return o.LastPaymentResult, true
}

// HasLastPaymentResult returns a boolean if a field has been set.
func (o *PaylinkTokenStatus) HasLastPaymentResult() bool {
	if o != nil && !IsNil(o.LastPaymentResult) {
		return true
	}

	return false
}

// SetLastPaymentResult gets a reference to the given string and assigns it to the LastPaymentResult field.
func (o *PaylinkTokenStatus) SetLastPaymentResult(v string) {
	o.LastPaymentResult = &v
}

// GetMid returns the Mid field value if set, zero value otherwise.
func (o *PaylinkTokenStatus) GetMid() int32 {
	if o == nil || IsNil(o.Mid) {
		var ret int32
		return ret
	}
	return *o.Mid
}

// GetMidOk returns a tuple with the Mid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaylinkTokenStatus) GetMidOk() (*int32, bool) {
	if o == nil || IsNil(o.Mid) {
		return nil, false
	}
	return o.Mid, true
}

// HasMid returns a boolean if a field has been set.
func (o *PaylinkTokenStatus) HasMid() bool {
	if o != nil && !IsNil(o.Mid) {
		return true
	}

	return false
}

// SetMid gets a reference to the given int32 and assigns it to the Mid field.
func (o *PaylinkTokenStatus) SetMid(v int32) {
	o.Mid = &v
}

// GetPaymentAttemptsCount returns the PaymentAttemptsCount field value if set, zero value otherwise.
func (o *PaylinkTokenStatus) GetPaymentAttemptsCount() int32 {
	if o == nil || IsNil(o.PaymentAttemptsCount) {
		var ret int32
		return ret
	}
	return *o.PaymentAttemptsCount
}

// GetPaymentAttemptsCountOk returns a tuple with the PaymentAttemptsCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaylinkTokenStatus) GetPaymentAttemptsCountOk() (*int32, bool) {
	if o == nil || IsNil(o.PaymentAttemptsCount) {
		return nil, false
	}
	return o.PaymentAttemptsCount, true
}

// HasPaymentAttemptsCount returns a boolean if a field has been set.
func (o *PaylinkTokenStatus) HasPaymentAttemptsCount() bool {
	if o != nil && !IsNil(o.PaymentAttemptsCount) {
		return true
	}

	return false
}

// SetPaymentAttemptsCount gets a reference to the given int32 and assigns it to the PaymentAttemptsCount field.
func (o *PaylinkTokenStatus) SetPaymentAttemptsCount(v int32) {
	o.PaymentAttemptsCount = &v
}

// GetStateHistory returns the StateHistory field value if set, zero value otherwise.
func (o *PaylinkTokenStatus) GetStateHistory() []PaylinkStateEvent {
	if o == nil || IsNil(o.StateHistory) {
		var ret []PaylinkStateEvent
		return ret
	}
	return o.StateHistory
}

// GetStateHistoryOk returns a tuple with the StateHistory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaylinkTokenStatus) GetStateHistoryOk() ([]PaylinkStateEvent, bool) {
	if o == nil || IsNil(o.StateHistory) {
		return nil, false
	}
	return o.StateHistory, true
}

// HasStateHistory returns a boolean if a field has been set.
func (o *PaylinkTokenStatus) HasStateHistory() bool {
	if o != nil && !IsNil(o.StateHistory) {
		return true
	}

	return false
}

// SetStateHistory gets a reference to the given []PaylinkStateEvent and assigns it to the StateHistory field.
func (o *PaylinkTokenStatus) SetStateHistory(v []PaylinkStateEvent) {
	o.StateHistory = v
}

// GetToken returns the Token field value if set, zero value otherwise.
func (o *PaylinkTokenStatus) GetToken() string {
	if o == nil || IsNil(o.Token) {
		var ret string
		return ret
	}
	return *o.Token
}

// GetTokenOk returns a tuple with the Token field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaylinkTokenStatus) GetTokenOk() (*string, bool) {
	if o == nil || IsNil(o.Token) {
		return nil, false
	}
	return o.Token, true
}

// HasToken returns a boolean if a field has been set.
func (o *PaylinkTokenStatus) HasToken() bool {
	if o != nil && !IsNil(o.Token) {
		return true
	}

	return false
}

// SetToken gets a reference to the given string and assigns it to the Token field.
func (o *PaylinkTokenStatus) SetToken(v string) {
	o.Token = &v
}

// GetTransNo returns the TransNo field value if set, zero value otherwise.
func (o *PaylinkTokenStatus) GetTransNo() int32 {
	if o == nil || IsNil(o.TransNo) {
		var ret int32
		return ret
	}
	return *o.TransNo
}

// GetTransNoOk returns a tuple with the TransNo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaylinkTokenStatus) GetTransNoOk() (*int32, bool) {
	if o == nil || IsNil(o.TransNo) {
		return nil, false
	}
	return o.TransNo, true
}

// HasTransNo returns a boolean if a field has been set.
func (o *PaylinkTokenStatus) HasTransNo() bool {
	if o != nil && !IsNil(o.TransNo) {
		return true
	}

	return false
}

// SetTransNo gets a reference to the given int32 and assigns it to the TransNo field.
func (o *PaylinkTokenStatus) SetTransNo(v int32) {
	o.TransNo = &v
}

func (o PaylinkTokenStatus) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PaylinkTokenStatus) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AmountPaid) {
		toSerialize["amount_paid"] = o.AmountPaid
	}
	if !IsNil(o.AuthCode) {
		toSerialize["auth_code"] = o.AuthCode
	}
	if !IsNil(o.Card) {
		toSerialize["card"] = o.Card
	}
	if !IsNil(o.Created) {
		toSerialize["created"] = o.Created
	}
	if !IsNil(o.Datetime) {
		toSerialize["datetime"] = o.Datetime
	}
	if !IsNil(o.Identifier) {
		toSerialize["identifier"] = o.Identifier
	}
	if !IsNil(o.IsAttachment) {
		toSerialize["is_attachment"] = o.IsAttachment
	}
	if !IsNil(o.IsCancelled) {
		toSerialize["is_cancelled"] = o.IsCancelled
	}
	if !IsNil(o.IsClosed) {
		toSerialize["is_closed"] = o.IsClosed
	}
	if !IsNil(o.IsCustomerReceiptEmailSent) {
		toSerialize["is_customer_receipt_email_sent"] = o.IsCustomerReceiptEmailSent
	}
	if !IsNil(o.IsEmailSent) {
		toSerialize["is_email_sent"] = o.IsEmailSent
	}
	if !IsNil(o.IsExpired) {
		toSerialize["is_expired"] = o.IsExpired
	}
	if !IsNil(o.IsFormViewed) {
		toSerialize["is_form_viewed"] = o.IsFormViewed
	}
	if !IsNil(o.IsMerchantNotificationEmailSent) {
		toSerialize["is_merchant_notification_email_sent"] = o.IsMerchantNotificationEmailSent
	}
	if !IsNil(o.IsOpenForPayment) {
		toSerialize["is_open_for_payment"] = o.IsOpenForPayment
	}
	if !IsNil(o.IsPaid) {
		toSerialize["is_paid"] = o.IsPaid
	}
	if !IsNil(o.IsPaymentAttempted) {
		toSerialize["is_payment_attempted"] = o.IsPaymentAttempted
	}
	if !IsNil(o.IsPostbackOk) {
		toSerialize["is_postback_ok"] = o.IsPostbackOk
	}
	if !IsNil(o.IsRequestChallenged) {
		toSerialize["is_request_challenged"] = o.IsRequestChallenged
	}
	if !IsNil(o.IsSmsSent) {
		toSerialize["is_sms_sent"] = o.IsSmsSent
	}
	if !IsNil(o.IsValidated) {
		toSerialize["is_validated"] = o.IsValidated
	}
	if !IsNil(o.LastEventDateTime) {
		toSerialize["last_event_date_time"] = o.LastEventDateTime
	}
	if !IsNil(o.LastPaymentResult) {
		toSerialize["last_payment_result"] = o.LastPaymentResult
	}
	if !IsNil(o.Mid) {
		toSerialize["mid"] = o.Mid
	}
	if !IsNil(o.PaymentAttemptsCount) {
		toSerialize["payment_attempts_count"] = o.PaymentAttemptsCount
	}
	if !IsNil(o.StateHistory) {
		toSerialize["state_history"] = o.StateHistory
	}
	if !IsNil(o.Token) {
		toSerialize["token"] = o.Token
	}
	if !IsNil(o.TransNo) {
		toSerialize["trans_no"] = o.TransNo
	}
	return toSerialize, nil
}

type NullablePaylinkTokenStatus struct {
	value *PaylinkTokenStatus
	isSet bool
}

func (v NullablePaylinkTokenStatus) Get() *PaylinkTokenStatus {
	return v.value
}

func (v *NullablePaylinkTokenStatus) Set(val *PaylinkTokenStatus) {
	v.value = val
	v.isSet = true
}

func (v NullablePaylinkTokenStatus) IsSet() bool {
	return v.isSet
}

func (v *NullablePaylinkTokenStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePaylinkTokenStatus(val *PaylinkTokenStatus) *NullablePaylinkTokenStatus {
	return &NullablePaylinkTokenStatus{value: val, isSet: true}
}

func (v NullablePaylinkTokenStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePaylinkTokenStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
