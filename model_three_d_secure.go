/*
CityPay Payment API

 Welcome to the CityPay API, a robust HTTP API payment solution designed for seamless server-to-server  transactional processing. Our API facilitates a wide array of payment operations, catering to diverse business needs.  Whether you're integrating Internet payments, handling Mail Order/Telephone Order (MOTO) transactions, managing  Subscriptions with Recurring and Continuous Authority payments, or navigating the complexities of 3-D Secure  authentication, our API is equipped to support your requirements. Additionally, we offer functionalities for  Authorisation, Refunding, Pre-Authorisation, Cancellation/Voids, and Completion processing, alongside the capability  for tokenised payments.  ## Compliance and Security Overview <aside class=\"notice\">   Ensuring the security of payment transactions and compliance with industry standards is paramount. Our API is    designed with stringent security measures and compliance protocols to safeguard sensitive information and meet    the rigorous requirements of Visa, MasterCard, and the PCI Security Standards Council. </aside>  ### Key Compliance and Security Measures  * **TLS Encryption**: All data transmissions must utilise TLS version 1.2 or higher, employing [strong cryptography](#enabled-tls-ciphers). Our infrastructure strictly enforces this requirement to maintain the integrity and confidentiality of data in transit. We conduct regular scans and assessments of our TLS endpoints to identify and mitigate vulnerabilities. * **Data Storage Prohibitions**: Storing sensitive cardholder data (CHD), such as the card security code (CSC) or primary account number (PAN), is strictly prohibited. Our API is designed to minimize your exposure to sensitive data, thereby reducing your compliance burden. * **Data Masking**: For consumer protection and compliance, full card numbers must not be displayed on receipts or any customer-facing materials. Our API automatically masks PANs, displaying only the last four digits to facilitate safe receipt generation. * **Network Scans**: If your application is web-based, regular scans of your hosting environment are mandatory to identify and rectify potential vulnerabilities. This proactive measure is crucial for maintaining a secure and compliant online presence. * **PCI Compliance**: Adherence to PCI DSS standards is not optional; it's a requirement for operating securely and legally in the payments ecosystem. For detailed information on compliance requirements and resources, please visit the PCI Security Standards Council website [https://www.pcisecuritystandards.org/](https://www.pcisecuritystandards.org/). * **Request Validation**: Our API includes mechanisms to verify the legitimacy of each request, ensuring it pertains to a valid account and originates from a trusted source. We leverage remote IP address verification alongside sophisticated application firewall technologies to thwart a wide array of common security threats.  ## Getting Started Before integrating with the CityPay API, ensure your application and development practices align with the outlined compliance and security measures. This preparatory step is crucial for a smooth integration process and the long-term success of your payment processing operations.  For further details on API endpoints, request/response formats, and code examples, proceed to the subsequent sections of our documentation. Our aim is to provide you with all the necessary tools and information to integrate our payment processing capabilities seamlessly into your application.  Thank you for choosing CityPay API. We look forward to supporting your payment processing needs with our secure, compliant, and versatile API solution.

API version: 6.6.40
Contact: support@citypay.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citypay

import (
	"encoding/json"
)

// checks if the ThreeDSecure type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ThreeDSecure{}

// ThreeDSecure struct for ThreeDSecure
type ThreeDSecure struct {
	// Required for 3DSv1. Optional if the `cp_bx` value is provided otherwise required for 3Dv2 processing operating in browser authentication mode.  The `cp_bx` value will override any value supplied to this field.  The content of the HTTP accept header as sent to the merchant from the cardholder's user agent.  This value will be validated by the ACS when the card holder authenticates themselves to verify that no intermediary is performing this action. Required for 3DSv1.
	AcceptHeaders *string `json:"accept_headers,omitempty"`
	// BrowserColorDepth field used for 3DSv2 browser enablement. Recommendation is to use citypay.js and the `bx` function to gather this value.
	BrowserColorDepth *string `json:"browserColorDepth,omitempty"`
	// BrowserIP field used for 3DSv2 browser enablement. Recommendation is to use citypay.js and the `bx` function to gather this value.
	BrowserIP *string `json:"browserIP,omitempty"`
	// BrowserJavaEnabled field used for 3DSv2 browser enablement. Recommendation is to use citypay.js and the `bx` function to gather this value.
	BrowserJavaEnabled *string `json:"browserJavaEnabled,omitempty"`
	// BrowserLanguage field used for 3DSv2 browser enablement. Recommendation is to use citypay.js and the `bx` function to gather this value.
	BrowserLanguage *string `json:"browserLanguage,omitempty"`
	// BrowserScreenHeight field used for 3DSv2 browser enablement. Recommendation is to use citypay.js and the `bx` function to gather this value.
	BrowserScreenHeight *string `json:"browserScreenHeight,omitempty"`
	// BrowserScreenWidth field used for 3DSv2 browser enablement. Recommendation is to use citypay.js and the `bx` function to gather this value.
	BrowserScreenWidth *string `json:"browserScreenWidth,omitempty"`
	// BrowserTZ offset field used for 3DSv2 browser enablement. Recommendation is to use citypay.js and the `bx` function to gather this value.
	BrowserTZ *string `json:"browserTZ,omitempty"`
	// Required for 3DSv2.  Browser extension value produced by the citypay.js `bx` function. See [https://sandbox.citypay.com/3dsv2/bx](https://sandbox.citypay.com/3dsv2/bx) for  details.
	CpBx *string `json:"cp_bx,omitempty"`
	// Where a merchant is configured for 3DSv2, setting this option will attempt to downgrade the transaction to  3DSv1.
	Downgrade1 *bool `json:"downgrade1,omitempty"`
	// A controller URL for 3D-Secure processing that any response from an authentication request or challenge request should be sent to.  The controller should forward on the response from the URL back via this API for subsequent processing.
	MerchantTermurl *string `json:"merchant_termurl,omitempty"`
	// A policy value which determines whether ThreeDSecure is enforced or bypassed. Note that this will only work for e-commerce transactions and accounts that have 3DSecure enabled and fully registered with Visa, MasterCard or American Express. It is useful when transactions may be wanted to bypass processing rules.  Note that this may affect the liability shift of transactions and may occur a higher fee with the acquiring bank.  Values are   `0` for the default policy (default value if not supplied). Your default values are determined by your account manager on setup of the account.   `1` for an enforced policy. Transactions will be enabled for 3DS processing   `2` to bypass. Transactions that are bypassed will switch off 3DS processing.
	TdsPolicy *string `json:"tds_policy,omitempty"`
	// Required for 3DSv1.  Optional if the `cp_bx` value is provided otherwise required 3Dv2 processing operating in browser authentication mode.  The `cp_bx` value will override any value supplied to this field.  The content of the HTTP user-agent header as sent to the merchant from the cardholder's user agent.  This value will be validated by the ACS when the card holder authenticates themselves to verify that no intermediary is performing this action. Required for 3DSv1.
	UserAgent *string `json:"user_agent,omitempty"`
}

// NewThreeDSecure instantiates a new ThreeDSecure object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewThreeDSecure() *ThreeDSecure {
	this := ThreeDSecure{}
	return &this
}

// NewThreeDSecureWithDefaults instantiates a new ThreeDSecure object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewThreeDSecureWithDefaults() *ThreeDSecure {
	this := ThreeDSecure{}
	return &this
}

// GetAcceptHeaders returns the AcceptHeaders field value if set, zero value otherwise.
func (o *ThreeDSecure) GetAcceptHeaders() string {
	if o == nil || IsNil(o.AcceptHeaders) {
		var ret string
		return ret
	}
	return *o.AcceptHeaders
}

// GetAcceptHeadersOk returns a tuple with the AcceptHeaders field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ThreeDSecure) GetAcceptHeadersOk() (*string, bool) {
	if o == nil || IsNil(o.AcceptHeaders) {
		return nil, false
	}
	return o.AcceptHeaders, true
}

// HasAcceptHeaders returns a boolean if a field has been set.
func (o *ThreeDSecure) HasAcceptHeaders() bool {
	if o != nil && !IsNil(o.AcceptHeaders) {
		return true
	}

	return false
}

// SetAcceptHeaders gets a reference to the given string and assigns it to the AcceptHeaders field.
func (o *ThreeDSecure) SetAcceptHeaders(v string) {
	o.AcceptHeaders = &v
}

// GetBrowserColorDepth returns the BrowserColorDepth field value if set, zero value otherwise.
func (o *ThreeDSecure) GetBrowserColorDepth() string {
	if o == nil || IsNil(o.BrowserColorDepth) {
		var ret string
		return ret
	}
	return *o.BrowserColorDepth
}

// GetBrowserColorDepthOk returns a tuple with the BrowserColorDepth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ThreeDSecure) GetBrowserColorDepthOk() (*string, bool) {
	if o == nil || IsNil(o.BrowserColorDepth) {
		return nil, false
	}
	return o.BrowserColorDepth, true
}

// HasBrowserColorDepth returns a boolean if a field has been set.
func (o *ThreeDSecure) HasBrowserColorDepth() bool {
	if o != nil && !IsNil(o.BrowserColorDepth) {
		return true
	}

	return false
}

// SetBrowserColorDepth gets a reference to the given string and assigns it to the BrowserColorDepth field.
func (o *ThreeDSecure) SetBrowserColorDepth(v string) {
	o.BrowserColorDepth = &v
}

// GetBrowserIP returns the BrowserIP field value if set, zero value otherwise.
func (o *ThreeDSecure) GetBrowserIP() string {
	if o == nil || IsNil(o.BrowserIP) {
		var ret string
		return ret
	}
	return *o.BrowserIP
}

// GetBrowserIPOk returns a tuple with the BrowserIP field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ThreeDSecure) GetBrowserIPOk() (*string, bool) {
	if o == nil || IsNil(o.BrowserIP) {
		return nil, false
	}
	return o.BrowserIP, true
}

// HasBrowserIP returns a boolean if a field has been set.
func (o *ThreeDSecure) HasBrowserIP() bool {
	if o != nil && !IsNil(o.BrowserIP) {
		return true
	}

	return false
}

// SetBrowserIP gets a reference to the given string and assigns it to the BrowserIP field.
func (o *ThreeDSecure) SetBrowserIP(v string) {
	o.BrowserIP = &v
}

// GetBrowserJavaEnabled returns the BrowserJavaEnabled field value if set, zero value otherwise.
func (o *ThreeDSecure) GetBrowserJavaEnabled() string {
	if o == nil || IsNil(o.BrowserJavaEnabled) {
		var ret string
		return ret
	}
	return *o.BrowserJavaEnabled
}

// GetBrowserJavaEnabledOk returns a tuple with the BrowserJavaEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ThreeDSecure) GetBrowserJavaEnabledOk() (*string, bool) {
	if o == nil || IsNil(o.BrowserJavaEnabled) {
		return nil, false
	}
	return o.BrowserJavaEnabled, true
}

// HasBrowserJavaEnabled returns a boolean if a field has been set.
func (o *ThreeDSecure) HasBrowserJavaEnabled() bool {
	if o != nil && !IsNil(o.BrowserJavaEnabled) {
		return true
	}

	return false
}

// SetBrowserJavaEnabled gets a reference to the given string and assigns it to the BrowserJavaEnabled field.
func (o *ThreeDSecure) SetBrowserJavaEnabled(v string) {
	o.BrowserJavaEnabled = &v
}

// GetBrowserLanguage returns the BrowserLanguage field value if set, zero value otherwise.
func (o *ThreeDSecure) GetBrowserLanguage() string {
	if o == nil || IsNil(o.BrowserLanguage) {
		var ret string
		return ret
	}
	return *o.BrowserLanguage
}

// GetBrowserLanguageOk returns a tuple with the BrowserLanguage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ThreeDSecure) GetBrowserLanguageOk() (*string, bool) {
	if o == nil || IsNil(o.BrowserLanguage) {
		return nil, false
	}
	return o.BrowserLanguage, true
}

// HasBrowserLanguage returns a boolean if a field has been set.
func (o *ThreeDSecure) HasBrowserLanguage() bool {
	if o != nil && !IsNil(o.BrowserLanguage) {
		return true
	}

	return false
}

// SetBrowserLanguage gets a reference to the given string and assigns it to the BrowserLanguage field.
func (o *ThreeDSecure) SetBrowserLanguage(v string) {
	o.BrowserLanguage = &v
}

// GetBrowserScreenHeight returns the BrowserScreenHeight field value if set, zero value otherwise.
func (o *ThreeDSecure) GetBrowserScreenHeight() string {
	if o == nil || IsNil(o.BrowserScreenHeight) {
		var ret string
		return ret
	}
	return *o.BrowserScreenHeight
}

// GetBrowserScreenHeightOk returns a tuple with the BrowserScreenHeight field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ThreeDSecure) GetBrowserScreenHeightOk() (*string, bool) {
	if o == nil || IsNil(o.BrowserScreenHeight) {
		return nil, false
	}
	return o.BrowserScreenHeight, true
}

// HasBrowserScreenHeight returns a boolean if a field has been set.
func (o *ThreeDSecure) HasBrowserScreenHeight() bool {
	if o != nil && !IsNil(o.BrowserScreenHeight) {
		return true
	}

	return false
}

// SetBrowserScreenHeight gets a reference to the given string and assigns it to the BrowserScreenHeight field.
func (o *ThreeDSecure) SetBrowserScreenHeight(v string) {
	o.BrowserScreenHeight = &v
}

// GetBrowserScreenWidth returns the BrowserScreenWidth field value if set, zero value otherwise.
func (o *ThreeDSecure) GetBrowserScreenWidth() string {
	if o == nil || IsNil(o.BrowserScreenWidth) {
		var ret string
		return ret
	}
	return *o.BrowserScreenWidth
}

// GetBrowserScreenWidthOk returns a tuple with the BrowserScreenWidth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ThreeDSecure) GetBrowserScreenWidthOk() (*string, bool) {
	if o == nil || IsNil(o.BrowserScreenWidth) {
		return nil, false
	}
	return o.BrowserScreenWidth, true
}

// HasBrowserScreenWidth returns a boolean if a field has been set.
func (o *ThreeDSecure) HasBrowserScreenWidth() bool {
	if o != nil && !IsNil(o.BrowserScreenWidth) {
		return true
	}

	return false
}

// SetBrowserScreenWidth gets a reference to the given string and assigns it to the BrowserScreenWidth field.
func (o *ThreeDSecure) SetBrowserScreenWidth(v string) {
	o.BrowserScreenWidth = &v
}

// GetBrowserTZ returns the BrowserTZ field value if set, zero value otherwise.
func (o *ThreeDSecure) GetBrowserTZ() string {
	if o == nil || IsNil(o.BrowserTZ) {
		var ret string
		return ret
	}
	return *o.BrowserTZ
}

// GetBrowserTZOk returns a tuple with the BrowserTZ field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ThreeDSecure) GetBrowserTZOk() (*string, bool) {
	if o == nil || IsNil(o.BrowserTZ) {
		return nil, false
	}
	return o.BrowserTZ, true
}

// HasBrowserTZ returns a boolean if a field has been set.
func (o *ThreeDSecure) HasBrowserTZ() bool {
	if o != nil && !IsNil(o.BrowserTZ) {
		return true
	}

	return false
}

// SetBrowserTZ gets a reference to the given string and assigns it to the BrowserTZ field.
func (o *ThreeDSecure) SetBrowserTZ(v string) {
	o.BrowserTZ = &v
}

// GetCpBx returns the CpBx field value if set, zero value otherwise.
func (o *ThreeDSecure) GetCpBx() string {
	if o == nil || IsNil(o.CpBx) {
		var ret string
		return ret
	}
	return *o.CpBx
}

// GetCpBxOk returns a tuple with the CpBx field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ThreeDSecure) GetCpBxOk() (*string, bool) {
	if o == nil || IsNil(o.CpBx) {
		return nil, false
	}
	return o.CpBx, true
}

// HasCpBx returns a boolean if a field has been set.
func (o *ThreeDSecure) HasCpBx() bool {
	if o != nil && !IsNil(o.CpBx) {
		return true
	}

	return false
}

// SetCpBx gets a reference to the given string and assigns it to the CpBx field.
func (o *ThreeDSecure) SetCpBx(v string) {
	o.CpBx = &v
}

// GetDowngrade1 returns the Downgrade1 field value if set, zero value otherwise.
func (o *ThreeDSecure) GetDowngrade1() bool {
	if o == nil || IsNil(o.Downgrade1) {
		var ret bool
		return ret
	}
	return *o.Downgrade1
}

// GetDowngrade1Ok returns a tuple with the Downgrade1 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ThreeDSecure) GetDowngrade1Ok() (*bool, bool) {
	if o == nil || IsNil(o.Downgrade1) {
		return nil, false
	}
	return o.Downgrade1, true
}

// HasDowngrade1 returns a boolean if a field has been set.
func (o *ThreeDSecure) HasDowngrade1() bool {
	if o != nil && !IsNil(o.Downgrade1) {
		return true
	}

	return false
}

// SetDowngrade1 gets a reference to the given bool and assigns it to the Downgrade1 field.
func (o *ThreeDSecure) SetDowngrade1(v bool) {
	o.Downgrade1 = &v
}

// GetMerchantTermurl returns the MerchantTermurl field value if set, zero value otherwise.
func (o *ThreeDSecure) GetMerchantTermurl() string {
	if o == nil || IsNil(o.MerchantTermurl) {
		var ret string
		return ret
	}
	return *o.MerchantTermurl
}

// GetMerchantTermurlOk returns a tuple with the MerchantTermurl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ThreeDSecure) GetMerchantTermurlOk() (*string, bool) {
	if o == nil || IsNil(o.MerchantTermurl) {
		return nil, false
	}
	return o.MerchantTermurl, true
}

// HasMerchantTermurl returns a boolean if a field has been set.
func (o *ThreeDSecure) HasMerchantTermurl() bool {
	if o != nil && !IsNil(o.MerchantTermurl) {
		return true
	}

	return false
}

// SetMerchantTermurl gets a reference to the given string and assigns it to the MerchantTermurl field.
func (o *ThreeDSecure) SetMerchantTermurl(v string) {
	o.MerchantTermurl = &v
}

// GetTdsPolicy returns the TdsPolicy field value if set, zero value otherwise.
func (o *ThreeDSecure) GetTdsPolicy() string {
	if o == nil || IsNil(o.TdsPolicy) {
		var ret string
		return ret
	}
	return *o.TdsPolicy
}

// GetTdsPolicyOk returns a tuple with the TdsPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ThreeDSecure) GetTdsPolicyOk() (*string, bool) {
	if o == nil || IsNil(o.TdsPolicy) {
		return nil, false
	}
	return o.TdsPolicy, true
}

// HasTdsPolicy returns a boolean if a field has been set.
func (o *ThreeDSecure) HasTdsPolicy() bool {
	if o != nil && !IsNil(o.TdsPolicy) {
		return true
	}

	return false
}

// SetTdsPolicy gets a reference to the given string and assigns it to the TdsPolicy field.
func (o *ThreeDSecure) SetTdsPolicy(v string) {
	o.TdsPolicy = &v
}

// GetUserAgent returns the UserAgent field value if set, zero value otherwise.
func (o *ThreeDSecure) GetUserAgent() string {
	if o == nil || IsNil(o.UserAgent) {
		var ret string
		return ret
	}
	return *o.UserAgent
}

// GetUserAgentOk returns a tuple with the UserAgent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ThreeDSecure) GetUserAgentOk() (*string, bool) {
	if o == nil || IsNil(o.UserAgent) {
		return nil, false
	}
	return o.UserAgent, true
}

// HasUserAgent returns a boolean if a field has been set.
func (o *ThreeDSecure) HasUserAgent() bool {
	if o != nil && !IsNil(o.UserAgent) {
		return true
	}

	return false
}

// SetUserAgent gets a reference to the given string and assigns it to the UserAgent field.
func (o *ThreeDSecure) SetUserAgent(v string) {
	o.UserAgent = &v
}

func (o ThreeDSecure) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ThreeDSecure) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AcceptHeaders) {
		toSerialize["accept_headers"] = o.AcceptHeaders
	}
	if !IsNil(o.BrowserColorDepth) {
		toSerialize["browserColorDepth"] = o.BrowserColorDepth
	}
	if !IsNil(o.BrowserIP) {
		toSerialize["browserIP"] = o.BrowserIP
	}
	if !IsNil(o.BrowserJavaEnabled) {
		toSerialize["browserJavaEnabled"] = o.BrowserJavaEnabled
	}
	if !IsNil(o.BrowserLanguage) {
		toSerialize["browserLanguage"] = o.BrowserLanguage
	}
	if !IsNil(o.BrowserScreenHeight) {
		toSerialize["browserScreenHeight"] = o.BrowserScreenHeight
	}
	if !IsNil(o.BrowserScreenWidth) {
		toSerialize["browserScreenWidth"] = o.BrowserScreenWidth
	}
	if !IsNil(o.BrowserTZ) {
		toSerialize["browserTZ"] = o.BrowserTZ
	}
	if !IsNil(o.CpBx) {
		toSerialize["cp_bx"] = o.CpBx
	}
	if !IsNil(o.Downgrade1) {
		toSerialize["downgrade1"] = o.Downgrade1
	}
	if !IsNil(o.MerchantTermurl) {
		toSerialize["merchant_termurl"] = o.MerchantTermurl
	}
	if !IsNil(o.TdsPolicy) {
		toSerialize["tds_policy"] = o.TdsPolicy
	}
	if !IsNil(o.UserAgent) {
		toSerialize["user_agent"] = o.UserAgent
	}
	return toSerialize, nil
}

type NullableThreeDSecure struct {
	value *ThreeDSecure
	isSet bool
}

func (v NullableThreeDSecure) Get() *ThreeDSecure {
	return v.value
}

func (v *NullableThreeDSecure) Set(val *ThreeDSecure) {
	v.value = val
	v.isSet = true
}

func (v NullableThreeDSecure) IsSet() bool {
	return v.isSet
}

func (v *NullableThreeDSecure) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableThreeDSecure(val *ThreeDSecure) *NullableThreeDSecure {
	return &NullableThreeDSecure{value: val, isSet: true}
}

func (v NullableThreeDSecure) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableThreeDSecure) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
