/*
CityPay Payment API

 Welcome to the CityPay API, a robust HTTP API payment solution designed for seamless server-to-server  transactional processing. Our API facilitates a wide array of payment operations, catering to diverse business needs.  Whether you're integrating Internet payments, handling Mail Order/Telephone Order (MOTO) transactions, managing  Subscriptions with Recurring and Continuous Authority payments, or navigating the complexities of 3-D Secure  authentication, our API is equipped to support your requirements. Additionally, we offer functionalities for  Authorisation, Refunding, Pre-Authorisation, Cancellation/Voids, and Completion processing, alongside the capability  for tokenised payments.  ## Compliance and Security Overview <aside class=\"notice\">   Ensuring the security of payment transactions and compliance with industry standards is paramount. Our API is    designed with stringent security measures and compliance protocols to safeguard sensitive information and meet    the rigorous requirements of Visa, MasterCard, and the PCI Security Standards Council. </aside>  ### Key Compliance and Security Measures  * **TLS Encryption**: All data transmissions must utilise TLS version 1.2 or higher, employing [strong cryptography](#enabled-tls-ciphers). Our infrastructure strictly enforces this requirement to maintain the integrity and confidentiality of data in transit. We conduct regular scans and assessments of our TLS endpoints to identify and mitigate vulnerabilities. * **Data Storage Prohibitions**: Storing sensitive cardholder data (CHD), such as the card security code (CSC) or primary account number (PAN), is strictly prohibited. Our API is designed to minimize your exposure to sensitive data, thereby reducing your compliance burden. * **Data Masking**: For consumer protection and compliance, full card numbers must not be displayed on receipts or any customer-facing materials. Our API automatically masks PANs, displaying only the last four digits to facilitate safe receipt generation. * **Network Scans**: If your application is web-based, regular scans of your hosting environment are mandatory to identify and rectify potential vulnerabilities. This proactive measure is crucial for maintaining a secure and compliant online presence. * **PCI Compliance**: Adherence to PCI DSS standards is not optional; it's a requirement for operating securely and legally in the payments ecosystem. For detailed information on compliance requirements and resources, please visit the PCI Security Standards Council website [https://www.pcisecuritystandards.org/](https://www.pcisecuritystandards.org/). * **Request Validation**: Our API includes mechanisms to verify the legitimacy of each request, ensuring it pertains to a valid account and originates from a trusted source. We leverage remote IP address verification alongside sophisticated application firewall technologies to thwart a wide array of common security threats.  ## Getting Started Before integrating with the CityPay API, ensure your application and development practices align with the outlined compliance and security measures. This preparatory step is crucial for a smooth integration process and the long-term success of your payment processing operations.  For further details on API endpoints, request/response formats, and code examples, proceed to the subsequent sections of our documentation. Our aim is to provide you with all the necessary tools and information to integrate our payment processing capabilities seamlessly into your application.  Thank you for choosing CityPay API. We look forward to supporting your payment processing needs with our secure, compliant, and versatile API solution.

API version: 6.6.40
Contact: support@citypay.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citypay

import (
	"bytes"
	"encoding/json"
	"fmt"
	"time"
)

// checks if the AuthResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AuthResponse{}

// AuthResponse struct for AuthResponse
type AuthResponse struct {
	// The amount of the transaction processed.
	Amount *int32 `json:"amount,omitempty"`
	// A reference number provided by the acquirer for a transaction it can be used to cross reference transactions with an Acquirers reporting panel.
	Atrn *string `json:"atrn,omitempty"`
	// Additional Transaction Security Data used for ecommerce transactions to decipher security capabilities and attempts against a transaction.
	Atsd *string `json:"atsd,omitempty"`
	// The authorisation code as returned by the card issuer or acquiring bank when a transaction has successfully   been authorised. Authorisation codes contain alphanumeric values. Whilst the code confirms authorisation it   should not be used to determine whether a transaction was successfully processed. For instance an auth code   may be returned when a transaction has been subsequently declined due to a CSC mismatch.
	Authcode *string `json:"authcode,omitempty"`
	// The result of any authentication using 3d_secure authorisation against ecommerce transactions. Values are:  <table> <tr> <th>Value</th> <th>Description</th> </tr> <tr> <td>Y</td> <td>Authentication Successful. The Cardholder's password was successfully validated.</td> </tr> <tr> <td>N</td> <td>Authentication Failed. Customer failed or cancelled authentication, transaction denied.</td> </tr> <tr> <td>A</td> <td>Attempts Processing Performed Authentication could not be completed but a proof of authentication attempt (CAVV) was generated.</td> </tr> <tr> <td>U</td> <td>Authentication Could Not Be Performed Authentication could not be completed, due to technical or other problem.</td> </tr> </table>
	AuthenResult *string `json:"authen_result,omitempty"`
	// A boolean definition that indicates that the transaction was authorised. It will return false if the transaction  was declined, rejected or cancelled due to CSC matching failures.  Attention should be referenced to the AuthResult and Response code for accurate determination of the result.
	Authorised *bool `json:"authorised,omitempty"`
	// The AVS result codes determine the result of checking the AVS values within the Address Verification fraud system. If a transaction is declined due to the AVS code not matching, this value can help determine the reason for the decline.  <table> <tr> <th>Code</th> <th>Description</th> </tr> <tr><td>Y</td><td>Address and 5 digit post code match</td></tr> <tr><td>M</td><td>Street address and Postal codes match for international transaction</td></tr> <tr><td>U</td><td>No AVS data available from issuer auth system</td></tr> <tr><td>A</td><td>Addres matches, post code does not</td></tr> <tr><td>I</td><td>Address information verified for international transaction</td></tr> <tr><td>Z</td><td>5 digit post code matches, Address does not</td></tr> <tr><td>W</td><td>9 digit post code matches, Address does not</td></tr> <tr><td>X</td><td>Postcode and address match</td></tr> <tr><td>B</td><td>Postal code not verified due to incompatible formats</td></tr> <tr><td>P</td><td>Postal codes match. Street address not verified due to to incompatible formats</td></tr> <tr><td>E</td><td>AVS Error</td></tr> <tr><td>C</td><td>Street address and Postal code not verified due to incompatible formats</td></tr> <tr><td>D</td><td>Street address and postal codes match</td></tr> <tr><td> </td><td>No information</td></tr> <tr><td>N</td><td>Neither postcode nor address match</td></tr> <tr><td>R</td><td>Retry, System unavailble or Timed Out</td></tr> <tr><td>S</td><td>AVS Service not supported by issuer or processor</td></tr> <tr><td>G</td><td>Issuer does not participate in AVS</td></tr> </table>
	AvsResult *string `json:"avs_result,omitempty"`
	// Determines whether the bin range was found to be a commercial or business card.
	BinCommercial *bool `json:"bin_commercial,omitempty"`
	// Determines whether the bin range was found to be a debit card. If false the card was considered as a credit card.
	BinDebit *bool `json:"bin_debit,omitempty"`
	// A description of the bin range found for the card.
	BinDescription *string `json:"bin_description,omitempty"`
	// The cardholder authentication verification value which can be returned for verification purposes of the authenticated  transaction for dispute realisation.
	Cavv *string `json:"cavv,omitempty"`
	// The context which processed the transaction, can be used for support purposes to trace transactions.
	Context *string `json:"context,omitempty"`
	// The CSC result codes determine the result of checking the provided CSC value within the Card Security Code fraud system. If a transaction is declined due to the CSC code not matching, this value can help determine the reason for the decline.  <table> <tr> <th>Code</th> <th>Description</th> </tr> <tr><td> </td><td>No information</td></tr> <tr><td>M</td><td>Card verification data matches</td></tr> <tr><td>N</td><td>Card verification data was checked but did not match</td></tr> <tr><td>P</td><td>Card verification was not processed</td></tr> <tr><td>S</td><td>The card verification data should be on the card but the merchant indicates that it is not</td></tr> <tr><td>U</td><td>The card issuer is not certified</td></tr> </table>
	CscResult *string `json:"csc_result,omitempty"`
	// The currency the transaction was processed in. This is an `ISO4217` alpha currency value.
	Currency *string `json:"currency,omitempty"`
	// The UTC date time of the transaction in ISO data time format.
	Datetime *time.Time `json:"datetime,omitempty"`
	// An Electronic Commerce Indicator (ECI) used to identify the result of authentication using 3DSecure.
	Eci *string `json:"eci,omitempty"`
	// The identifier provided within the request.
	Identifier *string `json:"identifier,omitempty"`
	// Used to identify that a transaction was processed on a live authorisation platform.
	Live *bool `json:"live,omitempty"`
	// A masked value of the card number used for processing displaying limited values that can be used on a receipt.
	Maskedpan *string `json:"maskedpan,omitempty"`
	// The merchant id that processed this transaction.
	Merchantid int32 `json:"merchantid"`
	// An integer result that indicates the outcome of the transaction. The Code value below maps to the result value  <table> <tr> <th>Code</th> <th>Abbrev</th> <th>Description</th> </tr> <tr><td>0</td><td>Declined</td><td>Declined</td></tr> <tr><td>1</td><td>Accepted</td><td>Accepted</td></tr> <tr><td>2</td><td>Rejected</td><td>Rejected</td></tr> <tr><td>3</td><td>Not Attempted</td><td>Not Attempted</td></tr> <tr><td>4</td><td>Referred</td><td>Referred</td></tr> <tr><td>5</td><td>PinRetry</td><td>Perform PIN Retry</td></tr> <tr><td>6</td><td>ForSigVer</td><td>Force Signature Verification</td></tr> <tr><td>7</td><td>Hold</td><td>Hold</td></tr> <tr><td>8</td><td>SecErr</td><td>Security Error</td></tr> <tr><td>9</td><td>CallAcq</td><td>Call Acquirer</td></tr> <tr><td>10</td><td>DNH</td><td>Do Not Honour</td></tr> <tr><td>11</td><td>RtnCrd</td><td>Retain Card</td></tr> <tr><td>12</td><td>ExprdCrd</td><td>Expired Card</td></tr> <tr><td>13</td><td>InvldCrd</td><td>Invalid Card No</td></tr> <tr><td>14</td><td>PinExcd</td><td>Pin Tries Exceeded</td></tr> <tr><td>15</td><td>PinInvld</td><td>Pin Invalid</td></tr> <tr><td>16</td><td>AuthReq</td><td>Authentication Required</td></tr> <tr><td>17</td><td>AuthenFail</td><td>Authentication Failed</td></tr> <tr><td>18</td><td>Verified</td><td>Card Verified</td></tr> <tr><td>19</td><td>Cancelled</td><td>Cancelled</td></tr> <tr><td>20</td><td>Un</td><td>Unknown</td></tr> <tr><td>21</td><td>Challenged</td><td>Challenged</td></tr> <tr><td>22</td><td>Decoupled</td><td>Decoupled</td></tr> <tr><td>23</td><td>Denied</td><td>Permission Denied</td></tr> </table>
	Result int32 `json:"result"`
	// The result code as defined in the Response Codes Reference for example 000 is an accepted live transaction whilst 001 is an accepted test transaction. Result codes identify the source of success and failure.  Codes may start with an alpha character i.e. C001 indicating a type of error such as a card validation error.
	ResultCode string `json:"result_code"`
	// The message regarding the result which provides further narrative to the result code.
	ResultMessage string `json:"result_message"`
	// The name of the card scheme of the transaction that processed the transaction such as Visa or MasterCard.
	Scheme *string `json:"scheme,omitempty"`
	// The name of the card scheme of the transaction such as VI or MC.
	SchemeId *string `json:"scheme_id,omitempty"`
	// A url containing a logo of the card scheme.
	SchemeLogo *string `json:"scheme_logo,omitempty"`
	// A SHA256 digest value of the transaction used to validate the response data The digest is calculated by concatenating   * authcode   * amount   * response_code   * merchant_id   * trans_no   * identifier   * licence_key - which is not provided in the response.
	Sha256 *string `json:"sha256,omitempty"`
	// Used to identify the status of a transaction. The status is used to track a transaction through its life cycle.  <table> <tr> <th>Id</th> <th>Description</th> </tr> <tr> <td>O</td> <td>Transaction is open for settlement</td> </tr> <tr> <td>A</td> <td>Transaction is assigned for settlement and can no longer be voided</td> </tr> <tr> <td>S</td> <td>Transaction has been settled</td> </tr> <tr> <td>D</td> <td>Transaction has been declined</td> </tr> <tr> <td>R</td> <td>Transaction has been rejected</td> </tr> <tr> <td>P</td> <td>Transaction has been authorised only and awaiting a capture. Used in pre-auth situations</td> </tr> <tr> <td>C</td> <td>Transaction has been cancelled</td> </tr> <tr> <td>E</td> <td>Transaction has expired</td> </tr> <tr> <td>I</td> <td>Transaction has been initialised but no action was able to be carried out</td> </tr> <tr> <td>H</td> <td>Transaction is awaiting authorisation</td> </tr> <tr> <td>.</td> <td>Transaction is on hold</td> </tr> <tr> <td>V</td> <td>Transaction has been verified</td> </tr> </table>
	TransStatus *string `json:"trans_status,omitempty"`
	// The resulting transaction number, ordered incrementally from 1 for every merchant_id. The value will default to less than 1 for transactions that do not have a transaction number issued.
	Transno *int32 `json:"transno,omitempty"`
}

type _AuthResponse AuthResponse

// NewAuthResponse instantiates a new AuthResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAuthResponse(merchantid int32, result int32, resultCode string, resultMessage string) *AuthResponse {
	this := AuthResponse{}
	this.Merchantid = merchantid
	this.Result = result
	this.ResultCode = resultCode
	this.ResultMessage = resultMessage
	return &this
}

// NewAuthResponseWithDefaults instantiates a new AuthResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAuthResponseWithDefaults() *AuthResponse {
	this := AuthResponse{}
	return &this
}

// GetAmount returns the Amount field value if set, zero value otherwise.
func (o *AuthResponse) GetAmount() int32 {
	if o == nil || IsNil(o.Amount) {
		var ret int32
		return ret
	}
	return *o.Amount
}

// GetAmountOk returns a tuple with the Amount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthResponse) GetAmountOk() (*int32, bool) {
	if o == nil || IsNil(o.Amount) {
		return nil, false
	}
	return o.Amount, true
}

// HasAmount returns a boolean if a field has been set.
func (o *AuthResponse) HasAmount() bool {
	if o != nil && !IsNil(o.Amount) {
		return true
	}

	return false
}

// SetAmount gets a reference to the given int32 and assigns it to the Amount field.
func (o *AuthResponse) SetAmount(v int32) {
	o.Amount = &v
}

// GetAtrn returns the Atrn field value if set, zero value otherwise.
func (o *AuthResponse) GetAtrn() string {
	if o == nil || IsNil(o.Atrn) {
		var ret string
		return ret
	}
	return *o.Atrn
}

// GetAtrnOk returns a tuple with the Atrn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthResponse) GetAtrnOk() (*string, bool) {
	if o == nil || IsNil(o.Atrn) {
		return nil, false
	}
	return o.Atrn, true
}

// HasAtrn returns a boolean if a field has been set.
func (o *AuthResponse) HasAtrn() bool {
	if o != nil && !IsNil(o.Atrn) {
		return true
	}

	return false
}

// SetAtrn gets a reference to the given string and assigns it to the Atrn field.
func (o *AuthResponse) SetAtrn(v string) {
	o.Atrn = &v
}

// GetAtsd returns the Atsd field value if set, zero value otherwise.
func (o *AuthResponse) GetAtsd() string {
	if o == nil || IsNil(o.Atsd) {
		var ret string
		return ret
	}
	return *o.Atsd
}

// GetAtsdOk returns a tuple with the Atsd field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthResponse) GetAtsdOk() (*string, bool) {
	if o == nil || IsNil(o.Atsd) {
		return nil, false
	}
	return o.Atsd, true
}

// HasAtsd returns a boolean if a field has been set.
func (o *AuthResponse) HasAtsd() bool {
	if o != nil && !IsNil(o.Atsd) {
		return true
	}

	return false
}

// SetAtsd gets a reference to the given string and assigns it to the Atsd field.
func (o *AuthResponse) SetAtsd(v string) {
	o.Atsd = &v
}

// GetAuthcode returns the Authcode field value if set, zero value otherwise.
func (o *AuthResponse) GetAuthcode() string {
	if o == nil || IsNil(o.Authcode) {
		var ret string
		return ret
	}
	return *o.Authcode
}

// GetAuthcodeOk returns a tuple with the Authcode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthResponse) GetAuthcodeOk() (*string, bool) {
	if o == nil || IsNil(o.Authcode) {
		return nil, false
	}
	return o.Authcode, true
}

// HasAuthcode returns a boolean if a field has been set.
func (o *AuthResponse) HasAuthcode() bool {
	if o != nil && !IsNil(o.Authcode) {
		return true
	}

	return false
}

// SetAuthcode gets a reference to the given string and assigns it to the Authcode field.
func (o *AuthResponse) SetAuthcode(v string) {
	o.Authcode = &v
}

// GetAuthenResult returns the AuthenResult field value if set, zero value otherwise.
func (o *AuthResponse) GetAuthenResult() string {
	if o == nil || IsNil(o.AuthenResult) {
		var ret string
		return ret
	}
	return *o.AuthenResult
}

// GetAuthenResultOk returns a tuple with the AuthenResult field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthResponse) GetAuthenResultOk() (*string, bool) {
	if o == nil || IsNil(o.AuthenResult) {
		return nil, false
	}
	return o.AuthenResult, true
}

// HasAuthenResult returns a boolean if a field has been set.
func (o *AuthResponse) HasAuthenResult() bool {
	if o != nil && !IsNil(o.AuthenResult) {
		return true
	}

	return false
}

// SetAuthenResult gets a reference to the given string and assigns it to the AuthenResult field.
func (o *AuthResponse) SetAuthenResult(v string) {
	o.AuthenResult = &v
}

// GetAuthorised returns the Authorised field value if set, zero value otherwise.
func (o *AuthResponse) GetAuthorised() bool {
	if o == nil || IsNil(o.Authorised) {
		var ret bool
		return ret
	}
	return *o.Authorised
}

// GetAuthorisedOk returns a tuple with the Authorised field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthResponse) GetAuthorisedOk() (*bool, bool) {
	if o == nil || IsNil(o.Authorised) {
		return nil, false
	}
	return o.Authorised, true
}

// HasAuthorised returns a boolean if a field has been set.
func (o *AuthResponse) HasAuthorised() bool {
	if o != nil && !IsNil(o.Authorised) {
		return true
	}

	return false
}

// SetAuthorised gets a reference to the given bool and assigns it to the Authorised field.
func (o *AuthResponse) SetAuthorised(v bool) {
	o.Authorised = &v
}

// GetAvsResult returns the AvsResult field value if set, zero value otherwise.
func (o *AuthResponse) GetAvsResult() string {
	if o == nil || IsNil(o.AvsResult) {
		var ret string
		return ret
	}
	return *o.AvsResult
}

// GetAvsResultOk returns a tuple with the AvsResult field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthResponse) GetAvsResultOk() (*string, bool) {
	if o == nil || IsNil(o.AvsResult) {
		return nil, false
	}
	return o.AvsResult, true
}

// HasAvsResult returns a boolean if a field has been set.
func (o *AuthResponse) HasAvsResult() bool {
	if o != nil && !IsNil(o.AvsResult) {
		return true
	}

	return false
}

// SetAvsResult gets a reference to the given string and assigns it to the AvsResult field.
func (o *AuthResponse) SetAvsResult(v string) {
	o.AvsResult = &v
}

// GetBinCommercial returns the BinCommercial field value if set, zero value otherwise.
func (o *AuthResponse) GetBinCommercial() bool {
	if o == nil || IsNil(o.BinCommercial) {
		var ret bool
		return ret
	}
	return *o.BinCommercial
}

// GetBinCommercialOk returns a tuple with the BinCommercial field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthResponse) GetBinCommercialOk() (*bool, bool) {
	if o == nil || IsNil(o.BinCommercial) {
		return nil, false
	}
	return o.BinCommercial, true
}

// HasBinCommercial returns a boolean if a field has been set.
func (o *AuthResponse) HasBinCommercial() bool {
	if o != nil && !IsNil(o.BinCommercial) {
		return true
	}

	return false
}

// SetBinCommercial gets a reference to the given bool and assigns it to the BinCommercial field.
func (o *AuthResponse) SetBinCommercial(v bool) {
	o.BinCommercial = &v
}

// GetBinDebit returns the BinDebit field value if set, zero value otherwise.
func (o *AuthResponse) GetBinDebit() bool {
	if o == nil || IsNil(o.BinDebit) {
		var ret bool
		return ret
	}
	return *o.BinDebit
}

// GetBinDebitOk returns a tuple with the BinDebit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthResponse) GetBinDebitOk() (*bool, bool) {
	if o == nil || IsNil(o.BinDebit) {
		return nil, false
	}
	return o.BinDebit, true
}

// HasBinDebit returns a boolean if a field has been set.
func (o *AuthResponse) HasBinDebit() bool {
	if o != nil && !IsNil(o.BinDebit) {
		return true
	}

	return false
}

// SetBinDebit gets a reference to the given bool and assigns it to the BinDebit field.
func (o *AuthResponse) SetBinDebit(v bool) {
	o.BinDebit = &v
}

// GetBinDescription returns the BinDescription field value if set, zero value otherwise.
func (o *AuthResponse) GetBinDescription() string {
	if o == nil || IsNil(o.BinDescription) {
		var ret string
		return ret
	}
	return *o.BinDescription
}

// GetBinDescriptionOk returns a tuple with the BinDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthResponse) GetBinDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.BinDescription) {
		return nil, false
	}
	return o.BinDescription, true
}

// HasBinDescription returns a boolean if a field has been set.
func (o *AuthResponse) HasBinDescription() bool {
	if o != nil && !IsNil(o.BinDescription) {
		return true
	}

	return false
}

// SetBinDescription gets a reference to the given string and assigns it to the BinDescription field.
func (o *AuthResponse) SetBinDescription(v string) {
	o.BinDescription = &v
}

// GetCavv returns the Cavv field value if set, zero value otherwise.
func (o *AuthResponse) GetCavv() string {
	if o == nil || IsNil(o.Cavv) {
		var ret string
		return ret
	}
	return *o.Cavv
}

// GetCavvOk returns a tuple with the Cavv field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthResponse) GetCavvOk() (*string, bool) {
	if o == nil || IsNil(o.Cavv) {
		return nil, false
	}
	return o.Cavv, true
}

// HasCavv returns a boolean if a field has been set.
func (o *AuthResponse) HasCavv() bool {
	if o != nil && !IsNil(o.Cavv) {
		return true
	}

	return false
}

// SetCavv gets a reference to the given string and assigns it to the Cavv field.
func (o *AuthResponse) SetCavv(v string) {
	o.Cavv = &v
}

// GetContext returns the Context field value if set, zero value otherwise.
func (o *AuthResponse) GetContext() string {
	if o == nil || IsNil(o.Context) {
		var ret string
		return ret
	}
	return *o.Context
}

// GetContextOk returns a tuple with the Context field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthResponse) GetContextOk() (*string, bool) {
	if o == nil || IsNil(o.Context) {
		return nil, false
	}
	return o.Context, true
}

// HasContext returns a boolean if a field has been set.
func (o *AuthResponse) HasContext() bool {
	if o != nil && !IsNil(o.Context) {
		return true
	}

	return false
}

// SetContext gets a reference to the given string and assigns it to the Context field.
func (o *AuthResponse) SetContext(v string) {
	o.Context = &v
}

// GetCscResult returns the CscResult field value if set, zero value otherwise.
func (o *AuthResponse) GetCscResult() string {
	if o == nil || IsNil(o.CscResult) {
		var ret string
		return ret
	}
	return *o.CscResult
}

// GetCscResultOk returns a tuple with the CscResult field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthResponse) GetCscResultOk() (*string, bool) {
	if o == nil || IsNil(o.CscResult) {
		return nil, false
	}
	return o.CscResult, true
}

// HasCscResult returns a boolean if a field has been set.
func (o *AuthResponse) HasCscResult() bool {
	if o != nil && !IsNil(o.CscResult) {
		return true
	}

	return false
}

// SetCscResult gets a reference to the given string and assigns it to the CscResult field.
func (o *AuthResponse) SetCscResult(v string) {
	o.CscResult = &v
}

// GetCurrency returns the Currency field value if set, zero value otherwise.
func (o *AuthResponse) GetCurrency() string {
	if o == nil || IsNil(o.Currency) {
		var ret string
		return ret
	}
	return *o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthResponse) GetCurrencyOk() (*string, bool) {
	if o == nil || IsNil(o.Currency) {
		return nil, false
	}
	return o.Currency, true
}

// HasCurrency returns a boolean if a field has been set.
func (o *AuthResponse) HasCurrency() bool {
	if o != nil && !IsNil(o.Currency) {
		return true
	}

	return false
}

// SetCurrency gets a reference to the given string and assigns it to the Currency field.
func (o *AuthResponse) SetCurrency(v string) {
	o.Currency = &v
}

// GetDatetime returns the Datetime field value if set, zero value otherwise.
func (o *AuthResponse) GetDatetime() time.Time {
	if o == nil || IsNil(o.Datetime) {
		var ret time.Time
		return ret
	}
	return *o.Datetime
}

// GetDatetimeOk returns a tuple with the Datetime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthResponse) GetDatetimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Datetime) {
		return nil, false
	}
	return o.Datetime, true
}

// HasDatetime returns a boolean if a field has been set.
func (o *AuthResponse) HasDatetime() bool {
	if o != nil && !IsNil(o.Datetime) {
		return true
	}

	return false
}

// SetDatetime gets a reference to the given time.Time and assigns it to the Datetime field.
func (o *AuthResponse) SetDatetime(v time.Time) {
	o.Datetime = &v
}

// GetEci returns the Eci field value if set, zero value otherwise.
func (o *AuthResponse) GetEci() string {
	if o == nil || IsNil(o.Eci) {
		var ret string
		return ret
	}
	return *o.Eci
}

// GetEciOk returns a tuple with the Eci field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthResponse) GetEciOk() (*string, bool) {
	if o == nil || IsNil(o.Eci) {
		return nil, false
	}
	return o.Eci, true
}

// HasEci returns a boolean if a field has been set.
func (o *AuthResponse) HasEci() bool {
	if o != nil && !IsNil(o.Eci) {
		return true
	}

	return false
}

// SetEci gets a reference to the given string and assigns it to the Eci field.
func (o *AuthResponse) SetEci(v string) {
	o.Eci = &v
}

// GetIdentifier returns the Identifier field value if set, zero value otherwise.
func (o *AuthResponse) GetIdentifier() string {
	if o == nil || IsNil(o.Identifier) {
		var ret string
		return ret
	}
	return *o.Identifier
}

// GetIdentifierOk returns a tuple with the Identifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthResponse) GetIdentifierOk() (*string, bool) {
	if o == nil || IsNil(o.Identifier) {
		return nil, false
	}
	return o.Identifier, true
}

// HasIdentifier returns a boolean if a field has been set.
func (o *AuthResponse) HasIdentifier() bool {
	if o != nil && !IsNil(o.Identifier) {
		return true
	}

	return false
}

// SetIdentifier gets a reference to the given string and assigns it to the Identifier field.
func (o *AuthResponse) SetIdentifier(v string) {
	o.Identifier = &v
}

// GetLive returns the Live field value if set, zero value otherwise.
func (o *AuthResponse) GetLive() bool {
	if o == nil || IsNil(o.Live) {
		var ret bool
		return ret
	}
	return *o.Live
}

// GetLiveOk returns a tuple with the Live field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthResponse) GetLiveOk() (*bool, bool) {
	if o == nil || IsNil(o.Live) {
		return nil, false
	}
	return o.Live, true
}

// HasLive returns a boolean if a field has been set.
func (o *AuthResponse) HasLive() bool {
	if o != nil && !IsNil(o.Live) {
		return true
	}

	return false
}

// SetLive gets a reference to the given bool and assigns it to the Live field.
func (o *AuthResponse) SetLive(v bool) {
	o.Live = &v
}

// GetMaskedpan returns the Maskedpan field value if set, zero value otherwise.
func (o *AuthResponse) GetMaskedpan() string {
	if o == nil || IsNil(o.Maskedpan) {
		var ret string
		return ret
	}
	return *o.Maskedpan
}

// GetMaskedpanOk returns a tuple with the Maskedpan field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthResponse) GetMaskedpanOk() (*string, bool) {
	if o == nil || IsNil(o.Maskedpan) {
		return nil, false
	}
	return o.Maskedpan, true
}

// HasMaskedpan returns a boolean if a field has been set.
func (o *AuthResponse) HasMaskedpan() bool {
	if o != nil && !IsNil(o.Maskedpan) {
		return true
	}

	return false
}

// SetMaskedpan gets a reference to the given string and assigns it to the Maskedpan field.
func (o *AuthResponse) SetMaskedpan(v string) {
	o.Maskedpan = &v
}

// GetMerchantid returns the Merchantid field value
func (o *AuthResponse) GetMerchantid() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Merchantid
}

// GetMerchantidOk returns a tuple with the Merchantid field value
// and a boolean to check if the value has been set.
func (o *AuthResponse) GetMerchantidOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Merchantid, true
}

// SetMerchantid sets field value
func (o *AuthResponse) SetMerchantid(v int32) {
	o.Merchantid = v
}

// GetResult returns the Result field value
func (o *AuthResponse) GetResult() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Result
}

// GetResultOk returns a tuple with the Result field value
// and a boolean to check if the value has been set.
func (o *AuthResponse) GetResultOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Result, true
}

// SetResult sets field value
func (o *AuthResponse) SetResult(v int32) {
	o.Result = v
}

// GetResultCode returns the ResultCode field value
func (o *AuthResponse) GetResultCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ResultCode
}

// GetResultCodeOk returns a tuple with the ResultCode field value
// and a boolean to check if the value has been set.
func (o *AuthResponse) GetResultCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ResultCode, true
}

// SetResultCode sets field value
func (o *AuthResponse) SetResultCode(v string) {
	o.ResultCode = v
}

// GetResultMessage returns the ResultMessage field value
func (o *AuthResponse) GetResultMessage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ResultMessage
}

// GetResultMessageOk returns a tuple with the ResultMessage field value
// and a boolean to check if the value has been set.
func (o *AuthResponse) GetResultMessageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ResultMessage, true
}

// SetResultMessage sets field value
func (o *AuthResponse) SetResultMessage(v string) {
	o.ResultMessage = v
}

// GetScheme returns the Scheme field value if set, zero value otherwise.
func (o *AuthResponse) GetScheme() string {
	if o == nil || IsNil(o.Scheme) {
		var ret string
		return ret
	}
	return *o.Scheme
}

// GetSchemeOk returns a tuple with the Scheme field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthResponse) GetSchemeOk() (*string, bool) {
	if o == nil || IsNil(o.Scheme) {
		return nil, false
	}
	return o.Scheme, true
}

// HasScheme returns a boolean if a field has been set.
func (o *AuthResponse) HasScheme() bool {
	if o != nil && !IsNil(o.Scheme) {
		return true
	}

	return false
}

// SetScheme gets a reference to the given string and assigns it to the Scheme field.
func (o *AuthResponse) SetScheme(v string) {
	o.Scheme = &v
}

// GetSchemeId returns the SchemeId field value if set, zero value otherwise.
func (o *AuthResponse) GetSchemeId() string {
	if o == nil || IsNil(o.SchemeId) {
		var ret string
		return ret
	}
	return *o.SchemeId
}

// GetSchemeIdOk returns a tuple with the SchemeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthResponse) GetSchemeIdOk() (*string, bool) {
	if o == nil || IsNil(o.SchemeId) {
		return nil, false
	}
	return o.SchemeId, true
}

// HasSchemeId returns a boolean if a field has been set.
func (o *AuthResponse) HasSchemeId() bool {
	if o != nil && !IsNil(o.SchemeId) {
		return true
	}

	return false
}

// SetSchemeId gets a reference to the given string and assigns it to the SchemeId field.
func (o *AuthResponse) SetSchemeId(v string) {
	o.SchemeId = &v
}

// GetSchemeLogo returns the SchemeLogo field value if set, zero value otherwise.
func (o *AuthResponse) GetSchemeLogo() string {
	if o == nil || IsNil(o.SchemeLogo) {
		var ret string
		return ret
	}
	return *o.SchemeLogo
}

// GetSchemeLogoOk returns a tuple with the SchemeLogo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthResponse) GetSchemeLogoOk() (*string, bool) {
	if o == nil || IsNil(o.SchemeLogo) {
		return nil, false
	}
	return o.SchemeLogo, true
}

// HasSchemeLogo returns a boolean if a field has been set.
func (o *AuthResponse) HasSchemeLogo() bool {
	if o != nil && !IsNil(o.SchemeLogo) {
		return true
	}

	return false
}

// SetSchemeLogo gets a reference to the given string and assigns it to the SchemeLogo field.
func (o *AuthResponse) SetSchemeLogo(v string) {
	o.SchemeLogo = &v
}

// GetSha256 returns the Sha256 field value if set, zero value otherwise.
func (o *AuthResponse) GetSha256() string {
	if o == nil || IsNil(o.Sha256) {
		var ret string
		return ret
	}
	return *o.Sha256
}

// GetSha256Ok returns a tuple with the Sha256 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthResponse) GetSha256Ok() (*string, bool) {
	if o == nil || IsNil(o.Sha256) {
		return nil, false
	}
	return o.Sha256, true
}

// HasSha256 returns a boolean if a field has been set.
func (o *AuthResponse) HasSha256() bool {
	if o != nil && !IsNil(o.Sha256) {
		return true
	}

	return false
}

// SetSha256 gets a reference to the given string and assigns it to the Sha256 field.
func (o *AuthResponse) SetSha256(v string) {
	o.Sha256 = &v
}

// GetTransStatus returns the TransStatus field value if set, zero value otherwise.
func (o *AuthResponse) GetTransStatus() string {
	if o == nil || IsNil(o.TransStatus) {
		var ret string
		return ret
	}
	return *o.TransStatus
}

// GetTransStatusOk returns a tuple with the TransStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthResponse) GetTransStatusOk() (*string, bool) {
	if o == nil || IsNil(o.TransStatus) {
		return nil, false
	}
	return o.TransStatus, true
}

// HasTransStatus returns a boolean if a field has been set.
func (o *AuthResponse) HasTransStatus() bool {
	if o != nil && !IsNil(o.TransStatus) {
		return true
	}

	return false
}

// SetTransStatus gets a reference to the given string and assigns it to the TransStatus field.
func (o *AuthResponse) SetTransStatus(v string) {
	o.TransStatus = &v
}

// GetTransno returns the Transno field value if set, zero value otherwise.
func (o *AuthResponse) GetTransno() int32 {
	if o == nil || IsNil(o.Transno) {
		var ret int32
		return ret
	}
	return *o.Transno
}

// GetTransnoOk returns a tuple with the Transno field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthResponse) GetTransnoOk() (*int32, bool) {
	if o == nil || IsNil(o.Transno) {
		return nil, false
	}
	return o.Transno, true
}

// HasTransno returns a boolean if a field has been set.
func (o *AuthResponse) HasTransno() bool {
	if o != nil && !IsNil(o.Transno) {
		return true
	}

	return false
}

// SetTransno gets a reference to the given int32 and assigns it to the Transno field.
func (o *AuthResponse) SetTransno(v int32) {
	o.Transno = &v
}

func (o AuthResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AuthResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Amount) {
		toSerialize["amount"] = o.Amount
	}
	if !IsNil(o.Atrn) {
		toSerialize["atrn"] = o.Atrn
	}
	if !IsNil(o.Atsd) {
		toSerialize["atsd"] = o.Atsd
	}
	if !IsNil(o.Authcode) {
		toSerialize["authcode"] = o.Authcode
	}
	if !IsNil(o.AuthenResult) {
		toSerialize["authen_result"] = o.AuthenResult
	}
	if !IsNil(o.Authorised) {
		toSerialize["authorised"] = o.Authorised
	}
	if !IsNil(o.AvsResult) {
		toSerialize["avs_result"] = o.AvsResult
	}
	if !IsNil(o.BinCommercial) {
		toSerialize["bin_commercial"] = o.BinCommercial
	}
	if !IsNil(o.BinDebit) {
		toSerialize["bin_debit"] = o.BinDebit
	}
	if !IsNil(o.BinDescription) {
		toSerialize["bin_description"] = o.BinDescription
	}
	if !IsNil(o.Cavv) {
		toSerialize["cavv"] = o.Cavv
	}
	if !IsNil(o.Context) {
		toSerialize["context"] = o.Context
	}
	if !IsNil(o.CscResult) {
		toSerialize["csc_result"] = o.CscResult
	}
	if !IsNil(o.Currency) {
		toSerialize["currency"] = o.Currency
	}
	if !IsNil(o.Datetime) {
		toSerialize["datetime"] = o.Datetime
	}
	if !IsNil(o.Eci) {
		toSerialize["eci"] = o.Eci
	}
	if !IsNil(o.Identifier) {
		toSerialize["identifier"] = o.Identifier
	}
	if !IsNil(o.Live) {
		toSerialize["live"] = o.Live
	}
	if !IsNil(o.Maskedpan) {
		toSerialize["maskedpan"] = o.Maskedpan
	}
	toSerialize["merchantid"] = o.Merchantid
	toSerialize["result"] = o.Result
	toSerialize["result_code"] = o.ResultCode
	toSerialize["result_message"] = o.ResultMessage
	if !IsNil(o.Scheme) {
		toSerialize["scheme"] = o.Scheme
	}
	if !IsNil(o.SchemeId) {
		toSerialize["scheme_id"] = o.SchemeId
	}
	if !IsNil(o.SchemeLogo) {
		toSerialize["scheme_logo"] = o.SchemeLogo
	}
	if !IsNil(o.Sha256) {
		toSerialize["sha256"] = o.Sha256
	}
	if !IsNil(o.TransStatus) {
		toSerialize["trans_status"] = o.TransStatus
	}
	if !IsNil(o.Transno) {
		toSerialize["transno"] = o.Transno
	}
	return toSerialize, nil
}

func (o *AuthResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"merchantid",
		"result",
		"result_code",
		"result_message",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAuthResponse := _AuthResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAuthResponse)

	if err != nil {
		return err
	}

	*o = AuthResponse(varAuthResponse)

	return err
}

type NullableAuthResponse struct {
	value *AuthResponse
	isSet bool
}

func (v NullableAuthResponse) Get() *AuthResponse {
	return v.value
}

func (v *NullableAuthResponse) Set(val *AuthResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableAuthResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableAuthResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuthResponse(val *AuthResponse) *NullableAuthResponse {
	return &NullableAuthResponse{value: val, isSet: true}
}

func (v NullableAuthResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuthResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
