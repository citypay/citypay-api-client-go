/*
CityPay Payment API

 Welcome to the CityPay API, a robust HTTP API payment solution designed for seamless server-to-server  transactional processing. Our API facilitates a wide array of payment operations, catering to diverse business needs.  Whether you're integrating Internet payments, handling Mail Order/Telephone Order (MOTO) transactions, managing  Subscriptions with Recurring and Continuous Authority payments, or navigating the complexities of 3-D Secure  authentication, our API is equipped to support your requirements. Additionally, we offer functionalities for  Authorisation, Refunding, Pre-Authorisation, Cancellation/Voids, and Completion processing, alongside the capability  for tokenised payments.  ## Compliance and Security Overview <aside class=\"notice\">   Ensuring the security of payment transactions and compliance with industry standards is paramount. Our API is    designed with stringent security measures and compliance protocols to safeguard sensitive information and meet    the rigorous requirements of Visa, MasterCard, and the PCI Security Standards Council. </aside>  ### Key Compliance and Security Measures  * **TLS Encryption**: All data transmissions must utilise TLS version 1.2 or higher, employing [strong cryptography](#enabled-tls-ciphers). Our infrastructure strictly enforces this requirement to maintain the integrity and confidentiality of data in transit. We conduct regular scans and assessments of our TLS endpoints to identify and mitigate vulnerabilities. * **Data Storage Prohibitions**: Storing sensitive cardholder data (CHD), such as the card security code (CSC) or primary account number (PAN), is strictly prohibited. Our API is designed to minimize your exposure to sensitive data, thereby reducing your compliance burden. * **Data Masking**: For consumer protection and compliance, full card numbers must not be displayed on receipts or any customer-facing materials. Our API automatically masks PANs, displaying only the last four digits to facilitate safe receipt generation. * **Network Scans**: If your application is web-based, regular scans of your hosting environment are mandatory to identify and rectify potential vulnerabilities. This proactive measure is crucial for maintaining a secure and compliant online presence. * **PCI Compliance**: Adherence to PCI DSS standards is not optional; it's a requirement for operating securely and legally in the payments ecosystem. For detailed information on compliance requirements and resources, please visit the PCI Security Standards Council website [https://www.pcisecuritystandards.org/](https://www.pcisecuritystandards.org/). * **Request Validation**: Our API includes mechanisms to verify the legitimacy of each request, ensuring it pertains to a valid account and originates from a trusted source. We leverage remote IP address verification alongside sophisticated application firewall technologies to thwart a wide array of common security threats.  ## Getting Started Before integrating with the CityPay API, ensure your application and development practices align with the outlined compliance and security measures. This preparatory step is crucial for a smooth integration process and the long-term success of your payment processing operations.  For further details on API endpoints, request/response formats, and code examples, proceed to the subsequent sections of our documentation. Our aim is to provide you with all the necessary tools and information to integrate our payment processing capabilities seamlessly into your application.  Thank you for choosing CityPay API. We look forward to supporting your payment processing needs with our secure, compliant, and versatile API solution.

API version: 6.6.40
Contact: support@citypay.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citypay

import (
	"encoding/json"
)

// checks if the PaylinkCart type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PaylinkCart{}

// PaylinkCart struct for PaylinkCart
type PaylinkCart struct {
	Contents []PaylinkCartItemModel `json:"contents,omitempty"`
	// A coupon redeemed with the transaction.
	Coupon *string `json:"coupon,omitempty"`
	// The mode field specifies the behaviour or functionality of the cart.  Valid values are:   0 - No cart - No cart is shown  1 - Read-only - The cart is shown with a breakdown of the item details provided by objects in the contents array.  2 - Selection cart - The cart is shown as a drop-down box of available cart items that the customer can a single item select from.  3 - Dynamic cart - a text box is rendered to enable the operator to input an amount.  4 - Multi cart - The cart is displayed with items rendered with selectable quantities.
	Mode *int32 `json:"mode,omitempty"`
	// Specifies a description about the product or service that is the subject of the transaction. It will be rendered in the header of the page with no labels.
	ProductDescription *string `json:"product_description,omitempty"`
	// Specifies information about the product or service that is the subject of the transaction. It will be rendered in the header of the page.
	ProductInformation *string `json:"product_information,omitempty"`
	// The shipping amount of the transaction in the lowest denomination of currency.
	Shipping *int32 `json:"shipping,omitempty"`
	// The tax amount of the transaction in the lowest denomination of currency.
	Tax *int32 `json:"tax,omitempty"`
}

// NewPaylinkCart instantiates a new PaylinkCart object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPaylinkCart() *PaylinkCart {
	this := PaylinkCart{}
	return &this
}

// NewPaylinkCartWithDefaults instantiates a new PaylinkCart object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPaylinkCartWithDefaults() *PaylinkCart {
	this := PaylinkCart{}
	return &this
}

// GetContents returns the Contents field value if set, zero value otherwise.
func (o *PaylinkCart) GetContents() []PaylinkCartItemModel {
	if o == nil || IsNil(o.Contents) {
		var ret []PaylinkCartItemModel
		return ret
	}
	return o.Contents
}

// GetContentsOk returns a tuple with the Contents field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaylinkCart) GetContentsOk() ([]PaylinkCartItemModel, bool) {
	if o == nil || IsNil(o.Contents) {
		return nil, false
	}
	return o.Contents, true
}

// HasContents returns a boolean if a field has been set.
func (o *PaylinkCart) HasContents() bool {
	if o != nil && !IsNil(o.Contents) {
		return true
	}

	return false
}

// SetContents gets a reference to the given []PaylinkCartItemModel and assigns it to the Contents field.
func (o *PaylinkCart) SetContents(v []PaylinkCartItemModel) {
	o.Contents = v
}

// GetCoupon returns the Coupon field value if set, zero value otherwise.
func (o *PaylinkCart) GetCoupon() string {
	if o == nil || IsNil(o.Coupon) {
		var ret string
		return ret
	}
	return *o.Coupon
}

// GetCouponOk returns a tuple with the Coupon field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaylinkCart) GetCouponOk() (*string, bool) {
	if o == nil || IsNil(o.Coupon) {
		return nil, false
	}
	return o.Coupon, true
}

// HasCoupon returns a boolean if a field has been set.
func (o *PaylinkCart) HasCoupon() bool {
	if o != nil && !IsNil(o.Coupon) {
		return true
	}

	return false
}

// SetCoupon gets a reference to the given string and assigns it to the Coupon field.
func (o *PaylinkCart) SetCoupon(v string) {
	o.Coupon = &v
}

// GetMode returns the Mode field value if set, zero value otherwise.
func (o *PaylinkCart) GetMode() int32 {
	if o == nil || IsNil(o.Mode) {
		var ret int32
		return ret
	}
	return *o.Mode
}

// GetModeOk returns a tuple with the Mode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaylinkCart) GetModeOk() (*int32, bool) {
	if o == nil || IsNil(o.Mode) {
		return nil, false
	}
	return o.Mode, true
}

// HasMode returns a boolean if a field has been set.
func (o *PaylinkCart) HasMode() bool {
	if o != nil && !IsNil(o.Mode) {
		return true
	}

	return false
}

// SetMode gets a reference to the given int32 and assigns it to the Mode field.
func (o *PaylinkCart) SetMode(v int32) {
	o.Mode = &v
}

// GetProductDescription returns the ProductDescription field value if set, zero value otherwise.
func (o *PaylinkCart) GetProductDescription() string {
	if o == nil || IsNil(o.ProductDescription) {
		var ret string
		return ret
	}
	return *o.ProductDescription
}

// GetProductDescriptionOk returns a tuple with the ProductDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaylinkCart) GetProductDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.ProductDescription) {
		return nil, false
	}
	return o.ProductDescription, true
}

// HasProductDescription returns a boolean if a field has been set.
func (o *PaylinkCart) HasProductDescription() bool {
	if o != nil && !IsNil(o.ProductDescription) {
		return true
	}

	return false
}

// SetProductDescription gets a reference to the given string and assigns it to the ProductDescription field.
func (o *PaylinkCart) SetProductDescription(v string) {
	o.ProductDescription = &v
}

// GetProductInformation returns the ProductInformation field value if set, zero value otherwise.
func (o *PaylinkCart) GetProductInformation() string {
	if o == nil || IsNil(o.ProductInformation) {
		var ret string
		return ret
	}
	return *o.ProductInformation
}

// GetProductInformationOk returns a tuple with the ProductInformation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaylinkCart) GetProductInformationOk() (*string, bool) {
	if o == nil || IsNil(o.ProductInformation) {
		return nil, false
	}
	return o.ProductInformation, true
}

// HasProductInformation returns a boolean if a field has been set.
func (o *PaylinkCart) HasProductInformation() bool {
	if o != nil && !IsNil(o.ProductInformation) {
		return true
	}

	return false
}

// SetProductInformation gets a reference to the given string and assigns it to the ProductInformation field.
func (o *PaylinkCart) SetProductInformation(v string) {
	o.ProductInformation = &v
}

// GetShipping returns the Shipping field value if set, zero value otherwise.
func (o *PaylinkCart) GetShipping() int32 {
	if o == nil || IsNil(o.Shipping) {
		var ret int32
		return ret
	}
	return *o.Shipping
}

// GetShippingOk returns a tuple with the Shipping field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaylinkCart) GetShippingOk() (*int32, bool) {
	if o == nil || IsNil(o.Shipping) {
		return nil, false
	}
	return o.Shipping, true
}

// HasShipping returns a boolean if a field has been set.
func (o *PaylinkCart) HasShipping() bool {
	if o != nil && !IsNil(o.Shipping) {
		return true
	}

	return false
}

// SetShipping gets a reference to the given int32 and assigns it to the Shipping field.
func (o *PaylinkCart) SetShipping(v int32) {
	o.Shipping = &v
}

// GetTax returns the Tax field value if set, zero value otherwise.
func (o *PaylinkCart) GetTax() int32 {
	if o == nil || IsNil(o.Tax) {
		var ret int32
		return ret
	}
	return *o.Tax
}

// GetTaxOk returns a tuple with the Tax field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaylinkCart) GetTaxOk() (*int32, bool) {
	if o == nil || IsNil(o.Tax) {
		return nil, false
	}
	return o.Tax, true
}

// HasTax returns a boolean if a field has been set.
func (o *PaylinkCart) HasTax() bool {
	if o != nil && !IsNil(o.Tax) {
		return true
	}

	return false
}

// SetTax gets a reference to the given int32 and assigns it to the Tax field.
func (o *PaylinkCart) SetTax(v int32) {
	o.Tax = &v
}

func (o PaylinkCart) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PaylinkCart) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Contents) {
		toSerialize["contents"] = o.Contents
	}
	if !IsNil(o.Coupon) {
		toSerialize["coupon"] = o.Coupon
	}
	if !IsNil(o.Mode) {
		toSerialize["mode"] = o.Mode
	}
	if !IsNil(o.ProductDescription) {
		toSerialize["product_description"] = o.ProductDescription
	}
	if !IsNil(o.ProductInformation) {
		toSerialize["product_information"] = o.ProductInformation
	}
	if !IsNil(o.Shipping) {
		toSerialize["shipping"] = o.Shipping
	}
	if !IsNil(o.Tax) {
		toSerialize["tax"] = o.Tax
	}
	return toSerialize, nil
}

type NullablePaylinkCart struct {
	value *PaylinkCart
	isSet bool
}

func (v NullablePaylinkCart) Get() *PaylinkCart {
	return v.value
}

func (v *NullablePaylinkCart) Set(val *PaylinkCart) {
	v.value = val
	v.isSet = true
}

func (v NullablePaylinkCart) IsSet() bool {
	return v.isSet
}

func (v *NullablePaylinkCart) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePaylinkCart(val *PaylinkCart) *NullablePaylinkCart {
	return &NullablePaylinkCart{value: val, isSet: true}
}

func (v NullablePaylinkCart) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePaylinkCart) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
