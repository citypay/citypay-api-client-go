/*
CityPay Payment API

 Welcome to the CityPay API, a robust HTTP API payment solution designed for seamless server-to-server  transactional processing. Our API facilitates a wide array of payment operations, catering to diverse business needs.  Whether you're integrating Internet payments, handling Mail Order/Telephone Order (MOTO) transactions, managing  Subscriptions with Recurring and Continuous Authority payments, or navigating the complexities of 3-D Secure  authentication, our API is equipped to support your requirements. Additionally, we offer functionalities for  Authorisation, Refunding, Pre-Authorisation, Cancellation/Voids, and Completion processing, alongside the capability  for tokenised payments.  ## Compliance and Security Overview <aside class=\"notice\">   Ensuring the security of payment transactions and compliance with industry standards is paramount. Our API is    designed with stringent security measures and compliance protocols to safeguard sensitive information and meet    the rigorous requirements of Visa, MasterCard, and the PCI Security Standards Council. </aside>  ### Key Compliance and Security Measures  * **TLS Encryption**: All data transmissions must utilise TLS version 1.2 or higher, employing [strong cryptography](#enabled-tls-ciphers). Our infrastructure strictly enforces this requirement to maintain the integrity and confidentiality of data in transit. We conduct regular scans and assessments of our TLS endpoints to identify and mitigate vulnerabilities. * **Data Storage Prohibitions**: Storing sensitive cardholder data (CHD), such as the card security code (CSC) or primary account number (PAN), is strictly prohibited. Our API is designed to minimize your exposure to sensitive data, thereby reducing your compliance burden. * **Data Masking**: For consumer protection and compliance, full card numbers must not be displayed on receipts or any customer-facing materials. Our API automatically masks PANs, displaying only the last four digits to facilitate safe receipt generation. * **Network Scans**: If your application is web-based, regular scans of your hosting environment are mandatory to identify and rectify potential vulnerabilities. This proactive measure is crucial for maintaining a secure and compliant online presence. * **PCI Compliance**: Adherence to PCI DSS standards is not optional; it's a requirement for operating securely and legally in the payments ecosystem. For detailed information on compliance requirements and resources, please visit the PCI Security Standards Council website [https://www.pcisecuritystandards.org/](https://www.pcisecuritystandards.org/). * **Request Validation**: Our API includes mechanisms to verify the legitimacy of each request, ensuring it pertains to a valid account and originates from a trusted source. We leverage remote IP address verification alongside sophisticated application firewall technologies to thwart a wide array of common security threats.  ## Getting Started Before integrating with the CityPay API, ensure your application and development practices align with the outlined compliance and security measures. This preparatory step is crucial for a smooth integration process and the long-term success of your payment processing operations.  For further details on API endpoints, request/response formats, and code examples, proceed to the subsequent sections of our documentation. Our aim is to provide you with all the necessary tools and information to integrate our payment processing capabilities seamlessly into your application.  Thank you for choosing CityPay API. We look forward to supporting your payment processing needs with our secure, compliant, and versatile API solution.

API version: 6.6.40
Contact: support@citypay.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citypay

import (
	"encoding/json"
)

// checks if the PaylinkPartPayments type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PaylinkPartPayments{}

// PaylinkPartPayments struct for PaylinkPartPayments
type PaylinkPartPayments struct {
	// Determines if part payments is enabled. Default is false.
	Enabled *string `json:"enabled,omitempty"`
	// The floor amount specifies a value that the minimum rate cannot go under. If 0 the amount of min rate is applied.
	Floor *string `json:"floor,omitempty"`
	// a maximum percentage to charge i.e. 90%.
	Max *string `json:"max,omitempty"`
	// a rate as fixed or percentage.
	MaxRate *string `json:"max_rate,omitempty"`
	// a minimum percentage to charge i.e. 10.
	Min *string `json:"min,omitempty"`
	// a rate as fixed or percentage.
	MinRate *string `json:"min_rate,omitempty"`
}

// NewPaylinkPartPayments instantiates a new PaylinkPartPayments object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPaylinkPartPayments() *PaylinkPartPayments {
	this := PaylinkPartPayments{}
	return &this
}

// NewPaylinkPartPaymentsWithDefaults instantiates a new PaylinkPartPayments object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPaylinkPartPaymentsWithDefaults() *PaylinkPartPayments {
	this := PaylinkPartPayments{}
	return &this
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *PaylinkPartPayments) GetEnabled() string {
	if o == nil || IsNil(o.Enabled) {
		var ret string
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaylinkPartPayments) GetEnabledOk() (*string, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *PaylinkPartPayments) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given string and assigns it to the Enabled field.
func (o *PaylinkPartPayments) SetEnabled(v string) {
	o.Enabled = &v
}

// GetFloor returns the Floor field value if set, zero value otherwise.
func (o *PaylinkPartPayments) GetFloor() string {
	if o == nil || IsNil(o.Floor) {
		var ret string
		return ret
	}
	return *o.Floor
}

// GetFloorOk returns a tuple with the Floor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaylinkPartPayments) GetFloorOk() (*string, bool) {
	if o == nil || IsNil(o.Floor) {
		return nil, false
	}
	return o.Floor, true
}

// HasFloor returns a boolean if a field has been set.
func (o *PaylinkPartPayments) HasFloor() bool {
	if o != nil && !IsNil(o.Floor) {
		return true
	}

	return false
}

// SetFloor gets a reference to the given string and assigns it to the Floor field.
func (o *PaylinkPartPayments) SetFloor(v string) {
	o.Floor = &v
}

// GetMax returns the Max field value if set, zero value otherwise.
func (o *PaylinkPartPayments) GetMax() string {
	if o == nil || IsNil(o.Max) {
		var ret string
		return ret
	}
	return *o.Max
}

// GetMaxOk returns a tuple with the Max field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaylinkPartPayments) GetMaxOk() (*string, bool) {
	if o == nil || IsNil(o.Max) {
		return nil, false
	}
	return o.Max, true
}

// HasMax returns a boolean if a field has been set.
func (o *PaylinkPartPayments) HasMax() bool {
	if o != nil && !IsNil(o.Max) {
		return true
	}

	return false
}

// SetMax gets a reference to the given string and assigns it to the Max field.
func (o *PaylinkPartPayments) SetMax(v string) {
	o.Max = &v
}

// GetMaxRate returns the MaxRate field value if set, zero value otherwise.
func (o *PaylinkPartPayments) GetMaxRate() string {
	if o == nil || IsNil(o.MaxRate) {
		var ret string
		return ret
	}
	return *o.MaxRate
}

// GetMaxRateOk returns a tuple with the MaxRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaylinkPartPayments) GetMaxRateOk() (*string, bool) {
	if o == nil || IsNil(o.MaxRate) {
		return nil, false
	}
	return o.MaxRate, true
}

// HasMaxRate returns a boolean if a field has been set.
func (o *PaylinkPartPayments) HasMaxRate() bool {
	if o != nil && !IsNil(o.MaxRate) {
		return true
	}

	return false
}

// SetMaxRate gets a reference to the given string and assigns it to the MaxRate field.
func (o *PaylinkPartPayments) SetMaxRate(v string) {
	o.MaxRate = &v
}

// GetMin returns the Min field value if set, zero value otherwise.
func (o *PaylinkPartPayments) GetMin() string {
	if o == nil || IsNil(o.Min) {
		var ret string
		return ret
	}
	return *o.Min
}

// GetMinOk returns a tuple with the Min field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaylinkPartPayments) GetMinOk() (*string, bool) {
	if o == nil || IsNil(o.Min) {
		return nil, false
	}
	return o.Min, true
}

// HasMin returns a boolean if a field has been set.
func (o *PaylinkPartPayments) HasMin() bool {
	if o != nil && !IsNil(o.Min) {
		return true
	}

	return false
}

// SetMin gets a reference to the given string and assigns it to the Min field.
func (o *PaylinkPartPayments) SetMin(v string) {
	o.Min = &v
}

// GetMinRate returns the MinRate field value if set, zero value otherwise.
func (o *PaylinkPartPayments) GetMinRate() string {
	if o == nil || IsNil(o.MinRate) {
		var ret string
		return ret
	}
	return *o.MinRate
}

// GetMinRateOk returns a tuple with the MinRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaylinkPartPayments) GetMinRateOk() (*string, bool) {
	if o == nil || IsNil(o.MinRate) {
		return nil, false
	}
	return o.MinRate, true
}

// HasMinRate returns a boolean if a field has been set.
func (o *PaylinkPartPayments) HasMinRate() bool {
	if o != nil && !IsNil(o.MinRate) {
		return true
	}

	return false
}

// SetMinRate gets a reference to the given string and assigns it to the MinRate field.
func (o *PaylinkPartPayments) SetMinRate(v string) {
	o.MinRate = &v
}

func (o PaylinkPartPayments) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PaylinkPartPayments) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !IsNil(o.Floor) {
		toSerialize["floor"] = o.Floor
	}
	if !IsNil(o.Max) {
		toSerialize["max"] = o.Max
	}
	if !IsNil(o.MaxRate) {
		toSerialize["max_rate"] = o.MaxRate
	}
	if !IsNil(o.Min) {
		toSerialize["min"] = o.Min
	}
	if !IsNil(o.MinRate) {
		toSerialize["min_rate"] = o.MinRate
	}
	return toSerialize, nil
}

type NullablePaylinkPartPayments struct {
	value *PaylinkPartPayments
	isSet bool
}

func (v NullablePaylinkPartPayments) Get() *PaylinkPartPayments {
	return v.value
}

func (v *NullablePaylinkPartPayments) Set(val *PaylinkPartPayments) {
	v.value = val
	v.isSet = true
}

func (v NullablePaylinkPartPayments) IsSet() bool {
	return v.isSet
}

func (v *NullablePaylinkPartPayments) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePaylinkPartPayments(val *PaylinkPartPayments) *NullablePaylinkPartPayments {
	return &NullablePaylinkPartPayments{value: val, isSet: true}
}

func (v NullablePaylinkPartPayments) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePaylinkPartPayments) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
