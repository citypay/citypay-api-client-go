/*
CityPay Payment API

 Welcome to the CityPay API, a robust HTTP API payment solution designed for seamless server-to-server  transactional processing. Our API facilitates a wide array of payment operations, catering to diverse business needs.  Whether you're integrating Internet payments, handling Mail Order/Telephone Order (MOTO) transactions, managing  Subscriptions with Recurring and Continuous Authority payments, or navigating the complexities of 3-D Secure  authentication, our API is equipped to support your requirements. Additionally, we offer functionalities for  Authorisation, Refunding, Pre-Authorisation, Cancellation/Voids, and Completion processing, alongside the capability  for tokenised payments.  ## Compliance and Security Overview <aside class=\"notice\">   Ensuring the security of payment transactions and compliance with industry standards is paramount. Our API is    designed with stringent security measures and compliance protocols to safeguard sensitive information and meet    the rigorous requirements of Visa, MasterCard, and the PCI Security Standards Council. </aside>  ### Key Compliance and Security Measures  * **TLS Encryption**: All data transmissions must utilise TLS version 1.2 or higher, employing [strong cryptography](#enabled-tls-ciphers). Our infrastructure strictly enforces this requirement to maintain the integrity and confidentiality of data in transit. We conduct regular scans and assessments of our TLS endpoints to identify and mitigate vulnerabilities. * **Data Storage Prohibitions**: Storing sensitive cardholder data (CHD), such as the card security code (CSC) or primary account number (PAN), is strictly prohibited. Our API is designed to minimize your exposure to sensitive data, thereby reducing your compliance burden. * **Data Masking**: For consumer protection and compliance, full card numbers must not be displayed on receipts or any customer-facing materials. Our API automatically masks PANs, displaying only the last four digits to facilitate safe receipt generation. * **Network Scans**: If your application is web-based, regular scans of your hosting environment are mandatory to identify and rectify potential vulnerabilities. This proactive measure is crucial for maintaining a secure and compliant online presence. * **PCI Compliance**: Adherence to PCI DSS standards is not optional; it's a requirement for operating securely and legally in the payments ecosystem. For detailed information on compliance requirements and resources, please visit the PCI Security Standards Council website [https://www.pcisecuritystandards.org/](https://www.pcisecuritystandards.org/). * **Request Validation**: Our API includes mechanisms to verify the legitimacy of each request, ensuring it pertains to a valid account and originates from a trusted source. We leverage remote IP address verification alongside sophisticated application firewall technologies to thwart a wide array of common security threats.  ## Getting Started Before integrating with the CityPay API, ensure your application and development practices align with the outlined compliance and security measures. This preparatory step is crucial for a smooth integration process and the long-term success of your payment processing operations.  For further details on API endpoints, request/response formats, and code examples, proceed to the subsequent sections of our documentation. Our aim is to provide you with all the necessary tools and information to integrate our payment processing capabilities seamlessly into your application.  Thank you for choosing CityPay API. We look forward to supporting your payment processing needs with our secure, compliant, and versatile API solution.

API version: 6.6.40
Contact: support@citypay.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citypay

import (
	"bytes"
	"encoding/json"
	"fmt"
	"time"
)

// checks if the RemittedClientData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RemittedClientData{}

// RemittedClientData struct for RemittedClientData
type RemittedClientData struct {
	Batches []MerchantBatchResponse `json:"batches"`
	// The client id that the remittance data is for.
	Clientid *string `json:"clientid,omitempty"`
	// The date of the remittance.
	Date *string `json:"date,omitempty"`
	// The date time that the remittance was created.
	DateCreated *time.Time `json:"date_created,omitempty"`
	// Represents the net amount after accounting for refunds. This is calculated as SalesAmount - RefundAmount and expressed in the smallest currency unit.
	NetAmount *int32 `json:"net_amount,omitempty"`
	// The total monetary amount processed consisting of sale and refund transactions.
	ProcessedAmount *int32 `json:"processed_amount,omitempty"`
	// Indicates the total number of sales and refund transactions that occurred. This count provides insight into the volume of processing.
	ProcessedCount *int32 `json:"processed_count,omitempty"`
	// The total amount refunded to customers.
	RefundAmount *int32 `json:"refund_amount,omitempty"`
	// The total number of refund transactions processed. This figure helps in understanding the frequency of refunds relative to sales.
	RefundCount *int32           `json:"refund_count,omitempty"`
	Remittances []RemittanceData `json:"remittances"`
	// The total monetary amount of sales transactions.
	SalesAmount *int32 `json:"sales_amount,omitempty"`
	// Indicates the total number of sales transactions that occurred. This count provides insight into the volume of sales.
	SalesCount *int32 `json:"sales_count,omitempty"`
	// The name of the implementation.
	SettlementImplementation *string `json:"settlement_implementation,omitempty"`
	// The uuid of the settlement file processed on.
	Uuid *string `json:"uuid,omitempty"`
}

type _RemittedClientData RemittedClientData

// NewRemittedClientData instantiates a new RemittedClientData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRemittedClientData(batches []MerchantBatchResponse, remittances []RemittanceData) *RemittedClientData {
	this := RemittedClientData{}
	this.Batches = batches
	this.Remittances = remittances
	return &this
}

// NewRemittedClientDataWithDefaults instantiates a new RemittedClientData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRemittedClientDataWithDefaults() *RemittedClientData {
	this := RemittedClientData{}
	return &this
}

// GetBatches returns the Batches field value
func (o *RemittedClientData) GetBatches() []MerchantBatchResponse {
	if o == nil {
		var ret []MerchantBatchResponse
		return ret
	}

	return o.Batches
}

// GetBatchesOk returns a tuple with the Batches field value
// and a boolean to check if the value has been set.
func (o *RemittedClientData) GetBatchesOk() ([]MerchantBatchResponse, bool) {
	if o == nil {
		return nil, false
	}
	return o.Batches, true
}

// SetBatches sets field value
func (o *RemittedClientData) SetBatches(v []MerchantBatchResponse) {
	o.Batches = v
}

// GetClientid returns the Clientid field value if set, zero value otherwise.
func (o *RemittedClientData) GetClientid() string {
	if o == nil || IsNil(o.Clientid) {
		var ret string
		return ret
	}
	return *o.Clientid
}

// GetClientidOk returns a tuple with the Clientid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemittedClientData) GetClientidOk() (*string, bool) {
	if o == nil || IsNil(o.Clientid) {
		return nil, false
	}
	return o.Clientid, true
}

// HasClientid returns a boolean if a field has been set.
func (o *RemittedClientData) HasClientid() bool {
	if o != nil && !IsNil(o.Clientid) {
		return true
	}

	return false
}

// SetClientid gets a reference to the given string and assigns it to the Clientid field.
func (o *RemittedClientData) SetClientid(v string) {
	o.Clientid = &v
}

// GetDate returns the Date field value if set, zero value otherwise.
func (o *RemittedClientData) GetDate() string {
	if o == nil || IsNil(o.Date) {
		var ret string
		return ret
	}
	return *o.Date
}

// GetDateOk returns a tuple with the Date field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemittedClientData) GetDateOk() (*string, bool) {
	if o == nil || IsNil(o.Date) {
		return nil, false
	}
	return o.Date, true
}

// HasDate returns a boolean if a field has been set.
func (o *RemittedClientData) HasDate() bool {
	if o != nil && !IsNil(o.Date) {
		return true
	}

	return false
}

// SetDate gets a reference to the given string and assigns it to the Date field.
func (o *RemittedClientData) SetDate(v string) {
	o.Date = &v
}

// GetDateCreated returns the DateCreated field value if set, zero value otherwise.
func (o *RemittedClientData) GetDateCreated() time.Time {
	if o == nil || IsNil(o.DateCreated) {
		var ret time.Time
		return ret
	}
	return *o.DateCreated
}

// GetDateCreatedOk returns a tuple with the DateCreated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemittedClientData) GetDateCreatedOk() (*time.Time, bool) {
	if o == nil || IsNil(o.DateCreated) {
		return nil, false
	}
	return o.DateCreated, true
}

// HasDateCreated returns a boolean if a field has been set.
func (o *RemittedClientData) HasDateCreated() bool {
	if o != nil && !IsNil(o.DateCreated) {
		return true
	}

	return false
}

// SetDateCreated gets a reference to the given time.Time and assigns it to the DateCreated field.
func (o *RemittedClientData) SetDateCreated(v time.Time) {
	o.DateCreated = &v
}

// GetNetAmount returns the NetAmount field value if set, zero value otherwise.
func (o *RemittedClientData) GetNetAmount() int32 {
	if o == nil || IsNil(o.NetAmount) {
		var ret int32
		return ret
	}
	return *o.NetAmount
}

// GetNetAmountOk returns a tuple with the NetAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemittedClientData) GetNetAmountOk() (*int32, bool) {
	if o == nil || IsNil(o.NetAmount) {
		return nil, false
	}
	return o.NetAmount, true
}

// HasNetAmount returns a boolean if a field has been set.
func (o *RemittedClientData) HasNetAmount() bool {
	if o != nil && !IsNil(o.NetAmount) {
		return true
	}

	return false
}

// SetNetAmount gets a reference to the given int32 and assigns it to the NetAmount field.
func (o *RemittedClientData) SetNetAmount(v int32) {
	o.NetAmount = &v
}

// GetProcessedAmount returns the ProcessedAmount field value if set, zero value otherwise.
func (o *RemittedClientData) GetProcessedAmount() int32 {
	if o == nil || IsNil(o.ProcessedAmount) {
		var ret int32
		return ret
	}
	return *o.ProcessedAmount
}

// GetProcessedAmountOk returns a tuple with the ProcessedAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemittedClientData) GetProcessedAmountOk() (*int32, bool) {
	if o == nil || IsNil(o.ProcessedAmount) {
		return nil, false
	}
	return o.ProcessedAmount, true
}

// HasProcessedAmount returns a boolean if a field has been set.
func (o *RemittedClientData) HasProcessedAmount() bool {
	if o != nil && !IsNil(o.ProcessedAmount) {
		return true
	}

	return false
}

// SetProcessedAmount gets a reference to the given int32 and assigns it to the ProcessedAmount field.
func (o *RemittedClientData) SetProcessedAmount(v int32) {
	o.ProcessedAmount = &v
}

// GetProcessedCount returns the ProcessedCount field value if set, zero value otherwise.
func (o *RemittedClientData) GetProcessedCount() int32 {
	if o == nil || IsNil(o.ProcessedCount) {
		var ret int32
		return ret
	}
	return *o.ProcessedCount
}

// GetProcessedCountOk returns a tuple with the ProcessedCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemittedClientData) GetProcessedCountOk() (*int32, bool) {
	if o == nil || IsNil(o.ProcessedCount) {
		return nil, false
	}
	return o.ProcessedCount, true
}

// HasProcessedCount returns a boolean if a field has been set.
func (o *RemittedClientData) HasProcessedCount() bool {
	if o != nil && !IsNil(o.ProcessedCount) {
		return true
	}

	return false
}

// SetProcessedCount gets a reference to the given int32 and assigns it to the ProcessedCount field.
func (o *RemittedClientData) SetProcessedCount(v int32) {
	o.ProcessedCount = &v
}

// GetRefundAmount returns the RefundAmount field value if set, zero value otherwise.
func (o *RemittedClientData) GetRefundAmount() int32 {
	if o == nil || IsNil(o.RefundAmount) {
		var ret int32
		return ret
	}
	return *o.RefundAmount
}

// GetRefundAmountOk returns a tuple with the RefundAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemittedClientData) GetRefundAmountOk() (*int32, bool) {
	if o == nil || IsNil(o.RefundAmount) {
		return nil, false
	}
	return o.RefundAmount, true
}

// HasRefundAmount returns a boolean if a field has been set.
func (o *RemittedClientData) HasRefundAmount() bool {
	if o != nil && !IsNil(o.RefundAmount) {
		return true
	}

	return false
}

// SetRefundAmount gets a reference to the given int32 and assigns it to the RefundAmount field.
func (o *RemittedClientData) SetRefundAmount(v int32) {
	o.RefundAmount = &v
}

// GetRefundCount returns the RefundCount field value if set, zero value otherwise.
func (o *RemittedClientData) GetRefundCount() int32 {
	if o == nil || IsNil(o.RefundCount) {
		var ret int32
		return ret
	}
	return *o.RefundCount
}

// GetRefundCountOk returns a tuple with the RefundCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemittedClientData) GetRefundCountOk() (*int32, bool) {
	if o == nil || IsNil(o.RefundCount) {
		return nil, false
	}
	return o.RefundCount, true
}

// HasRefundCount returns a boolean if a field has been set.
func (o *RemittedClientData) HasRefundCount() bool {
	if o != nil && !IsNil(o.RefundCount) {
		return true
	}

	return false
}

// SetRefundCount gets a reference to the given int32 and assigns it to the RefundCount field.
func (o *RemittedClientData) SetRefundCount(v int32) {
	o.RefundCount = &v
}

// GetRemittances returns the Remittances field value
func (o *RemittedClientData) GetRemittances() []RemittanceData {
	if o == nil {
		var ret []RemittanceData
		return ret
	}

	return o.Remittances
}

// GetRemittancesOk returns a tuple with the Remittances field value
// and a boolean to check if the value has been set.
func (o *RemittedClientData) GetRemittancesOk() ([]RemittanceData, bool) {
	if o == nil {
		return nil, false
	}
	return o.Remittances, true
}

// SetRemittances sets field value
func (o *RemittedClientData) SetRemittances(v []RemittanceData) {
	o.Remittances = v
}

// GetSalesAmount returns the SalesAmount field value if set, zero value otherwise.
func (o *RemittedClientData) GetSalesAmount() int32 {
	if o == nil || IsNil(o.SalesAmount) {
		var ret int32
		return ret
	}
	return *o.SalesAmount
}

// GetSalesAmountOk returns a tuple with the SalesAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemittedClientData) GetSalesAmountOk() (*int32, bool) {
	if o == nil || IsNil(o.SalesAmount) {
		return nil, false
	}
	return o.SalesAmount, true
}

// HasSalesAmount returns a boolean if a field has been set.
func (o *RemittedClientData) HasSalesAmount() bool {
	if o != nil && !IsNil(o.SalesAmount) {
		return true
	}

	return false
}

// SetSalesAmount gets a reference to the given int32 and assigns it to the SalesAmount field.
func (o *RemittedClientData) SetSalesAmount(v int32) {
	o.SalesAmount = &v
}

// GetSalesCount returns the SalesCount field value if set, zero value otherwise.
func (o *RemittedClientData) GetSalesCount() int32 {
	if o == nil || IsNil(o.SalesCount) {
		var ret int32
		return ret
	}
	return *o.SalesCount
}

// GetSalesCountOk returns a tuple with the SalesCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemittedClientData) GetSalesCountOk() (*int32, bool) {
	if o == nil || IsNil(o.SalesCount) {
		return nil, false
	}
	return o.SalesCount, true
}

// HasSalesCount returns a boolean if a field has been set.
func (o *RemittedClientData) HasSalesCount() bool {
	if o != nil && !IsNil(o.SalesCount) {
		return true
	}

	return false
}

// SetSalesCount gets a reference to the given int32 and assigns it to the SalesCount field.
func (o *RemittedClientData) SetSalesCount(v int32) {
	o.SalesCount = &v
}

// GetSettlementImplementation returns the SettlementImplementation field value if set, zero value otherwise.
func (o *RemittedClientData) GetSettlementImplementation() string {
	if o == nil || IsNil(o.SettlementImplementation) {
		var ret string
		return ret
	}
	return *o.SettlementImplementation
}

// GetSettlementImplementationOk returns a tuple with the SettlementImplementation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemittedClientData) GetSettlementImplementationOk() (*string, bool) {
	if o == nil || IsNil(o.SettlementImplementation) {
		return nil, false
	}
	return o.SettlementImplementation, true
}

// HasSettlementImplementation returns a boolean if a field has been set.
func (o *RemittedClientData) HasSettlementImplementation() bool {
	if o != nil && !IsNil(o.SettlementImplementation) {
		return true
	}

	return false
}

// SetSettlementImplementation gets a reference to the given string and assigns it to the SettlementImplementation field.
func (o *RemittedClientData) SetSettlementImplementation(v string) {
	o.SettlementImplementation = &v
}

// GetUuid returns the Uuid field value if set, zero value otherwise.
func (o *RemittedClientData) GetUuid() string {
	if o == nil || IsNil(o.Uuid) {
		var ret string
		return ret
	}
	return *o.Uuid
}

// GetUuidOk returns a tuple with the Uuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemittedClientData) GetUuidOk() (*string, bool) {
	if o == nil || IsNil(o.Uuid) {
		return nil, false
	}
	return o.Uuid, true
}

// HasUuid returns a boolean if a field has been set.
func (o *RemittedClientData) HasUuid() bool {
	if o != nil && !IsNil(o.Uuid) {
		return true
	}

	return false
}

// SetUuid gets a reference to the given string and assigns it to the Uuid field.
func (o *RemittedClientData) SetUuid(v string) {
	o.Uuid = &v
}

func (o RemittedClientData) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RemittedClientData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["batches"] = o.Batches
	if !IsNil(o.Clientid) {
		toSerialize["clientid"] = o.Clientid
	}
	if !IsNil(o.Date) {
		toSerialize["date"] = o.Date
	}
	if !IsNil(o.DateCreated) {
		toSerialize["date_created"] = o.DateCreated
	}
	if !IsNil(o.NetAmount) {
		toSerialize["net_amount"] = o.NetAmount
	}
	if !IsNil(o.ProcessedAmount) {
		toSerialize["processed_amount"] = o.ProcessedAmount
	}
	if !IsNil(o.ProcessedCount) {
		toSerialize["processed_count"] = o.ProcessedCount
	}
	if !IsNil(o.RefundAmount) {
		toSerialize["refund_amount"] = o.RefundAmount
	}
	if !IsNil(o.RefundCount) {
		toSerialize["refund_count"] = o.RefundCount
	}
	toSerialize["remittances"] = o.Remittances
	if !IsNil(o.SalesAmount) {
		toSerialize["sales_amount"] = o.SalesAmount
	}
	if !IsNil(o.SalesCount) {
		toSerialize["sales_count"] = o.SalesCount
	}
	if !IsNil(o.SettlementImplementation) {
		toSerialize["settlement_implementation"] = o.SettlementImplementation
	}
	if !IsNil(o.Uuid) {
		toSerialize["uuid"] = o.Uuid
	}
	return toSerialize, nil
}

func (o *RemittedClientData) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"batches",
		"remittances",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRemittedClientData := _RemittedClientData{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRemittedClientData)

	if err != nil {
		return err
	}

	*o = RemittedClientData(varRemittedClientData)

	return err
}

type NullableRemittedClientData struct {
	value *RemittedClientData
	isSet bool
}

func (v NullableRemittedClientData) Get() *RemittedClientData {
	return v.value
}

func (v *NullableRemittedClientData) Set(val *RemittedClientData) {
	v.value = val
	v.isSet = true
}

func (v NullableRemittedClientData) IsSet() bool {
	return v.isSet
}

func (v *NullableRemittedClientData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRemittedClientData(val *RemittedClientData) *NullableRemittedClientData {
	return &NullableRemittedClientData{value: val, isSet: true}
}

func (v NullableRemittedClientData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRemittedClientData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
