/*
CityPay Payment API

 Welcome to the CityPay API, a robust HTTP API payment solution designed for seamless server-to-server  transactional processing. Our API facilitates a wide array of payment operations, catering to diverse business needs.  Whether you're integrating Internet payments, handling Mail Order/Telephone Order (MOTO) transactions, managing  Subscriptions with Recurring and Continuous Authority payments, or navigating the complexities of 3-D Secure  authentication, our API is equipped to support your requirements. Additionally, we offer functionalities for  Authorisation, Refunding, Pre-Authorisation, Cancellation/Voids, and Completion processing, alongside the capability  for tokenised payments.  ## Compliance and Security Overview <aside class=\"notice\">   Ensuring the security of payment transactions and compliance with industry standards is paramount. Our API is    designed with stringent security measures and compliance protocols to safeguard sensitive information and meet    the rigorous requirements of Visa, MasterCard, and the PCI Security Standards Council. </aside>  ### Key Compliance and Security Measures  * **TLS Encryption**: All data transmissions must utilise TLS version 1.2 or higher, employing [strong cryptography](#enabled-tls-ciphers). Our infrastructure strictly enforces this requirement to maintain the integrity and confidentiality of data in transit. We conduct regular scans and assessments of our TLS endpoints to identify and mitigate vulnerabilities. * **Data Storage Prohibitions**: Storing sensitive cardholder data (CHD), such as the card security code (CSC) or primary account number (PAN), is strictly prohibited. Our API is designed to minimize your exposure to sensitive data, thereby reducing your compliance burden. * **Data Masking**: For consumer protection and compliance, full card numbers must not be displayed on receipts or any customer-facing materials. Our API automatically masks PANs, displaying only the last four digits to facilitate safe receipt generation. * **Network Scans**: If your application is web-based, regular scans of your hosting environment are mandatory to identify and rectify potential vulnerabilities. This proactive measure is crucial for maintaining a secure and compliant online presence. * **PCI Compliance**: Adherence to PCI DSS standards is not optional; it's a requirement for operating securely and legally in the payments ecosystem. For detailed information on compliance requirements and resources, please visit the PCI Security Standards Council website [https://www.pcisecuritystandards.org/](https://www.pcisecuritystandards.org/). * **Request Validation**: Our API includes mechanisms to verify the legitimacy of each request, ensuring it pertains to a valid account and originates from a trusted source. We leverage remote IP address verification alongside sophisticated application firewall technologies to thwart a wide array of common security threats.  ## Getting Started Before integrating with the CityPay API, ensure your application and development practices align with the outlined compliance and security measures. This preparatory step is crucial for a smooth integration process and the long-term success of your payment processing operations.  For further details on API endpoints, request/response formats, and code examples, proceed to the subsequent sections of our documentation. Our aim is to provide you with all the necessary tools and information to integrate our payment processing capabilities seamlessly into your application.  Thank you for choosing CityPay API. We look forward to supporting your payment processing needs with our secure, compliant, and versatile API solution.

API version: 6.6.40
Contact: support@citypay.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citypay

import (
	"bytes"
	"encoding/json"
	"fmt"
	"time"
)

// checks if the BatchTransactionResultModel type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BatchTransactionResultModel{}

// BatchTransactionResultModel struct for BatchTransactionResultModel
type BatchTransactionResultModel struct {
	// The card holder account id used for the transaction.
	AccountId string `json:"account_id"`
	// The amount of the transaction processed.
	Amount *int32 `json:"amount,omitempty"`
	// The authorisation code of a successful transaction.
	Authcode *string `json:"authcode,omitempty"`
	// The datetime that the transaction was processed.
	Datetime *time.Time `json:"datetime,omitempty"`
	// The identifier of the transaction.
	Identifier string `json:"identifier"`
	// A masked value of the card number used for processing displaying limited values that can be used on a receipt.
	Maskedpan *string `json:"maskedpan,omitempty"`
	// The merchant id of the transaction.
	Merchantid int32 `json:"merchantid"`
	// A response message pertaining to the transaction.
	Message string `json:"message"`
	// An integer result that indicates the outcome of the transaction. The Code value below maps to the result value  <table> <tr> <th>Code</th> <th>Abbrev</th> <th>Description</th> </tr> <tr><td>0</td><td>Declined</td><td>Declined</td></tr> <tr><td>1</td><td>Accepted</td><td>Accepted</td></tr> <tr><td>2</td><td>Rejected</td><td>Rejected</td></tr> <tr><td>3</td><td>Not Attempted</td><td>Not Attempted</td></tr> <tr><td>4</td><td>Referred</td><td>Referred</td></tr> <tr><td>5</td><td>PinRetry</td><td>Perform PIN Retry</td></tr> <tr><td>6</td><td>ForSigVer</td><td>Force Signature Verification</td></tr> <tr><td>7</td><td>Hold</td><td>Hold</td></tr> <tr><td>8</td><td>SecErr</td><td>Security Error</td></tr> <tr><td>9</td><td>CallAcq</td><td>Call Acquirer</td></tr> <tr><td>10</td><td>DNH</td><td>Do Not Honour</td></tr> <tr><td>11</td><td>RtnCrd</td><td>Retain Card</td></tr> <tr><td>12</td><td>ExprdCrd</td><td>Expired Card</td></tr> <tr><td>13</td><td>InvldCrd</td><td>Invalid Card No</td></tr> <tr><td>14</td><td>PinExcd</td><td>Pin Tries Exceeded</td></tr> <tr><td>15</td><td>PinInvld</td><td>Pin Invalid</td></tr> <tr><td>16</td><td>AuthReq</td><td>Authentication Required</td></tr> <tr><td>17</td><td>AuthenFail</td><td>Authentication Failed</td></tr> <tr><td>18</td><td>Verified</td><td>Card Verified</td></tr> <tr><td>19</td><td>Cancelled</td><td>Cancelled</td></tr> <tr><td>20</td><td>Un</td><td>Unknown</td></tr> <tr><td>21</td><td>Challenged</td><td>Challenged</td></tr> <tr><td>22</td><td>Decoupled</td><td>Decoupled</td></tr> <tr><td>23</td><td>Denied</td><td>Permission Denied</td></tr> </table>
	Result int32 `json:"result"`
	// A result code of the transaction identifying the result of the transaction for success, rejection or decline.
	ResultCode string `json:"result_code"`
	// The name of the card scheme of the transaction that processed the transaction such as Visa or MasterCard.
	Scheme *string `json:"scheme,omitempty"`
	// The name of the card scheme of the transaction such as VI or MC.
	SchemeId *string `json:"scheme_id,omitempty"`
	// A url containing a logo of the card scheme.
	SchemeLogo *string `json:"scheme_logo,omitempty"`
	// The resulting transaction number, ordered incrementally from 1 for every merchant_id. The value will default to less than 1 for transactions that do not have a transaction number issued.
	Transno *int32 `json:"transno,omitempty"`
}

type _BatchTransactionResultModel BatchTransactionResultModel

// NewBatchTransactionResultModel instantiates a new BatchTransactionResultModel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBatchTransactionResultModel(accountId string, identifier string, merchantid int32, message string, result int32, resultCode string) *BatchTransactionResultModel {
	this := BatchTransactionResultModel{}
	this.AccountId = accountId
	this.Identifier = identifier
	this.Merchantid = merchantid
	this.Message = message
	this.Result = result
	this.ResultCode = resultCode
	return &this
}

// NewBatchTransactionResultModelWithDefaults instantiates a new BatchTransactionResultModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBatchTransactionResultModelWithDefaults() *BatchTransactionResultModel {
	this := BatchTransactionResultModel{}
	return &this
}

// GetAccountId returns the AccountId field value
func (o *BatchTransactionResultModel) GetAccountId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AccountId
}

// GetAccountIdOk returns a tuple with the AccountId field value
// and a boolean to check if the value has been set.
func (o *BatchTransactionResultModel) GetAccountIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AccountId, true
}

// SetAccountId sets field value
func (o *BatchTransactionResultModel) SetAccountId(v string) {
	o.AccountId = v
}

// GetAmount returns the Amount field value if set, zero value otherwise.
func (o *BatchTransactionResultModel) GetAmount() int32 {
	if o == nil || IsNil(o.Amount) {
		var ret int32
		return ret
	}
	return *o.Amount
}

// GetAmountOk returns a tuple with the Amount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BatchTransactionResultModel) GetAmountOk() (*int32, bool) {
	if o == nil || IsNil(o.Amount) {
		return nil, false
	}
	return o.Amount, true
}

// HasAmount returns a boolean if a field has been set.
func (o *BatchTransactionResultModel) HasAmount() bool {
	if o != nil && !IsNil(o.Amount) {
		return true
	}

	return false
}

// SetAmount gets a reference to the given int32 and assigns it to the Amount field.
func (o *BatchTransactionResultModel) SetAmount(v int32) {
	o.Amount = &v
}

// GetAuthcode returns the Authcode field value if set, zero value otherwise.
func (o *BatchTransactionResultModel) GetAuthcode() string {
	if o == nil || IsNil(o.Authcode) {
		var ret string
		return ret
	}
	return *o.Authcode
}

// GetAuthcodeOk returns a tuple with the Authcode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BatchTransactionResultModel) GetAuthcodeOk() (*string, bool) {
	if o == nil || IsNil(o.Authcode) {
		return nil, false
	}
	return o.Authcode, true
}

// HasAuthcode returns a boolean if a field has been set.
func (o *BatchTransactionResultModel) HasAuthcode() bool {
	if o != nil && !IsNil(o.Authcode) {
		return true
	}

	return false
}

// SetAuthcode gets a reference to the given string and assigns it to the Authcode field.
func (o *BatchTransactionResultModel) SetAuthcode(v string) {
	o.Authcode = &v
}

// GetDatetime returns the Datetime field value if set, zero value otherwise.
func (o *BatchTransactionResultModel) GetDatetime() time.Time {
	if o == nil || IsNil(o.Datetime) {
		var ret time.Time
		return ret
	}
	return *o.Datetime
}

// GetDatetimeOk returns a tuple with the Datetime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BatchTransactionResultModel) GetDatetimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Datetime) {
		return nil, false
	}
	return o.Datetime, true
}

// HasDatetime returns a boolean if a field has been set.
func (o *BatchTransactionResultModel) HasDatetime() bool {
	if o != nil && !IsNil(o.Datetime) {
		return true
	}

	return false
}

// SetDatetime gets a reference to the given time.Time and assigns it to the Datetime field.
func (o *BatchTransactionResultModel) SetDatetime(v time.Time) {
	o.Datetime = &v
}

// GetIdentifier returns the Identifier field value
func (o *BatchTransactionResultModel) GetIdentifier() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Identifier
}

// GetIdentifierOk returns a tuple with the Identifier field value
// and a boolean to check if the value has been set.
func (o *BatchTransactionResultModel) GetIdentifierOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Identifier, true
}

// SetIdentifier sets field value
func (o *BatchTransactionResultModel) SetIdentifier(v string) {
	o.Identifier = v
}

// GetMaskedpan returns the Maskedpan field value if set, zero value otherwise.
func (o *BatchTransactionResultModel) GetMaskedpan() string {
	if o == nil || IsNil(o.Maskedpan) {
		var ret string
		return ret
	}
	return *o.Maskedpan
}

// GetMaskedpanOk returns a tuple with the Maskedpan field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BatchTransactionResultModel) GetMaskedpanOk() (*string, bool) {
	if o == nil || IsNil(o.Maskedpan) {
		return nil, false
	}
	return o.Maskedpan, true
}

// HasMaskedpan returns a boolean if a field has been set.
func (o *BatchTransactionResultModel) HasMaskedpan() bool {
	if o != nil && !IsNil(o.Maskedpan) {
		return true
	}

	return false
}

// SetMaskedpan gets a reference to the given string and assigns it to the Maskedpan field.
func (o *BatchTransactionResultModel) SetMaskedpan(v string) {
	o.Maskedpan = &v
}

// GetMerchantid returns the Merchantid field value
func (o *BatchTransactionResultModel) GetMerchantid() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Merchantid
}

// GetMerchantidOk returns a tuple with the Merchantid field value
// and a boolean to check if the value has been set.
func (o *BatchTransactionResultModel) GetMerchantidOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Merchantid, true
}

// SetMerchantid sets field value
func (o *BatchTransactionResultModel) SetMerchantid(v int32) {
	o.Merchantid = v
}

// GetMessage returns the Message field value
func (o *BatchTransactionResultModel) GetMessage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Message
}

// GetMessageOk returns a tuple with the Message field value
// and a boolean to check if the value has been set.
func (o *BatchTransactionResultModel) GetMessageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Message, true
}

// SetMessage sets field value
func (o *BatchTransactionResultModel) SetMessage(v string) {
	o.Message = v
}

// GetResult returns the Result field value
func (o *BatchTransactionResultModel) GetResult() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Result
}

// GetResultOk returns a tuple with the Result field value
// and a boolean to check if the value has been set.
func (o *BatchTransactionResultModel) GetResultOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Result, true
}

// SetResult sets field value
func (o *BatchTransactionResultModel) SetResult(v int32) {
	o.Result = v
}

// GetResultCode returns the ResultCode field value
func (o *BatchTransactionResultModel) GetResultCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ResultCode
}

// GetResultCodeOk returns a tuple with the ResultCode field value
// and a boolean to check if the value has been set.
func (o *BatchTransactionResultModel) GetResultCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ResultCode, true
}

// SetResultCode sets field value
func (o *BatchTransactionResultModel) SetResultCode(v string) {
	o.ResultCode = v
}

// GetScheme returns the Scheme field value if set, zero value otherwise.
func (o *BatchTransactionResultModel) GetScheme() string {
	if o == nil || IsNil(o.Scheme) {
		var ret string
		return ret
	}
	return *o.Scheme
}

// GetSchemeOk returns a tuple with the Scheme field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BatchTransactionResultModel) GetSchemeOk() (*string, bool) {
	if o == nil || IsNil(o.Scheme) {
		return nil, false
	}
	return o.Scheme, true
}

// HasScheme returns a boolean if a field has been set.
func (o *BatchTransactionResultModel) HasScheme() bool {
	if o != nil && !IsNil(o.Scheme) {
		return true
	}

	return false
}

// SetScheme gets a reference to the given string and assigns it to the Scheme field.
func (o *BatchTransactionResultModel) SetScheme(v string) {
	o.Scheme = &v
}

// GetSchemeId returns the SchemeId field value if set, zero value otherwise.
func (o *BatchTransactionResultModel) GetSchemeId() string {
	if o == nil || IsNil(o.SchemeId) {
		var ret string
		return ret
	}
	return *o.SchemeId
}

// GetSchemeIdOk returns a tuple with the SchemeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BatchTransactionResultModel) GetSchemeIdOk() (*string, bool) {
	if o == nil || IsNil(o.SchemeId) {
		return nil, false
	}
	return o.SchemeId, true
}

// HasSchemeId returns a boolean if a field has been set.
func (o *BatchTransactionResultModel) HasSchemeId() bool {
	if o != nil && !IsNil(o.SchemeId) {
		return true
	}

	return false
}

// SetSchemeId gets a reference to the given string and assigns it to the SchemeId field.
func (o *BatchTransactionResultModel) SetSchemeId(v string) {
	o.SchemeId = &v
}

// GetSchemeLogo returns the SchemeLogo field value if set, zero value otherwise.
func (o *BatchTransactionResultModel) GetSchemeLogo() string {
	if o == nil || IsNil(o.SchemeLogo) {
		var ret string
		return ret
	}
	return *o.SchemeLogo
}

// GetSchemeLogoOk returns a tuple with the SchemeLogo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BatchTransactionResultModel) GetSchemeLogoOk() (*string, bool) {
	if o == nil || IsNil(o.SchemeLogo) {
		return nil, false
	}
	return o.SchemeLogo, true
}

// HasSchemeLogo returns a boolean if a field has been set.
func (o *BatchTransactionResultModel) HasSchemeLogo() bool {
	if o != nil && !IsNil(o.SchemeLogo) {
		return true
	}

	return false
}

// SetSchemeLogo gets a reference to the given string and assigns it to the SchemeLogo field.
func (o *BatchTransactionResultModel) SetSchemeLogo(v string) {
	o.SchemeLogo = &v
}

// GetTransno returns the Transno field value if set, zero value otherwise.
func (o *BatchTransactionResultModel) GetTransno() int32 {
	if o == nil || IsNil(o.Transno) {
		var ret int32
		return ret
	}
	return *o.Transno
}

// GetTransnoOk returns a tuple with the Transno field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BatchTransactionResultModel) GetTransnoOk() (*int32, bool) {
	if o == nil || IsNil(o.Transno) {
		return nil, false
	}
	return o.Transno, true
}

// HasTransno returns a boolean if a field has been set.
func (o *BatchTransactionResultModel) HasTransno() bool {
	if o != nil && !IsNil(o.Transno) {
		return true
	}

	return false
}

// SetTransno gets a reference to the given int32 and assigns it to the Transno field.
func (o *BatchTransactionResultModel) SetTransno(v int32) {
	o.Transno = &v
}

func (o BatchTransactionResultModel) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BatchTransactionResultModel) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["account_id"] = o.AccountId
	if !IsNil(o.Amount) {
		toSerialize["amount"] = o.Amount
	}
	if !IsNil(o.Authcode) {
		toSerialize["authcode"] = o.Authcode
	}
	if !IsNil(o.Datetime) {
		toSerialize["datetime"] = o.Datetime
	}
	toSerialize["identifier"] = o.Identifier
	if !IsNil(o.Maskedpan) {
		toSerialize["maskedpan"] = o.Maskedpan
	}
	toSerialize["merchantid"] = o.Merchantid
	toSerialize["message"] = o.Message
	toSerialize["result"] = o.Result
	toSerialize["result_code"] = o.ResultCode
	if !IsNil(o.Scheme) {
		toSerialize["scheme"] = o.Scheme
	}
	if !IsNil(o.SchemeId) {
		toSerialize["scheme_id"] = o.SchemeId
	}
	if !IsNil(o.SchemeLogo) {
		toSerialize["scheme_logo"] = o.SchemeLogo
	}
	if !IsNil(o.Transno) {
		toSerialize["transno"] = o.Transno
	}
	return toSerialize, nil
}

func (o *BatchTransactionResultModel) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"account_id",
		"identifier",
		"merchantid",
		"message",
		"result",
		"result_code",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varBatchTransactionResultModel := _BatchTransactionResultModel{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varBatchTransactionResultModel)

	if err != nil {
		return err
	}

	*o = BatchTransactionResultModel(varBatchTransactionResultModel)

	return err
}

type NullableBatchTransactionResultModel struct {
	value *BatchTransactionResultModel
	isSet bool
}

func (v NullableBatchTransactionResultModel) Get() *BatchTransactionResultModel {
	return v.value
}

func (v *NullableBatchTransactionResultModel) Set(val *BatchTransactionResultModel) {
	v.value = val
	v.isSet = true
}

func (v NullableBatchTransactionResultModel) IsSet() bool {
	return v.isSet
}

func (v *NullableBatchTransactionResultModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBatchTransactionResultModel(val *BatchTransactionResultModel) *NullableBatchTransactionResultModel {
	return &NullableBatchTransactionResultModel{value: val, isSet: true}
}

func (v NullableBatchTransactionResultModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBatchTransactionResultModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
