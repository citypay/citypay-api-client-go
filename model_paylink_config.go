/*
CityPay Payment API

 Welcome to the CityPay API, a robust HTTP API payment solution designed for seamless server-to-server  transactional processing. Our API facilitates a wide array of payment operations, catering to diverse business needs.  Whether you're integrating Internet payments, handling Mail Order/Telephone Order (MOTO) transactions, managing  Subscriptions with Recurring and Continuous Authority payments, or navigating the complexities of 3-D Secure  authentication, our API is equipped to support your requirements. Additionally, we offer functionalities for  Authorisation, Refunding, Pre-Authorisation, Cancellation/Voids, and Completion processing, alongside the capability  for tokenised payments.  ## Compliance and Security Overview <aside class=\"notice\">   Ensuring the security of payment transactions and compliance with industry standards is paramount. Our API is    designed with stringent security measures and compliance protocols to safeguard sensitive information and meet    the rigorous requirements of Visa, MasterCard, and the PCI Security Standards Council. </aside>  ### Key Compliance and Security Measures  * **TLS Encryption**: All data transmissions must utilise TLS version 1.2 or higher, employing [strong cryptography](#enabled-tls-ciphers). Our infrastructure strictly enforces this requirement to maintain the integrity and confidentiality of data in transit. We conduct regular scans and assessments of our TLS endpoints to identify and mitigate vulnerabilities. * **Data Storage Prohibitions**: Storing sensitive cardholder data (CHD), such as the card security code (CSC) or primary account number (PAN), is strictly prohibited. Our API is designed to minimize your exposure to sensitive data, thereby reducing your compliance burden. * **Data Masking**: For consumer protection and compliance, full card numbers must not be displayed on receipts or any customer-facing materials. Our API automatically masks PANs, displaying only the last four digits to facilitate safe receipt generation. * **Network Scans**: If your application is web-based, regular scans of your hosting environment are mandatory to identify and rectify potential vulnerabilities. This proactive measure is crucial for maintaining a secure and compliant online presence. * **PCI Compliance**: Adherence to PCI DSS standards is not optional; it's a requirement for operating securely and legally in the payments ecosystem. For detailed information on compliance requirements and resources, please visit the PCI Security Standards Council website [https://www.pcisecuritystandards.org/](https://www.pcisecuritystandards.org/). * **Request Validation**: Our API includes mechanisms to verify the legitimacy of each request, ensuring it pertains to a valid account and originates from a trusted source. We leverage remote IP address verification alongside sophisticated application firewall technologies to thwart a wide array of common security threats.  ## Getting Started Before integrating with the CityPay API, ensure your application and development practices align with the outlined compliance and security measures. This preparatory step is crucial for a smooth integration process and the long-term success of your payment processing operations.  For further details on API endpoints, request/response formats, and code examples, proceed to the subsequent sections of our documentation. Our aim is to provide you with all the necessary tools and information to integrate our payment processing capabilities seamlessly into your application.  Thank you for choosing CityPay API. We look forward to supporting your payment processing needs with our secure, compliant, and versatile API solution.

API version: 6.6.40
Contact: support@citypay.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citypay

import (
	"encoding/json"
)

// checks if the PaylinkConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PaylinkConfig{}

// PaylinkConfig struct for PaylinkConfig
type PaylinkConfig struct {
	// Specifies the approach to be adopted by the Paylink form when displaying a 3-D Secure challenge window. The values may be  iframe: shows the 3-D Secure ACS in an iframe dialog, neatly embedding it in Paylink. This provides a more seamless flow for the cardholder who is able to validate and authenticate their card using a dialog provided by their card issuer.  inline: an inline mode transfers the full browser window to the authentication server, allowing the payment cardholder to see their payment card issuer's URL and the certificate status in the browser. If you request an iframe mode and the browser width is deemed as being small (< 768px) then an inline mode will be enforced. This is to ensure that mobile users have an improved user experience.
	AcsMode      *string              `json:"acs_mode,omitempty"`
	CustomParams []PaylinkCustomParam `json:"custom_params,omitempty"`
	// Directly specify the merchant descriptor used for the transaction to be displayed on the payment page.
	Descriptor *string `json:"descriptor,omitempty"`
	// Specifies a period of time in seconds after which the token cannot be used. A value of 0 defines that the token will never expire. The API will convert an expiry time based on a string value. For instance:   s - Time in seconds, for example 90s.   m - Time in minutes, for example 20m.   h - Time in hours, for example 4h.   w - Time in weeks, for example 4w.   M - Time in months, for example 6M.   y - Time in years, for example 1y.   Defaults to 30 minutes.
	ExpireIn   *string                  `json:"expire_in,omitempty"`
	FieldGuard []PaylinkFieldGuardModel `json:"field_guard,omitempty"`
	LockParams []string                 `json:"lock_params,omitempty"`
	// A URL of a logo to include in the form. The URL should be delivered using HTTPS.
	MerchLogo *string `json:"merch_logo,omitempty"`
	// A URL of the merchant terms and conditions for payment. If a value is supplied, a checkbox will be required to be completed to confirm that the cardholder agrees to these conditions before payment. A modal dialogue is displayed with the content of the conditions displayed.
	MerchTerms         *string              `json:"merch_terms,omitempty"`
	Options            []string             `json:"options,omitempty"`
	PartPayments       *PaylinkPartPayments `json:"part_payments,omitempty"`
	PassThroughData    *map[string]string   `json:"pass_through_data,omitempty"`
	PassThroughHeaders *map[string]string   `json:"pass_through_headers,omitempty"`
	// Specifies a URL to use for a call back when the payment is completed. see Postback Handling }.
	Postback *string `json:"postback,omitempty"`
	// A password to be added to the postback for HTTP Basic Authentication.
	PostbackPassword *string `json:"postback_password,omitempty"`
	// The policy setting for the postback see Postback Handling.
	PostbackPolicy *string `json:"postback_policy,omitempty"`
	// A username to be added to the postback for HTTP Basic Authentication.
	PostbackUsername *string `json:"postback_username,omitempty"`
	// A value which can delay the redirection in seconds. A value of 0 will redirect immediately.
	RedirectDelay *int32 `json:"redirect_delay,omitempty"`
	// A URL which the browser is redirected to on non-completion of a transaction.
	RedirectFailure *string `json:"redirect_failure,omitempty"`
	// A URL which the browser is redirected to on authorisation of a transaction.
	RedirectSuccess *string `json:"redirect_success,omitempty"`
	// The Paylink renderer engine to use.
	Renderer *string `json:"renderer,omitempty"`
	// If a value of true is specified, any redirection will include the transaction result in parameters. It is recommended to use the postback integration rather than redirection parameters.
	ReturnParams *bool      `json:"return_params,omitempty"`
	Ui           *PaylinkUI `json:"ui,omitempty"`
}

// NewPaylinkConfig instantiates a new PaylinkConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPaylinkConfig() *PaylinkConfig {
	this := PaylinkConfig{}
	return &this
}

// NewPaylinkConfigWithDefaults instantiates a new PaylinkConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPaylinkConfigWithDefaults() *PaylinkConfig {
	this := PaylinkConfig{}
	return &this
}

// GetAcsMode returns the AcsMode field value if set, zero value otherwise.
func (o *PaylinkConfig) GetAcsMode() string {
	if o == nil || IsNil(o.AcsMode) {
		var ret string
		return ret
	}
	return *o.AcsMode
}

// GetAcsModeOk returns a tuple with the AcsMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaylinkConfig) GetAcsModeOk() (*string, bool) {
	if o == nil || IsNil(o.AcsMode) {
		return nil, false
	}
	return o.AcsMode, true
}

// HasAcsMode returns a boolean if a field has been set.
func (o *PaylinkConfig) HasAcsMode() bool {
	if o != nil && !IsNil(o.AcsMode) {
		return true
	}

	return false
}

// SetAcsMode gets a reference to the given string and assigns it to the AcsMode field.
func (o *PaylinkConfig) SetAcsMode(v string) {
	o.AcsMode = &v
}

// GetCustomParams returns the CustomParams field value if set, zero value otherwise.
func (o *PaylinkConfig) GetCustomParams() []PaylinkCustomParam {
	if o == nil || IsNil(o.CustomParams) {
		var ret []PaylinkCustomParam
		return ret
	}
	return o.CustomParams
}

// GetCustomParamsOk returns a tuple with the CustomParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaylinkConfig) GetCustomParamsOk() ([]PaylinkCustomParam, bool) {
	if o == nil || IsNil(o.CustomParams) {
		return nil, false
	}
	return o.CustomParams, true
}

// HasCustomParams returns a boolean if a field has been set.
func (o *PaylinkConfig) HasCustomParams() bool {
	if o != nil && !IsNil(o.CustomParams) {
		return true
	}

	return false
}

// SetCustomParams gets a reference to the given []PaylinkCustomParam and assigns it to the CustomParams field.
func (o *PaylinkConfig) SetCustomParams(v []PaylinkCustomParam) {
	o.CustomParams = v
}

// GetDescriptor returns the Descriptor field value if set, zero value otherwise.
func (o *PaylinkConfig) GetDescriptor() string {
	if o == nil || IsNil(o.Descriptor) {
		var ret string
		return ret
	}
	return *o.Descriptor
}

// GetDescriptorOk returns a tuple with the Descriptor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaylinkConfig) GetDescriptorOk() (*string, bool) {
	if o == nil || IsNil(o.Descriptor) {
		return nil, false
	}
	return o.Descriptor, true
}

// HasDescriptor returns a boolean if a field has been set.
func (o *PaylinkConfig) HasDescriptor() bool {
	if o != nil && !IsNil(o.Descriptor) {
		return true
	}

	return false
}

// SetDescriptor gets a reference to the given string and assigns it to the Descriptor field.
func (o *PaylinkConfig) SetDescriptor(v string) {
	o.Descriptor = &v
}

// GetExpireIn returns the ExpireIn field value if set, zero value otherwise.
func (o *PaylinkConfig) GetExpireIn() string {
	if o == nil || IsNil(o.ExpireIn) {
		var ret string
		return ret
	}
	return *o.ExpireIn
}

// GetExpireInOk returns a tuple with the ExpireIn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaylinkConfig) GetExpireInOk() (*string, bool) {
	if o == nil || IsNil(o.ExpireIn) {
		return nil, false
	}
	return o.ExpireIn, true
}

// HasExpireIn returns a boolean if a field has been set.
func (o *PaylinkConfig) HasExpireIn() bool {
	if o != nil && !IsNil(o.ExpireIn) {
		return true
	}

	return false
}

// SetExpireIn gets a reference to the given string and assigns it to the ExpireIn field.
func (o *PaylinkConfig) SetExpireIn(v string) {
	o.ExpireIn = &v
}

// GetFieldGuard returns the FieldGuard field value if set, zero value otherwise.
func (o *PaylinkConfig) GetFieldGuard() []PaylinkFieldGuardModel {
	if o == nil || IsNil(o.FieldGuard) {
		var ret []PaylinkFieldGuardModel
		return ret
	}
	return o.FieldGuard
}

// GetFieldGuardOk returns a tuple with the FieldGuard field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaylinkConfig) GetFieldGuardOk() ([]PaylinkFieldGuardModel, bool) {
	if o == nil || IsNil(o.FieldGuard) {
		return nil, false
	}
	return o.FieldGuard, true
}

// HasFieldGuard returns a boolean if a field has been set.
func (o *PaylinkConfig) HasFieldGuard() bool {
	if o != nil && !IsNil(o.FieldGuard) {
		return true
	}

	return false
}

// SetFieldGuard gets a reference to the given []PaylinkFieldGuardModel and assigns it to the FieldGuard field.
func (o *PaylinkConfig) SetFieldGuard(v []PaylinkFieldGuardModel) {
	o.FieldGuard = v
}

// GetLockParams returns the LockParams field value if set, zero value otherwise.
func (o *PaylinkConfig) GetLockParams() []string {
	if o == nil || IsNil(o.LockParams) {
		var ret []string
		return ret
	}
	return o.LockParams
}

// GetLockParamsOk returns a tuple with the LockParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaylinkConfig) GetLockParamsOk() ([]string, bool) {
	if o == nil || IsNil(o.LockParams) {
		return nil, false
	}
	return o.LockParams, true
}

// HasLockParams returns a boolean if a field has been set.
func (o *PaylinkConfig) HasLockParams() bool {
	if o != nil && !IsNil(o.LockParams) {
		return true
	}

	return false
}

// SetLockParams gets a reference to the given []string and assigns it to the LockParams field.
func (o *PaylinkConfig) SetLockParams(v []string) {
	o.LockParams = v
}

// GetMerchLogo returns the MerchLogo field value if set, zero value otherwise.
func (o *PaylinkConfig) GetMerchLogo() string {
	if o == nil || IsNil(o.MerchLogo) {
		var ret string
		return ret
	}
	return *o.MerchLogo
}

// GetMerchLogoOk returns a tuple with the MerchLogo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaylinkConfig) GetMerchLogoOk() (*string, bool) {
	if o == nil || IsNil(o.MerchLogo) {
		return nil, false
	}
	return o.MerchLogo, true
}

// HasMerchLogo returns a boolean if a field has been set.
func (o *PaylinkConfig) HasMerchLogo() bool {
	if o != nil && !IsNil(o.MerchLogo) {
		return true
	}

	return false
}

// SetMerchLogo gets a reference to the given string and assigns it to the MerchLogo field.
func (o *PaylinkConfig) SetMerchLogo(v string) {
	o.MerchLogo = &v
}

// GetMerchTerms returns the MerchTerms field value if set, zero value otherwise.
func (o *PaylinkConfig) GetMerchTerms() string {
	if o == nil || IsNil(o.MerchTerms) {
		var ret string
		return ret
	}
	return *o.MerchTerms
}

// GetMerchTermsOk returns a tuple with the MerchTerms field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaylinkConfig) GetMerchTermsOk() (*string, bool) {
	if o == nil || IsNil(o.MerchTerms) {
		return nil, false
	}
	return o.MerchTerms, true
}

// HasMerchTerms returns a boolean if a field has been set.
func (o *PaylinkConfig) HasMerchTerms() bool {
	if o != nil && !IsNil(o.MerchTerms) {
		return true
	}

	return false
}

// SetMerchTerms gets a reference to the given string and assigns it to the MerchTerms field.
func (o *PaylinkConfig) SetMerchTerms(v string) {
	o.MerchTerms = &v
}

// GetOptions returns the Options field value if set, zero value otherwise.
func (o *PaylinkConfig) GetOptions() []string {
	if o == nil || IsNil(o.Options) {
		var ret []string
		return ret
	}
	return o.Options
}

// GetOptionsOk returns a tuple with the Options field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaylinkConfig) GetOptionsOk() ([]string, bool) {
	if o == nil || IsNil(o.Options) {
		return nil, false
	}
	return o.Options, true
}

// HasOptions returns a boolean if a field has been set.
func (o *PaylinkConfig) HasOptions() bool {
	if o != nil && !IsNil(o.Options) {
		return true
	}

	return false
}

// SetOptions gets a reference to the given []string and assigns it to the Options field.
func (o *PaylinkConfig) SetOptions(v []string) {
	o.Options = v
}

// GetPartPayments returns the PartPayments field value if set, zero value otherwise.
func (o *PaylinkConfig) GetPartPayments() PaylinkPartPayments {
	if o == nil || IsNil(o.PartPayments) {
		var ret PaylinkPartPayments
		return ret
	}
	return *o.PartPayments
}

// GetPartPaymentsOk returns a tuple with the PartPayments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaylinkConfig) GetPartPaymentsOk() (*PaylinkPartPayments, bool) {
	if o == nil || IsNil(o.PartPayments) {
		return nil, false
	}
	return o.PartPayments, true
}

// HasPartPayments returns a boolean if a field has been set.
func (o *PaylinkConfig) HasPartPayments() bool {
	if o != nil && !IsNil(o.PartPayments) {
		return true
	}

	return false
}

// SetPartPayments gets a reference to the given PaylinkPartPayments and assigns it to the PartPayments field.
func (o *PaylinkConfig) SetPartPayments(v PaylinkPartPayments) {
	o.PartPayments = &v
}

// GetPassThroughData returns the PassThroughData field value if set, zero value otherwise.
func (o *PaylinkConfig) GetPassThroughData() map[string]string {
	if o == nil || IsNil(o.PassThroughData) {
		var ret map[string]string
		return ret
	}
	return *o.PassThroughData
}

// GetPassThroughDataOk returns a tuple with the PassThroughData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaylinkConfig) GetPassThroughDataOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.PassThroughData) {
		return nil, false
	}
	return o.PassThroughData, true
}

// HasPassThroughData returns a boolean if a field has been set.
func (o *PaylinkConfig) HasPassThroughData() bool {
	if o != nil && !IsNil(o.PassThroughData) {
		return true
	}

	return false
}

// SetPassThroughData gets a reference to the given map[string]string and assigns it to the PassThroughData field.
func (o *PaylinkConfig) SetPassThroughData(v map[string]string) {
	o.PassThroughData = &v
}

// GetPassThroughHeaders returns the PassThroughHeaders field value if set, zero value otherwise.
func (o *PaylinkConfig) GetPassThroughHeaders() map[string]string {
	if o == nil || IsNil(o.PassThroughHeaders) {
		var ret map[string]string
		return ret
	}
	return *o.PassThroughHeaders
}

// GetPassThroughHeadersOk returns a tuple with the PassThroughHeaders field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaylinkConfig) GetPassThroughHeadersOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.PassThroughHeaders) {
		return nil, false
	}
	return o.PassThroughHeaders, true
}

// HasPassThroughHeaders returns a boolean if a field has been set.
func (o *PaylinkConfig) HasPassThroughHeaders() bool {
	if o != nil && !IsNil(o.PassThroughHeaders) {
		return true
	}

	return false
}

// SetPassThroughHeaders gets a reference to the given map[string]string and assigns it to the PassThroughHeaders field.
func (o *PaylinkConfig) SetPassThroughHeaders(v map[string]string) {
	o.PassThroughHeaders = &v
}

// GetPostback returns the Postback field value if set, zero value otherwise.
func (o *PaylinkConfig) GetPostback() string {
	if o == nil || IsNil(o.Postback) {
		var ret string
		return ret
	}
	return *o.Postback
}

// GetPostbackOk returns a tuple with the Postback field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaylinkConfig) GetPostbackOk() (*string, bool) {
	if o == nil || IsNil(o.Postback) {
		return nil, false
	}
	return o.Postback, true
}

// HasPostback returns a boolean if a field has been set.
func (o *PaylinkConfig) HasPostback() bool {
	if o != nil && !IsNil(o.Postback) {
		return true
	}

	return false
}

// SetPostback gets a reference to the given string and assigns it to the Postback field.
func (o *PaylinkConfig) SetPostback(v string) {
	o.Postback = &v
}

// GetPostbackPassword returns the PostbackPassword field value if set, zero value otherwise.
func (o *PaylinkConfig) GetPostbackPassword() string {
	if o == nil || IsNil(o.PostbackPassword) {
		var ret string
		return ret
	}
	return *o.PostbackPassword
}

// GetPostbackPasswordOk returns a tuple with the PostbackPassword field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaylinkConfig) GetPostbackPasswordOk() (*string, bool) {
	if o == nil || IsNil(o.PostbackPassword) {
		return nil, false
	}
	return o.PostbackPassword, true
}

// HasPostbackPassword returns a boolean if a field has been set.
func (o *PaylinkConfig) HasPostbackPassword() bool {
	if o != nil && !IsNil(o.PostbackPassword) {
		return true
	}

	return false
}

// SetPostbackPassword gets a reference to the given string and assigns it to the PostbackPassword field.
func (o *PaylinkConfig) SetPostbackPassword(v string) {
	o.PostbackPassword = &v
}

// GetPostbackPolicy returns the PostbackPolicy field value if set, zero value otherwise.
func (o *PaylinkConfig) GetPostbackPolicy() string {
	if o == nil || IsNil(o.PostbackPolicy) {
		var ret string
		return ret
	}
	return *o.PostbackPolicy
}

// GetPostbackPolicyOk returns a tuple with the PostbackPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaylinkConfig) GetPostbackPolicyOk() (*string, bool) {
	if o == nil || IsNil(o.PostbackPolicy) {
		return nil, false
	}
	return o.PostbackPolicy, true
}

// HasPostbackPolicy returns a boolean if a field has been set.
func (o *PaylinkConfig) HasPostbackPolicy() bool {
	if o != nil && !IsNil(o.PostbackPolicy) {
		return true
	}

	return false
}

// SetPostbackPolicy gets a reference to the given string and assigns it to the PostbackPolicy field.
func (o *PaylinkConfig) SetPostbackPolicy(v string) {
	o.PostbackPolicy = &v
}

// GetPostbackUsername returns the PostbackUsername field value if set, zero value otherwise.
func (o *PaylinkConfig) GetPostbackUsername() string {
	if o == nil || IsNil(o.PostbackUsername) {
		var ret string
		return ret
	}
	return *o.PostbackUsername
}

// GetPostbackUsernameOk returns a tuple with the PostbackUsername field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaylinkConfig) GetPostbackUsernameOk() (*string, bool) {
	if o == nil || IsNil(o.PostbackUsername) {
		return nil, false
	}
	return o.PostbackUsername, true
}

// HasPostbackUsername returns a boolean if a field has been set.
func (o *PaylinkConfig) HasPostbackUsername() bool {
	if o != nil && !IsNil(o.PostbackUsername) {
		return true
	}

	return false
}

// SetPostbackUsername gets a reference to the given string and assigns it to the PostbackUsername field.
func (o *PaylinkConfig) SetPostbackUsername(v string) {
	o.PostbackUsername = &v
}

// GetRedirectDelay returns the RedirectDelay field value if set, zero value otherwise.
func (o *PaylinkConfig) GetRedirectDelay() int32 {
	if o == nil || IsNil(o.RedirectDelay) {
		var ret int32
		return ret
	}
	return *o.RedirectDelay
}

// GetRedirectDelayOk returns a tuple with the RedirectDelay field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaylinkConfig) GetRedirectDelayOk() (*int32, bool) {
	if o == nil || IsNil(o.RedirectDelay) {
		return nil, false
	}
	return o.RedirectDelay, true
}

// HasRedirectDelay returns a boolean if a field has been set.
func (o *PaylinkConfig) HasRedirectDelay() bool {
	if o != nil && !IsNil(o.RedirectDelay) {
		return true
	}

	return false
}

// SetRedirectDelay gets a reference to the given int32 and assigns it to the RedirectDelay field.
func (o *PaylinkConfig) SetRedirectDelay(v int32) {
	o.RedirectDelay = &v
}

// GetRedirectFailure returns the RedirectFailure field value if set, zero value otherwise.
func (o *PaylinkConfig) GetRedirectFailure() string {
	if o == nil || IsNil(o.RedirectFailure) {
		var ret string
		return ret
	}
	return *o.RedirectFailure
}

// GetRedirectFailureOk returns a tuple with the RedirectFailure field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaylinkConfig) GetRedirectFailureOk() (*string, bool) {
	if o == nil || IsNil(o.RedirectFailure) {
		return nil, false
	}
	return o.RedirectFailure, true
}

// HasRedirectFailure returns a boolean if a field has been set.
func (o *PaylinkConfig) HasRedirectFailure() bool {
	if o != nil && !IsNil(o.RedirectFailure) {
		return true
	}

	return false
}

// SetRedirectFailure gets a reference to the given string and assigns it to the RedirectFailure field.
func (o *PaylinkConfig) SetRedirectFailure(v string) {
	o.RedirectFailure = &v
}

// GetRedirectSuccess returns the RedirectSuccess field value if set, zero value otherwise.
func (o *PaylinkConfig) GetRedirectSuccess() string {
	if o == nil || IsNil(o.RedirectSuccess) {
		var ret string
		return ret
	}
	return *o.RedirectSuccess
}

// GetRedirectSuccessOk returns a tuple with the RedirectSuccess field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaylinkConfig) GetRedirectSuccessOk() (*string, bool) {
	if o == nil || IsNil(o.RedirectSuccess) {
		return nil, false
	}
	return o.RedirectSuccess, true
}

// HasRedirectSuccess returns a boolean if a field has been set.
func (o *PaylinkConfig) HasRedirectSuccess() bool {
	if o != nil && !IsNil(o.RedirectSuccess) {
		return true
	}

	return false
}

// SetRedirectSuccess gets a reference to the given string and assigns it to the RedirectSuccess field.
func (o *PaylinkConfig) SetRedirectSuccess(v string) {
	o.RedirectSuccess = &v
}

// GetRenderer returns the Renderer field value if set, zero value otherwise.
func (o *PaylinkConfig) GetRenderer() string {
	if o == nil || IsNil(o.Renderer) {
		var ret string
		return ret
	}
	return *o.Renderer
}

// GetRendererOk returns a tuple with the Renderer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaylinkConfig) GetRendererOk() (*string, bool) {
	if o == nil || IsNil(o.Renderer) {
		return nil, false
	}
	return o.Renderer, true
}

// HasRenderer returns a boolean if a field has been set.
func (o *PaylinkConfig) HasRenderer() bool {
	if o != nil && !IsNil(o.Renderer) {
		return true
	}

	return false
}

// SetRenderer gets a reference to the given string and assigns it to the Renderer field.
func (o *PaylinkConfig) SetRenderer(v string) {
	o.Renderer = &v
}

// GetReturnParams returns the ReturnParams field value if set, zero value otherwise.
func (o *PaylinkConfig) GetReturnParams() bool {
	if o == nil || IsNil(o.ReturnParams) {
		var ret bool
		return ret
	}
	return *o.ReturnParams
}

// GetReturnParamsOk returns a tuple with the ReturnParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaylinkConfig) GetReturnParamsOk() (*bool, bool) {
	if o == nil || IsNil(o.ReturnParams) {
		return nil, false
	}
	return o.ReturnParams, true
}

// HasReturnParams returns a boolean if a field has been set.
func (o *PaylinkConfig) HasReturnParams() bool {
	if o != nil && !IsNil(o.ReturnParams) {
		return true
	}

	return false
}

// SetReturnParams gets a reference to the given bool and assigns it to the ReturnParams field.
func (o *PaylinkConfig) SetReturnParams(v bool) {
	o.ReturnParams = &v
}

// GetUi returns the Ui field value if set, zero value otherwise.
func (o *PaylinkConfig) GetUi() PaylinkUI {
	if o == nil || IsNil(o.Ui) {
		var ret PaylinkUI
		return ret
	}
	return *o.Ui
}

// GetUiOk returns a tuple with the Ui field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaylinkConfig) GetUiOk() (*PaylinkUI, bool) {
	if o == nil || IsNil(o.Ui) {
		return nil, false
	}
	return o.Ui, true
}

// HasUi returns a boolean if a field has been set.
func (o *PaylinkConfig) HasUi() bool {
	if o != nil && !IsNil(o.Ui) {
		return true
	}

	return false
}

// SetUi gets a reference to the given PaylinkUI and assigns it to the Ui field.
func (o *PaylinkConfig) SetUi(v PaylinkUI) {
	o.Ui = &v
}

func (o PaylinkConfig) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PaylinkConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AcsMode) {
		toSerialize["acs_mode"] = o.AcsMode
	}
	if !IsNil(o.CustomParams) {
		toSerialize["custom_params"] = o.CustomParams
	}
	if !IsNil(o.Descriptor) {
		toSerialize["descriptor"] = o.Descriptor
	}
	if !IsNil(o.ExpireIn) {
		toSerialize["expire_in"] = o.ExpireIn
	}
	if !IsNil(o.FieldGuard) {
		toSerialize["field_guard"] = o.FieldGuard
	}
	if !IsNil(o.LockParams) {
		toSerialize["lock_params"] = o.LockParams
	}
	if !IsNil(o.MerchLogo) {
		toSerialize["merch_logo"] = o.MerchLogo
	}
	if !IsNil(o.MerchTerms) {
		toSerialize["merch_terms"] = o.MerchTerms
	}
	if !IsNil(o.Options) {
		toSerialize["options"] = o.Options
	}
	if !IsNil(o.PartPayments) {
		toSerialize["part_payments"] = o.PartPayments
	}
	if !IsNil(o.PassThroughData) {
		toSerialize["pass_through_data"] = o.PassThroughData
	}
	if !IsNil(o.PassThroughHeaders) {
		toSerialize["pass_through_headers"] = o.PassThroughHeaders
	}
	if !IsNil(o.Postback) {
		toSerialize["postback"] = o.Postback
	}
	if !IsNil(o.PostbackPassword) {
		toSerialize["postback_password"] = o.PostbackPassword
	}
	if !IsNil(o.PostbackPolicy) {
		toSerialize["postback_policy"] = o.PostbackPolicy
	}
	if !IsNil(o.PostbackUsername) {
		toSerialize["postback_username"] = o.PostbackUsername
	}
	if !IsNil(o.RedirectDelay) {
		toSerialize["redirect_delay"] = o.RedirectDelay
	}
	if !IsNil(o.RedirectFailure) {
		toSerialize["redirect_failure"] = o.RedirectFailure
	}
	if !IsNil(o.RedirectSuccess) {
		toSerialize["redirect_success"] = o.RedirectSuccess
	}
	if !IsNil(o.Renderer) {
		toSerialize["renderer"] = o.Renderer
	}
	if !IsNil(o.ReturnParams) {
		toSerialize["return_params"] = o.ReturnParams
	}
	if !IsNil(o.Ui) {
		toSerialize["ui"] = o.Ui
	}
	return toSerialize, nil
}

type NullablePaylinkConfig struct {
	value *PaylinkConfig
	isSet bool
}

func (v NullablePaylinkConfig) Get() *PaylinkConfig {
	return v.value
}

func (v *NullablePaylinkConfig) Set(val *PaylinkConfig) {
	v.value = val
	v.isSet = true
}

func (v NullablePaylinkConfig) IsSet() bool {
	return v.isSet
}

func (v *NullablePaylinkConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePaylinkConfig(val *PaylinkConfig) *NullablePaylinkConfig {
	return &NullablePaylinkConfig{value: val, isSet: true}
}

func (v NullablePaylinkConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePaylinkConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
