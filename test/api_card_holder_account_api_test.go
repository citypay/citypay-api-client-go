/*
CityPay Payment API

Testing CardHolderAccountApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package citypay

import (
	"context"
	openapiclient "github.com/citypay/citypay-api-client-go"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func Test_citypay_CardHolderAccountApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test CardHolderAccountApiService AccountCardDeleteRequest", func(t *testing.T) {

		var accountid string
		var cardId string

		resp, httpRes, err := apiClient.CardHolderAccountApi.AccountCardDeleteRequest(context.Background(), accountid, cardId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CardHolderAccountApiService AccountCardRegisterRequest", func(t *testing.T) {

		var accountid string

		resp, httpRes, err := apiClient.CardHolderAccountApi.AccountCardRegisterRequest(context.Background(), accountid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CardHolderAccountApiService AccountCardStatusRequest", func(t *testing.T) {

		var accountid string
		var cardId string

		resp, httpRes, err := apiClient.CardHolderAccountApi.AccountCardStatusRequest(context.Background(), accountid, cardId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CardHolderAccountApiService AccountChangeContactRequest", func(t *testing.T) {

		var accountid string

		resp, httpRes, err := apiClient.CardHolderAccountApi.AccountChangeContactRequest(context.Background(), accountid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CardHolderAccountApiService AccountCreate", func(t *testing.T) {

		resp, httpRes, err := apiClient.CardHolderAccountApi.AccountCreate(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CardHolderAccountApiService AccountDeleteRequest", func(t *testing.T) {

		var accountid string

		resp, httpRes, err := apiClient.CardHolderAccountApi.AccountDeleteRequest(context.Background(), accountid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CardHolderAccountApiService AccountExistsRequest", func(t *testing.T) {

		var accountid string

		resp, httpRes, err := apiClient.CardHolderAccountApi.AccountExistsRequest(context.Background(), accountid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CardHolderAccountApiService AccountRetrieveRequest", func(t *testing.T) {

		var accountid string

		resp, httpRes, err := apiClient.CardHolderAccountApi.AccountRetrieveRequest(context.Background(), accountid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CardHolderAccountApiService AccountStatusRequest", func(t *testing.T) {

		var accountid string

		resp, httpRes, err := apiClient.CardHolderAccountApi.AccountStatusRequest(context.Background(), accountid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CardHolderAccountApiService ChargeRequest", func(t *testing.T) {

		resp, httpRes, err := apiClient.CardHolderAccountApi.ChargeRequest(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
