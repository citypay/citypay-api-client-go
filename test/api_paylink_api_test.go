/*
CityPay Payment API

Testing PaylinkApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package citypay

import (
	"context"
	openapiclient "github.com/citypay/citypay-api-client-go"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"os"
	"strconv"
	"testing"
	"time"
)

func generateToken(client *openapiclient.APIClient, sandboxContext context.Context) string {

	cpMerchantId, _ := strconv.Atoi(os.Getenv("CP_MERCHANT_ID"))

	resp, _, _ := client.PaylinkApi.TokenCreateRequest(
		sandboxContext).PaylinkTokenRequestModel(*openapiclient.NewPaylinkTokenRequestModel(1, generateRandomId(), int32(cpMerchantId))).
		Execute()

	return resp.Token
}

func Test_citypay_PaylinkApiService(t *testing.T) {

	cpClientId := os.Getenv("CP_CLIENT_ID")
	cpLicenceKey := os.Getenv("CP_LICENCE_KEY")
	cpMerchantId64, _ := strconv.Atoi(os.Getenv("CP_MERCHANT_ID"))
	cpMerchantId := int32(cpMerchantId64)

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	apiKey := openapiclient.APIKey{
		Key:    openapiclient.GenerateApiKey(cpClientId, cpLicenceKey),
		Prefix: "",
	}
	sandboxContext := context.WithValue(context.WithValue(
		context.Background(),
		openapiclient.ContextAPIKeys, map[string]openapiclient.APIKey{"cp-api-key": apiKey}),
		openapiclient.ContextServerIndex, 1) // Use sandbox server

	t.Run("Test PaylinkApiService TokenCreateRequest", func(t *testing.T) {

		resp, httpRes, err := apiClient.PaylinkApi.TokenCreateRequest(
			sandboxContext).PaylinkTokenRequestModel(*openapiclient.NewPaylinkTokenRequestModel(1, generateRandomId(), cpMerchantId)).
			Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PaylinkApiService TokenAdjustmentRequest", func(t *testing.T) {

		token := generateToken(apiClient, sandboxContext)

		request := openapiclient.NewPaylinkAdjustmentRequest()
		request.SetAmount(2)
		request.SetIdentifier("test-id")
		request.SetReason("Test Reason")

		resp, httpRes, err := apiClient.PaylinkApi.TokenAdjustmentRequest(sandboxContext, token).PaylinkAdjustmentRequest(*request).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PaylinkApiService TokenCancelRequest", func(t *testing.T) {

		token := generateToken(apiClient, sandboxContext)

		resp, httpRes, err := apiClient.PaylinkApi.TokenCancelRequest(sandboxContext, token).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PaylinkApiService TokenChangesRequest", func(t *testing.T) {

		changeTime := time.Now().Add(-10 * time.Minute)

		resp, httpRes, err := apiClient.PaylinkApi.
			TokenChangesRequest(sandboxContext).
			PaylinkTokenStatusChangeRequest(*openapiclient.NewPaylinkTokenStatusChangeRequest(changeTime, cpMerchantId)).
			Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PaylinkApiService TokenCloseRequest", func(t *testing.T) {

		token := generateToken(apiClient, sandboxContext)

		resp, httpRes, err := apiClient.PaylinkApi.TokenCloseRequest(sandboxContext, token).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PaylinkApiService TokenCreateBillPaymentRequest", func(t *testing.T) {

		fieldGuardModel := openapiclient.NewPaylinkFieldGuardModel()
		fieldGuardModel.SetLabel("label")
		fieldGuardModel.SetFieldType("type")
		fieldGuardModel.SetName("name")
		fieldGuardModel.SetValue("value")
		fieldGuardModel.SetRegex("regex")

		configModel := openapiclient.NewPaylinkConfig()
		configModel.SetFieldGuard([]openapiclient.PaylinkFieldGuardModel{*fieldGuardModel})

		attachmentModel := openapiclient.NewPaylinkAttachmentRequest("filename", "application/pdf")

		tokenModel := openapiclient.NewPaylinkTokenRequestModel(1, generateRandomId(), cpMerchantId)
		tokenModel.SetConfig(*configModel)

		model := openapiclient.NewPaylinkBillPaymentTokenRequest(*tokenModel)
		model.SetAttachments([]openapiclient.PaylinkAttachmentRequest{*attachmentModel})

		resp, httpRes, err := apiClient.PaylinkApi.
			TokenCreateBillPaymentRequest(sandboxContext).
			PaylinkBillPaymentTokenRequest(*model).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PaylinkApiService TokenPurgeAttachmentsRequest", func(t *testing.T) {

		token := generateToken(apiClient, sandboxContext)

		resp, httpRes, err := apiClient.PaylinkApi.TokenPurgeAttachmentsRequest(sandboxContext, token).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PaylinkApiService TokenReconciledRequest", func(t *testing.T) {

		token := generateToken(apiClient, sandboxContext)

		resp, httpRes, err := apiClient.PaylinkApi.TokenReconciledRequest(sandboxContext, token).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PaylinkApiService TokenReopenRequest", func(t *testing.T) {

		token := generateToken(apiClient, sandboxContext)

		resp, httpRes, err := apiClient.PaylinkApi.TokenReopenRequest(sandboxContext, token).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PaylinkApiService TokenResendNotificationRequest", func(t *testing.T) {

		token := generateToken(apiClient, sandboxContext)

		resp, httpRes, err := apiClient.PaylinkApi.
			TokenResendNotificationRequest(sandboxContext, token).
			PaylinkResendNotificationRequest(*openapiclient.NewPaylinkResendNotificationRequestWithDefaults()).
			Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PaylinkApiService TokenStatusRequest", func(t *testing.T) {

		token := generateToken(apiClient, sandboxContext)

		resp, httpRes, err := apiClient.PaylinkApi.TokenStatusRequest(sandboxContext, token).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
