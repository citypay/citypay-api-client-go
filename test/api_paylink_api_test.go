/*
CityPay Payment API

Testing PaylinkApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package citypay

import (
	"context"
	openapiclient "github.com/citypay/citypay-api-client-go"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func Test_citypay_PaylinkApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test PaylinkApiService TokenAdjustmentRequest", func(t *testing.T) {

		var token string

		resp, httpRes, err := apiClient.PaylinkApi.TokenAdjustmentRequest(context.Background(), token).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PaylinkApiService TokenCancelRequest", func(t *testing.T) {

		var token string

		resp, httpRes, err := apiClient.PaylinkApi.TokenCancelRequest(context.Background(), token).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PaylinkApiService TokenChangesRequest", func(t *testing.T) {

		resp, httpRes, err := apiClient.PaylinkApi.TokenChangesRequest(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PaylinkApiService TokenCloseRequest", func(t *testing.T) {

		var token string

		resp, httpRes, err := apiClient.PaylinkApi.TokenCloseRequest(context.Background(), token).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PaylinkApiService TokenCreateBillPaymentRequest", func(t *testing.T) {

		resp, httpRes, err := apiClient.PaylinkApi.TokenCreateBillPaymentRequest(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PaylinkApiService TokenCreateRequest", func(t *testing.T) {

		resp, httpRes, err := apiClient.PaylinkApi.TokenCreateRequest(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PaylinkApiService TokenPurgeAttachmentsRequest", func(t *testing.T) {

		var token string

		resp, httpRes, err := apiClient.PaylinkApi.TokenPurgeAttachmentsRequest(context.Background(), token).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PaylinkApiService TokenReconciledRequest", func(t *testing.T) {

		var token string

		resp, httpRes, err := apiClient.PaylinkApi.TokenReconciledRequest(context.Background(), token).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PaylinkApiService TokenReopenRequest", func(t *testing.T) {

		var token string

		resp, httpRes, err := apiClient.PaylinkApi.TokenReopenRequest(context.Background(), token).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PaylinkApiService TokenResendNotificationRequest", func(t *testing.T) {

		var token string

		resp, httpRes, err := apiClient.PaylinkApi.TokenResendNotificationRequest(context.Background(), token).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PaylinkApiService TokenStatusRequest", func(t *testing.T) {

		var token string

		resp, httpRes, err := apiClient.PaylinkApi.TokenStatusRequest(context.Background(), token).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
