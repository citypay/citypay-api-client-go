/*
CityPay Payment API

Testing ReportingApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package citypay

import (
	"context"
	openapiclient "github.com/citypay/citypay-api-client-go"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func Test_citypay_ReportingApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test ReportingApiService BatchedTransactionReportRequest", func(t *testing.T) {

		var merchantid int32
		var batchNo string

		resp, httpRes, err := apiClient.ReportingApi.BatchedTransactionReportRequest(context.Background(), merchantid, batchNo).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReportingApiService MerchantBatchReportRequest", func(t *testing.T) {

		resp, httpRes, err := apiClient.ReportingApi.MerchantBatchReportRequest(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReportingApiService MerchantBatchRequest", func(t *testing.T) {

		var merchantid int32
		var batchNo string

		resp, httpRes, err := apiClient.ReportingApi.MerchantBatchRequest(context.Background(), merchantid, batchNo).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReportingApiService RemittanceRangeReport", func(t *testing.T) {

		var clientid string

		resp, httpRes, err := apiClient.ReportingApi.RemittanceRangeReport(context.Background(), clientid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReportingApiService RemittanceReportRequest", func(t *testing.T) {

		var clientid string
		var date string

		resp, httpRes, err := apiClient.ReportingApi.RemittanceReportRequest(context.Background(), clientid, date).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
