/*
CityPay Payment API

Testing AuthorisationAndPaymentApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package citypay

import (
	"context"
	openapiclient "github.com/citypay/citypay-api-client-go"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func Test_citypay_AuthorisationAndPaymentApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test AuthorisationAndPaymentApiService AuthorisationRequest", func(t *testing.T) {

		resp, httpRes, err := apiClient.AuthorisationAndPaymentApi.AuthorisationRequest(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AuthorisationAndPaymentApiService BinRangeLookupRequest", func(t *testing.T) {

		resp, httpRes, err := apiClient.AuthorisationAndPaymentApi.BinRangeLookupRequest(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AuthorisationAndPaymentApiService CResRequest", func(t *testing.T) {

		resp, httpRes, err := apiClient.AuthorisationAndPaymentApi.CResRequest(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AuthorisationAndPaymentApiService CaptureRequest", func(t *testing.T) {

		resp, httpRes, err := apiClient.AuthorisationAndPaymentApi.CaptureRequest(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AuthorisationAndPaymentApiService CreatePaymentIntent", func(t *testing.T) {

		resp, httpRes, err := apiClient.AuthorisationAndPaymentApi.CreatePaymentIntent(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AuthorisationAndPaymentApiService PaResRequest", func(t *testing.T) {

		resp, httpRes, err := apiClient.AuthorisationAndPaymentApi.PaResRequest(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AuthorisationAndPaymentApiService RefundRequest", func(t *testing.T) {

		resp, httpRes, err := apiClient.AuthorisationAndPaymentApi.RefundRequest(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AuthorisationAndPaymentApiService RetrievalRequest", func(t *testing.T) {

		resp, httpRes, err := apiClient.AuthorisationAndPaymentApi.RetrievalRequest(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AuthorisationAndPaymentApiService VoidRequest", func(t *testing.T) {

		resp, httpRes, err := apiClient.AuthorisationAndPaymentApi.VoidRequest(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
