/*
CityPay Payment API

Testing OperationalFunctionsApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package citypay

import (
	"context"
	openapiclient "github.com/citypay/citypay-api-client-go"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func Test_citypay_OperationalFunctionsApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test OperationalFunctionsApiService AclCheckRequest", func(t *testing.T) {

		resp, httpRes, err := apiClient.OperationalFunctionsApi.AclCheckRequest(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OperationalFunctionsApiService DomainKeyCheckRequest", func(t *testing.T) {

		resp, httpRes, err := apiClient.OperationalFunctionsApi.DomainKeyCheckRequest(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OperationalFunctionsApiService DomainKeyGenRequest", func(t *testing.T) {

		resp, httpRes, err := apiClient.OperationalFunctionsApi.DomainKeyGenRequest(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OperationalFunctionsApiService ListMerchantsRequest", func(t *testing.T) {

		var clientid string

		resp, httpRes, err := apiClient.OperationalFunctionsApi.ListMerchantsRequest(context.Background(), clientid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OperationalFunctionsApiService PingRequest", func(t *testing.T) {

		resp, httpRes, err := apiClient.OperationalFunctionsApi.PingRequest(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
