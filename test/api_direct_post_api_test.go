/*
CityPay Payment API

Testing DirectPostApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package citypay

import (
	"context"
	openapiclient "github.com/citypay/citypay-api-client-go"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"os"
	"testing"
)

func Test_citypay_DirectPostApiService(t *testing.T) {

	cpClientId := os.Getenv("CP_CLIENT_ID")
	cpLicenceKey := os.Getenv("CP_LICENCE_KEY")
	//cpMerchantId64, _ := strconv.Atoi(os.Getenv("CP_MERCHANT_ID"))
	//cpMerchantId := int32(cpMerchantId64)

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	apiKey := openapiclient.APIKey{
		Key:    openapiclient.GenerateApiKey(cpClientId, cpLicenceKey),
		Prefix: "",
	}
	sandboxContext := context.WithValue(context.WithValue(
		context.Background(),
		openapiclient.ContextAPIKeys, map[string]openapiclient.APIKey{"cp-api-key": apiKey}),
		openapiclient.ContextServerIndex, 1) // Use sandbox server

	t.Run("Test DirectPostApiService DirectCResAuthRequest", func(t *testing.T) {

		var uuid string

		resp, httpRes, err := apiClient.DirectPostApi.DirectCResAuthRequest(sandboxContext, uuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DirectPostApiService DirectCResTokeniseRequest", func(t *testing.T) {

		var uuid string

		resp, httpRes, err := apiClient.DirectPostApi.DirectCResTokeniseRequest(sandboxContext, uuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DirectPostApiService DirectPostAuthRequest", func(t *testing.T) {

		resp, httpRes, err := apiClient.DirectPostApi.DirectPostAuthRequest(sandboxContext).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DirectPostApiService DirectPostTokeniseRequest", func(t *testing.T) {

		model := openapiclient.NewDirectPostRequest(1, getValidCardNumber(), 1, 2028, generateRandomId(), "163DBAB194D743866A9BCC7FC9C8A88FCD99C6BBBF08D619291212D1B91EE12E")
		model.SetRedirectFailure("https://www.domain.com")
		model.SetRedirectSuccess("https://www.domain.com")

		resp, httpRes, err := apiClient.DirectPostApi.DirectPostTokeniseRequest(sandboxContext).DirectPostRequest(*model).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DirectPostApiService TokenRequest", func(t *testing.T) {

		token := generateToken(apiClient, sandboxContext)

		model := openapiclient.NewDirectTokenAuthRequest()
		model.SetRedirectFailure("https://www.domain.com")
		model.SetRedirectSuccess("https://www.domain.com")
		model.SetToken(token)

		resp, httpRes, err := apiClient.DirectPostApi.TokenRequest(sandboxContext).DirectTokenAuthRequest(*model).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
