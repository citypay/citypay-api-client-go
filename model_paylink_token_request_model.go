/*
CityPay Payment API

 Welcome to the CityPay API, a robust HTTP API payment solution designed for seamless server-to-server  transactional processing. Our API facilitates a wide array of payment operations, catering to diverse business needs.  Whether you're integrating Internet payments, handling Mail Order/Telephone Order (MOTO) transactions, managing  Subscriptions with Recurring and Continuous Authority payments, or navigating the complexities of 3-D Secure  authentication, our API is equipped to support your requirements. Additionally, we offer functionalities for  Authorisation, Refunding, Pre-Authorisation, Cancellation/Voids, and Completion processing, alongside the capability  for tokenised payments.  ## Compliance and Security Overview <aside class=\"notice\">   Ensuring the security of payment transactions and compliance with industry standards is paramount. Our API is    designed with stringent security measures and compliance protocols to safeguard sensitive information and meet    the rigorous requirements of Visa, MasterCard, and the PCI Security Standards Council. </aside>  ### Key Compliance and Security Measures  * **TLS Encryption**: All data transmissions must utilise TLS version 1.2 or higher, employing [strong cryptography](#enabled-tls-ciphers). Our infrastructure strictly enforces this requirement to maintain the integrity and confidentiality of data in transit. We conduct regular scans and assessments of our TLS endpoints to identify and mitigate vulnerabilities. * **Data Storage Prohibitions**: Storing sensitive cardholder data (CHD), such as the card security code (CSC) or primary account number (PAN), is strictly prohibited. Our API is designed to minimize your exposure to sensitive data, thereby reducing your compliance burden. * **Data Masking**: For consumer protection and compliance, full card numbers must not be displayed on receipts or any customer-facing materials. Our API automatically masks PANs, displaying only the last four digits to facilitate safe receipt generation. * **Network Scans**: If your application is web-based, regular scans of your hosting environment are mandatory to identify and rectify potential vulnerabilities. This proactive measure is crucial for maintaining a secure and compliant online presence. * **PCI Compliance**: Adherence to PCI DSS standards is not optional; it's a requirement for operating securely and legally in the payments ecosystem. For detailed information on compliance requirements and resources, please visit the PCI Security Standards Council website [https://www.pcisecuritystandards.org/](https://www.pcisecuritystandards.org/). * **Request Validation**: Our API includes mechanisms to verify the legitimacy of each request, ensuring it pertains to a valid account and originates from a trusted source. We leverage remote IP address verification alongside sophisticated application firewall technologies to thwart a wide array of common security threats.  ## Getting Started Before integrating with the CityPay API, ensure your application and development practices align with the outlined compliance and security measures. This preparatory step is crucial for a smooth integration process and the long-term success of your payment processing operations.  For further details on API endpoints, request/response formats, and code examples, proceed to the subsequent sections of our documentation. Our aim is to provide you with all the necessary tools and information to integrate our payment processing capabilities seamlessly into your application.  Thank you for choosing CityPay API. We look forward to supporting your payment processing needs with our secure, compliant, and versatile API solution.

API version: 6.6.40
Contact: support@citypay.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package citypay

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the PaylinkTokenRequestModel type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PaylinkTokenRequestModel{}

// PaylinkTokenRequestModel struct for PaylinkTokenRequestModel
type PaylinkTokenRequestModel struct {
	// Specifies an alpha-numeric account number that the Paylink service uses when creating a Cardholder Account. The value should be no longer than 20 characters in length.
	Accountno *string `json:"accountno,omitempty"`
	// Specifies the intended value of the transaction in the lowest denomination with no spacing characters or decimal point. This is the net total to be processed. An example of Â£74.95 would be presented as 7495.
	Amount     int32              `json:"amount"`
	Cardholder *PaylinkCardHolder `json:"cardholder,omitempty"`
	Cart       *PaylinkCart       `json:"cart,omitempty"`
	// The clientVersion field is used to specify the version of your application that has invoked the Paylink payment process. This feature is typically used for tracing issues relating to application deployments, or any Paylink integration module or plugin.
	ClientVersion *string        `json:"client_version,omitempty"`
	Config        *PaylinkConfig `json:"config,omitempty"`
	// A currency for the token. This value should be only used on multi-currency accounts and be an appropriate currency which the account is configured for.
	Currency *string `json:"currency,omitempty"`
	// The email field is used for the Merchant to be notified on completion of the transaction . The value may be supplied to override the default stored value. Emails sent to this address by the Paylink service should not be forwarded on to the cardholder as it may contain certain information that is used by the Paylink service to validate and authenticate Paylink Token Requests: for example, the Merchant ID and the licence key.
	Email *string `json:"email,omitempty"`
	// Identifies a particular transaction linked to a Merchant account. It enables accurate duplicate checking within a pre-configured time period, as well as transaction reporting and tracing. The identifier should be unique to prevent payment card processing attempts from being rejected due to duplication.
	Identifier string `json:"identifier"`
	// The merchant id you wish to process this transaction with.
	Merchantid int32 `json:"merchantid"`
	// True if the intent of this cardholder initiated transaction is to establish a recurring payment model, processable as merchant initiated transactions.
	Recurring *bool `json:"recurring,omitempty"`
	// an id associated with a subscription to link the token request against.
	SubscriptionId *string `json:"subscription_id,omitempty"`
	// A value to override the transaction type if requested by your account manager.
	TxType *string `json:"tx_type,omitempty"`
}

type _PaylinkTokenRequestModel PaylinkTokenRequestModel

// NewPaylinkTokenRequestModel instantiates a new PaylinkTokenRequestModel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPaylinkTokenRequestModel(amount int32, identifier string, merchantid int32) *PaylinkTokenRequestModel {
	this := PaylinkTokenRequestModel{}
	this.Amount = amount
	this.Identifier = identifier
	this.Merchantid = merchantid
	return &this
}

// NewPaylinkTokenRequestModelWithDefaults instantiates a new PaylinkTokenRequestModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPaylinkTokenRequestModelWithDefaults() *PaylinkTokenRequestModel {
	this := PaylinkTokenRequestModel{}
	return &this
}

// GetAccountno returns the Accountno field value if set, zero value otherwise.
func (o *PaylinkTokenRequestModel) GetAccountno() string {
	if o == nil || IsNil(o.Accountno) {
		var ret string
		return ret
	}
	return *o.Accountno
}

// GetAccountnoOk returns a tuple with the Accountno field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaylinkTokenRequestModel) GetAccountnoOk() (*string, bool) {
	if o == nil || IsNil(o.Accountno) {
		return nil, false
	}
	return o.Accountno, true
}

// HasAccountno returns a boolean if a field has been set.
func (o *PaylinkTokenRequestModel) HasAccountno() bool {
	if o != nil && !IsNil(o.Accountno) {
		return true
	}

	return false
}

// SetAccountno gets a reference to the given string and assigns it to the Accountno field.
func (o *PaylinkTokenRequestModel) SetAccountno(v string) {
	o.Accountno = &v
}

// GetAmount returns the Amount field value
func (o *PaylinkTokenRequestModel) GetAmount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Amount
}

// GetAmountOk returns a tuple with the Amount field value
// and a boolean to check if the value has been set.
func (o *PaylinkTokenRequestModel) GetAmountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Amount, true
}

// SetAmount sets field value
func (o *PaylinkTokenRequestModel) SetAmount(v int32) {
	o.Amount = v
}

// GetCardholder returns the Cardholder field value if set, zero value otherwise.
func (o *PaylinkTokenRequestModel) GetCardholder() PaylinkCardHolder {
	if o == nil || IsNil(o.Cardholder) {
		var ret PaylinkCardHolder
		return ret
	}
	return *o.Cardholder
}

// GetCardholderOk returns a tuple with the Cardholder field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaylinkTokenRequestModel) GetCardholderOk() (*PaylinkCardHolder, bool) {
	if o == nil || IsNil(o.Cardholder) {
		return nil, false
	}
	return o.Cardholder, true
}

// HasCardholder returns a boolean if a field has been set.
func (o *PaylinkTokenRequestModel) HasCardholder() bool {
	if o != nil && !IsNil(o.Cardholder) {
		return true
	}

	return false
}

// SetCardholder gets a reference to the given PaylinkCardHolder and assigns it to the Cardholder field.
func (o *PaylinkTokenRequestModel) SetCardholder(v PaylinkCardHolder) {
	o.Cardholder = &v
}

// GetCart returns the Cart field value if set, zero value otherwise.
func (o *PaylinkTokenRequestModel) GetCart() PaylinkCart {
	if o == nil || IsNil(o.Cart) {
		var ret PaylinkCart
		return ret
	}
	return *o.Cart
}

// GetCartOk returns a tuple with the Cart field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaylinkTokenRequestModel) GetCartOk() (*PaylinkCart, bool) {
	if o == nil || IsNil(o.Cart) {
		return nil, false
	}
	return o.Cart, true
}

// HasCart returns a boolean if a field has been set.
func (o *PaylinkTokenRequestModel) HasCart() bool {
	if o != nil && !IsNil(o.Cart) {
		return true
	}

	return false
}

// SetCart gets a reference to the given PaylinkCart and assigns it to the Cart field.
func (o *PaylinkTokenRequestModel) SetCart(v PaylinkCart) {
	o.Cart = &v
}

// GetClientVersion returns the ClientVersion field value if set, zero value otherwise.
func (o *PaylinkTokenRequestModel) GetClientVersion() string {
	if o == nil || IsNil(o.ClientVersion) {
		var ret string
		return ret
	}
	return *o.ClientVersion
}

// GetClientVersionOk returns a tuple with the ClientVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaylinkTokenRequestModel) GetClientVersionOk() (*string, bool) {
	if o == nil || IsNil(o.ClientVersion) {
		return nil, false
	}
	return o.ClientVersion, true
}

// HasClientVersion returns a boolean if a field has been set.
func (o *PaylinkTokenRequestModel) HasClientVersion() bool {
	if o != nil && !IsNil(o.ClientVersion) {
		return true
	}

	return false
}

// SetClientVersion gets a reference to the given string and assigns it to the ClientVersion field.
func (o *PaylinkTokenRequestModel) SetClientVersion(v string) {
	o.ClientVersion = &v
}

// GetConfig returns the Config field value if set, zero value otherwise.
func (o *PaylinkTokenRequestModel) GetConfig() PaylinkConfig {
	if o == nil || IsNil(o.Config) {
		var ret PaylinkConfig
		return ret
	}
	return *o.Config
}

// GetConfigOk returns a tuple with the Config field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaylinkTokenRequestModel) GetConfigOk() (*PaylinkConfig, bool) {
	if o == nil || IsNil(o.Config) {
		return nil, false
	}
	return o.Config, true
}

// HasConfig returns a boolean if a field has been set.
func (o *PaylinkTokenRequestModel) HasConfig() bool {
	if o != nil && !IsNil(o.Config) {
		return true
	}

	return false
}

// SetConfig gets a reference to the given PaylinkConfig and assigns it to the Config field.
func (o *PaylinkTokenRequestModel) SetConfig(v PaylinkConfig) {
	o.Config = &v
}

// GetCurrency returns the Currency field value if set, zero value otherwise.
func (o *PaylinkTokenRequestModel) GetCurrency() string {
	if o == nil || IsNil(o.Currency) {
		var ret string
		return ret
	}
	return *o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaylinkTokenRequestModel) GetCurrencyOk() (*string, bool) {
	if o == nil || IsNil(o.Currency) {
		return nil, false
	}
	return o.Currency, true
}

// HasCurrency returns a boolean if a field has been set.
func (o *PaylinkTokenRequestModel) HasCurrency() bool {
	if o != nil && !IsNil(o.Currency) {
		return true
	}

	return false
}

// SetCurrency gets a reference to the given string and assigns it to the Currency field.
func (o *PaylinkTokenRequestModel) SetCurrency(v string) {
	o.Currency = &v
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *PaylinkTokenRequestModel) GetEmail() string {
	if o == nil || IsNil(o.Email) {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaylinkTokenRequestModel) GetEmailOk() (*string, bool) {
	if o == nil || IsNil(o.Email) {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *PaylinkTokenRequestModel) HasEmail() bool {
	if o != nil && !IsNil(o.Email) {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *PaylinkTokenRequestModel) SetEmail(v string) {
	o.Email = &v
}

// GetIdentifier returns the Identifier field value
func (o *PaylinkTokenRequestModel) GetIdentifier() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Identifier
}

// GetIdentifierOk returns a tuple with the Identifier field value
// and a boolean to check if the value has been set.
func (o *PaylinkTokenRequestModel) GetIdentifierOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Identifier, true
}

// SetIdentifier sets field value
func (o *PaylinkTokenRequestModel) SetIdentifier(v string) {
	o.Identifier = v
}

// GetMerchantid returns the Merchantid field value
func (o *PaylinkTokenRequestModel) GetMerchantid() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Merchantid
}

// GetMerchantidOk returns a tuple with the Merchantid field value
// and a boolean to check if the value has been set.
func (o *PaylinkTokenRequestModel) GetMerchantidOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Merchantid, true
}

// SetMerchantid sets field value
func (o *PaylinkTokenRequestModel) SetMerchantid(v int32) {
	o.Merchantid = v
}

// GetRecurring returns the Recurring field value if set, zero value otherwise.
func (o *PaylinkTokenRequestModel) GetRecurring() bool {
	if o == nil || IsNil(o.Recurring) {
		var ret bool
		return ret
	}
	return *o.Recurring
}

// GetRecurringOk returns a tuple with the Recurring field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaylinkTokenRequestModel) GetRecurringOk() (*bool, bool) {
	if o == nil || IsNil(o.Recurring) {
		return nil, false
	}
	return o.Recurring, true
}

// HasRecurring returns a boolean if a field has been set.
func (o *PaylinkTokenRequestModel) HasRecurring() bool {
	if o != nil && !IsNil(o.Recurring) {
		return true
	}

	return false
}

// SetRecurring gets a reference to the given bool and assigns it to the Recurring field.
func (o *PaylinkTokenRequestModel) SetRecurring(v bool) {
	o.Recurring = &v
}

// GetSubscriptionId returns the SubscriptionId field value if set, zero value otherwise.
func (o *PaylinkTokenRequestModel) GetSubscriptionId() string {
	if o == nil || IsNil(o.SubscriptionId) {
		var ret string
		return ret
	}
	return *o.SubscriptionId
}

// GetSubscriptionIdOk returns a tuple with the SubscriptionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaylinkTokenRequestModel) GetSubscriptionIdOk() (*string, bool) {
	if o == nil || IsNil(o.SubscriptionId) {
		return nil, false
	}
	return o.SubscriptionId, true
}

// HasSubscriptionId returns a boolean if a field has been set.
func (o *PaylinkTokenRequestModel) HasSubscriptionId() bool {
	if o != nil && !IsNil(o.SubscriptionId) {
		return true
	}

	return false
}

// SetSubscriptionId gets a reference to the given string and assigns it to the SubscriptionId field.
func (o *PaylinkTokenRequestModel) SetSubscriptionId(v string) {
	o.SubscriptionId = &v
}

// GetTxType returns the TxType field value if set, zero value otherwise.
func (o *PaylinkTokenRequestModel) GetTxType() string {
	if o == nil || IsNil(o.TxType) {
		var ret string
		return ret
	}
	return *o.TxType
}

// GetTxTypeOk returns a tuple with the TxType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaylinkTokenRequestModel) GetTxTypeOk() (*string, bool) {
	if o == nil || IsNil(o.TxType) {
		return nil, false
	}
	return o.TxType, true
}

// HasTxType returns a boolean if a field has been set.
func (o *PaylinkTokenRequestModel) HasTxType() bool {
	if o != nil && !IsNil(o.TxType) {
		return true
	}

	return false
}

// SetTxType gets a reference to the given string and assigns it to the TxType field.
func (o *PaylinkTokenRequestModel) SetTxType(v string) {
	o.TxType = &v
}

func (o PaylinkTokenRequestModel) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PaylinkTokenRequestModel) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Accountno) {
		toSerialize["accountno"] = o.Accountno
	}
	toSerialize["amount"] = o.Amount
	if !IsNil(o.Cardholder) {
		toSerialize["cardholder"] = o.Cardholder
	}
	if !IsNil(o.Cart) {
		toSerialize["cart"] = o.Cart
	}
	if !IsNil(o.ClientVersion) {
		toSerialize["client_version"] = o.ClientVersion
	}
	if !IsNil(o.Config) {
		toSerialize["config"] = o.Config
	}
	if !IsNil(o.Currency) {
		toSerialize["currency"] = o.Currency
	}
	if !IsNil(o.Email) {
		toSerialize["email"] = o.Email
	}
	toSerialize["identifier"] = o.Identifier
	toSerialize["merchantid"] = o.Merchantid
	if !IsNil(o.Recurring) {
		toSerialize["recurring"] = o.Recurring
	}
	if !IsNil(o.SubscriptionId) {
		toSerialize["subscription_id"] = o.SubscriptionId
	}
	if !IsNil(o.TxType) {
		toSerialize["tx_type"] = o.TxType
	}
	return toSerialize, nil
}

func (o *PaylinkTokenRequestModel) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"amount",
		"identifier",
		"merchantid",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPaylinkTokenRequestModel := _PaylinkTokenRequestModel{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPaylinkTokenRequestModel)

	if err != nil {
		return err
	}

	*o = PaylinkTokenRequestModel(varPaylinkTokenRequestModel)

	return err
}

type NullablePaylinkTokenRequestModel struct {
	value *PaylinkTokenRequestModel
	isSet bool
}

func (v NullablePaylinkTokenRequestModel) Get() *PaylinkTokenRequestModel {
	return v.value
}

func (v *NullablePaylinkTokenRequestModel) Set(val *PaylinkTokenRequestModel) {
	v.value = val
	v.isSet = true
}

func (v NullablePaylinkTokenRequestModel) IsSet() bool {
	return v.isSet
}

func (v *NullablePaylinkTokenRequestModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePaylinkTokenRequestModel(val *PaylinkTokenRequestModel) *NullablePaylinkTokenRequestModel {
	return &NullablePaylinkTokenRequestModel{value: val, isSet: true}
}

func (v NullablePaylinkTokenRequestModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePaylinkTokenRequestModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
